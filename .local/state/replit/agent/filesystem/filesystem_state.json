{"file_contents":{"components/ui/textarea.tsx":{"content":"import * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Textarea({ className, ...props }: React.ComponentProps<'textarea'>) {\n  return (\n    <textarea\n      data-slot=\"textarea\"\n      className={cn(\n        'border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Textarea }\n","size_bytes":760},"app/(dashboard)/accounts/page.tsx":{"content":"'use client';\n\n// Import necessary React hooks and components\nimport { useState, useCallback, useEffect } from 'react'; // Added useEffect\nimport { Button } from '@/components/ui/button';\nimport { Loader2, Plus } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\n// Import custom hooks and components\nimport { useAccountsManagement } from '@/lib/hooks/useAccountsManagement'; // Adjust path if needed\nimport { useOAuthCallbackHandler } from '@/lib/hooks/useOAuthCallbackHandler'; // Adjust path if needed\nimport { AccountCard } from '@/components/accounts/AccountCard'; // Adjust path if needed\nimport { NoAccountsPlaceholder } from '@/components/accounts/NoAccountsPlaceholder'; // Adjust path if needed\n\n// Helper function (can be moved to a utils file)\nconst formatDate = (dateString?: string | null): string => { // Allow null\n  if (!dateString) return 'Never';\n  try {\n      const date = new Date(dateString);\n      // Check if date is valid\n      if (isNaN(date.getTime())) return 'Invalid Date';\n\n      const now = new Date();\n      const diffMs = now.getTime() - date.getTime();\n      const diffMins = Math.floor(diffMs / 60000);\n      const diffHours = Math.floor(diffMins / 60);\n      const diffDays = Math.floor(diffHours / 24);\n\n      if (diffMins < 1) return 'Just now';\n      if (diffMins < 60) return `${diffMins}m ago`;\n      if (diffHours < 24) return `${diffHours}h ago`;\n      if (diffDays < 7) return `${diffDays}d ago`;\n      // Consistent date format\n      return date.toLocaleDateString('en-CA', { year: 'numeric', month: 'short', day: 'numeric' });\n  } catch (e) {\n      console.error(\"Error formatting date:\", dateString, e);\n      return 'Invalid Date';\n  }\n};\n\n// Main page component\nexport default function AccountsPage() {\n  // Use the custom hook for account state and actions\n  const {\n    accounts,\n    loading,\n    syncing,\n    deleting,\n    fetchAccounts, // Get fetchAccounts from the hook\n    handleSync,\n    handleDisconnect,\n  } = useAccountsManagement();\n\n  // State for the connect button loading state\n  const [connecting, setConnecting] = useState(false);\n  const { toast } = useToast();\n\n  // Initialize the OAuth callback handler hook, passing necessary functions\n   useOAuthCallbackHandler({ fetchAccounts, handleSync });\n\n    // Call fetchAccounts on initial mount IF the callback handler doesn't trigger a fetch\n    // Note: useOAuthCallbackHandler now handles the initial fetch based on hash presence.\n    // useEffect(() => {\n    //    // Initial fetch is now handled by useOAuthCallbackHandler\n    //    // fetchAccounts();\n    // }, [fetchAccounts]); // fetchAccounts is stable due to useCallback\n\n  // Callback for initiating the Google connection process\n  const handleConnect = useCallback(async () => {\n    setConnecting(true);\n    console.log('[Accounts Page] handleConnect initiated...');\n    try {\n      // Call the API route to get the Google OAuth URL\n      const response = await fetch('/api/gmb/create-auth-url', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        // No body needed if the API route gets user context from session/auth\n      });\n\n      if (!response.ok) {\n        // Try to parse error details from the server response\n        const errorData = await response.json().catch(() => ({ error: 'Failed to parse server error response' }));\n        console.error('[Accounts Page] Failed response from create-auth-url:', response.status, errorData);\n        // Throw a user-friendly error message\n        throw new Error(errorData.error || errorData.message || `Failed to initiate connection (status: ${response.status})`);\n      }\n\n      // Get the auth URL from the successful response\n      const data = await response.json();\n      const authUrl = data.authUrl || data.url; // Support both keys for safety\n\n      if (authUrl && typeof authUrl === 'string') {\n        console.log('[Accounts Page] Redirecting to Google OAuth:', authUrl);\n        // Redirect the user's browser to Google's authentication page\n        window.location.href = authUrl;\n        // Keep the `connecting` state true because the page will navigate away\n      } else {\n        // Handle case where URL is missing or invalid in the response\n        throw new Error('Invalid authorization URL received from server.');\n      }\n    } catch (error: any) {\n      console.error('[Accounts Page] Error during handleConnect:', error);\n      // Show an error toast to the user\n      toast({\n        title: 'Connection Error',\n        description: error.message || 'Could not start the Google connection process. Please try again.',\n        variant: 'destructive',\n      });\n      setConnecting(false); // Reset button state only if redirection fails\n    }\n    // No `finally` block needed here as successful execution redirects the page\n  }, [toast]); // Include toast in dependencies\n\n  // Render loading state\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <Loader2 className=\"w-8 h-8 animate-spin text-primary\" />\n        <span className=\"ml-3 text-muted-foreground\">Loading connected accounts...</span>\n      </div>\n    );\n  }\n\n  // Render the main page content\n  return (\n    <div className=\"space-y-6\">\n      {/* Page Header and Connect Button */}\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 border-b border-primary/10 pb-4\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\">Google Accounts</h1>\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            Manage connections to your Google My Business accounts.\n          </p>\n        </div>\n        <Button onClick={handleConnect} disabled={connecting} className=\"w-full sm:w-auto\">\n          {connecting ? (\n            <>\n              <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n              Redirecting...\n            </>\n          ) : (\n            <>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Connect Account\n            </>\n          )}\n        </Button>\n      </div>\n\n      {/* Conditional Rendering: Placeholder or Account Cards */}\n      {accounts.length === 0 ? (\n        // Show placeholder if no accounts are connected\n        <NoAccountsPlaceholder onConnect={handleConnect} isConnecting={connecting} />\n      ) : (\n        // Show grid of account cards if accounts exist\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 lg:gap-6\">\n          {accounts.map((account) => (\n            <AccountCard\n              key={account.id} // Use account.id as the key\n              account={account}\n              syncingAccountId={syncing}\n              deletingAccountId={deleting}\n              onSync={handleSync}\n              onDisconnect={handleDisconnect}\n              formatDate={formatDate}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":6913},"app/(dashboard)/reviews/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { ReviewColumn } from \"@/components/reviews/review-column\"\nimport { ReplyDialog } from \"@/components/reviews/reply-dialog\"\nimport { Button } from \"@/components/ui/button\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport type { GMBReview, GMBLocation } from \"@/lib/types/database\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport { MessageSquare, RefreshCw } from \"lucide-react\"\n\nexport default function ReviewsPage() {\n  const [reviews, setReviews] = useState<GMBReview[]>([])\n  const [locations, setLocations] = useState<GMBLocation[]>([])\n  const [loading, setLoading] = useState(true)\n  const [selectedLocation, setSelectedLocation] = useState<string>(\"all\")\n  const [selectedReview, setSelectedReview] = useState<GMBReview | null>(null)\n  const [replyDialogOpen, setReplyDialogOpen] = useState(false)\n  const supabase = createClient()\n\n  const fetchData = async () => {\n    try {\n      const {\n        data: { user },\n      } = await supabase.auth.getUser()\n      if (!user) return\n\n      // Fetch locations\n      const { data: locationsData, error: locationsError } = await supabase\n        .from(\"gmb_locations\")\n        .select(\"*\")\n        .eq(\"user_id\", user.id)\n\n      if (locationsError) {\n        console.error('[Reviews Page] Error fetching locations:', locationsError)\n      } else if (locationsData) {\n        setLocations(locationsData)\n      }\n\n      // Fetch reviews\n      let query = supabase\n        .from(\"gmb_reviews\")\n        .select(\"*\")\n        .eq(\"user_id\", user.id)\n        .order(\"created_at\", { ascending: false })\n\n      if (selectedLocation !== \"all\") {\n        query = query.eq(\"location_id\", selectedLocation)\n      }\n\n      const { data: reviewsData, error: reviewsError } = await query\n\n      if (reviewsError) {\n        console.error('[Reviews Page] Error fetching reviews:', reviewsError)\n      } else if (reviewsData) {\n        setReviews(reviewsData)\n      }\n    } catch (error) {\n      console.error('[Reviews Page] Unexpected error:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    fetchData()\n\n    // Subscribe to real-time updates\n    const channel = supabase\n      .channel(\"gmb_reviews\")\n      .on(\n        \"postgres_changes\",\n        {\n          event: \"*\",\n          schema: \"public\",\n          table: \"gmb_reviews\",\n        },\n        () => {\n          fetchData()\n        },\n      )\n      .subscribe()\n\n    return () => {\n      supabase.removeChannel(channel)\n    }\n  }, [selectedLocation, supabase])\n\n  const handleGenerateResponse = async (reviewId: string) => {\n    const review = reviews.find((r) => r.id === reviewId)\n    if (!review) return\n\n    // Update status to in_progress\n    await supabase.from(\"gmb_reviews\").update({ status: \"in_progress\" }).eq(\"id\", reviewId)\n\n    // Open reply dialog\n    setSelectedReview(review)\n    setReplyDialogOpen(true)\n  }\n\n  const handleReply = (reviewId: string) => {\n    const review = reviews.find((r) => r.id === reviewId)\n    if (!review) return\n\n    setSelectedReview(review)\n    setReplyDialogOpen(true)\n  }\n\n  const newReviews = reviews.filter((r) => r.status === \"new\")\n  const inProgressReviews = reviews.filter((r) => r.status === \"in_progress\")\n  const respondedReviews = reviews.filter((r) => r.status === \"responded\")\n\n  return (\n    <div className=\"space-y-6 h-full flex flex-col\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Reviews Hub</h1>\n          <p className=\"text-muted-foreground mt-1\">Manage and respond to customer reviews</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Select value={selectedLocation} onValueChange={setSelectedLocation}>\n            <SelectTrigger className=\"w-[200px] bg-secondary border-primary/30 text-foreground\">\n              <SelectValue placeholder=\"All Locations\" />\n            </SelectTrigger>\n            <SelectContent className=\"bg-card border-primary/30\">\n              <SelectItem value=\"all\">All Locations</SelectItem>\n              {locations.map((location) => (\n                <SelectItem key={location.id} value={location.id}>\n                  {location.location_name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            onClick={() => fetchData()}\n            className=\"border-primary/30 text-muted-foreground hover:text-foreground\"\n          >\n            <RefreshCw className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Kanban Board */}\n      {loading ? (\n        <div className=\"grid gap-6 md:grid-cols-3 flex-1\">\n          {[...Array(3)].map((_, i) => (\n            <div key={i} className=\"space-y-4\">\n              <Skeleton className=\"h-12 w-full\" />\n              <Skeleton className=\"h-64 w-full\" />\n              <Skeleton className=\"h-64 w-full\" />\n            </div>\n          ))}\n        </div>\n      ) : reviews.length === 0 ? (\n        <div className=\"flex flex-col items-center justify-center py-16 text-center flex-1\">\n          <div className=\"w-16 h-16 rounded-full bg-primary/20 flex items-center justify-center mb-4\">\n            <MessageSquare className=\"w-8 h-8 text-primary\" />\n          </div>\n          <h3 className=\"text-xl font-semibold text-foreground mb-2\">No reviews yet</h3>\n          <p className=\"text-muted-foreground max-w-md\">\n            Reviews from your Google My Business locations will appear here\n          </p>\n        </div>\n      ) : (\n        <div className=\"grid gap-6 md:grid-cols-3 flex-1 overflow-hidden\">\n          <ReviewColumn\n            title=\"New\"\n            status=\"new\"\n            reviews={newReviews}\n            onGenerateResponse={handleGenerateResponse}\n            onReply={handleReply}\n          />\n          <ReviewColumn\n            title=\"In Progress\"\n            status=\"in_progress\"\n            reviews={inProgressReviews}\n            onGenerateResponse={handleGenerateResponse}\n            onReply={handleReply}\n          />\n          <ReviewColumn\n            title=\"Responded\"\n            status=\"responded\"\n            reviews={respondedReviews}\n            onGenerateResponse={handleGenerateResponse}\n            onReply={handleReply}\n          />\n        </div>\n      )}\n\n      {/* Reply Dialog */}\n      <ReplyDialog review={selectedReview} open={replyDialogOpen} onOpenChange={setReplyDialogOpen} />\n    </div>\n  )\n}\n","size_bytes":6711},"lib/supabase/client.ts":{"content":"import { createBrowserClient } from \"@supabase/ssr\"\n\nexport function createClient() {\n  return createBrowserClient(process.env.NEXT_PUBLIC_SUPABASE_URL!, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!)\n}\n","size_bytes":200},"components/analytics/location-performance.tsx":{"content":"\"use client\"\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Star, TrendingUp } from \"lucide-react\"\nimport { motion } from \"framer-motion\"\nimport { useEffect, useState } from \"react\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport type { GMBLocation } from \"@/lib/types/database\"\n\nexport function LocationPerformance() {\n  const [locations, setLocations] = useState<GMBLocation[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const supabase = createClient()\n\n  useEffect(() => {\n    async function fetchLocations() {\n      try {\n        const { data } = await supabase\n          .from(\"gmb_locations\")\n          .select(\"*\")\n          .order(\"rating\", { ascending: false })\n          .limit(4)\n\n        if (data) {\n          setLocations(data)\n        }\n      } catch (error) {\n        console.error(\"Error fetching locations:\", error)\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    fetchLocations()\n\n    const channel = supabase\n      .channel(\"location-performance\")\n      .on(\"postgres_changes\", { event: \"*\", schema: \"public\", table: \"gmb_locations\" }, fetchLocations)\n      .subscribe()\n\n    return () => {\n      supabase.removeChannel(channel)\n    }\n  }, [supabase])\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-card border-primary/30\">\n        <CardHeader>\n          <CardTitle className=\"text-foreground\">Top Performing Locations</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          {[1, 2, 3, 4].map((i) => (\n            <div key={i} className=\"h-20 bg-secondary animate-pulse rounded-lg\" />\n          ))}\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card className=\"bg-card border-primary/30\">\n      <CardHeader>\n        <CardTitle className=\"text-foreground\">Top Performing Locations</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        {locations.length === 0 ? (\n          <p className=\"text-muted-foreground text-center py-8\">No locations found</p>\n        ) : (\n          locations.map((location, index) => (\n            <motion.div\n              key={location.id}\n              initial={{ opacity: 0, x: -20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: index * 0.1 }}\n              className=\"flex items-center justify-between p-4 rounded-lg bg-secondary border border-primary/20 hover:border-primary/40 transition-all duration-200\"\n            >\n              <div className=\"flex-1\">\n                <p className=\"font-semibold text-foreground\">{location.location_name}</p>\n                <div className=\"flex items-center gap-3 mt-1\">\n                  <div className=\"flex items-center gap-1\">\n                    <Star className=\"w-4 h-4 fill-primary text-primary\" />\n                    <span className=\"text-sm text-muted-foreground\">\n                      {location.rating?.toFixed(1) || \"N/A\"}\n                    </span>\n                  </div>\n                  <span className=\"text-sm text-muted-foreground\">{location.review_count || 0} reviews</span>\n                </div>\n              </div>\n              <Badge className=\"bg-green-500/20 text-green-500 border-green-500/30 flex items-center gap-1\">\n                <TrendingUp className=\"w-3 h-3\" />+{Math.floor(Math.random() * 20)}%\n              </Badge>\n            </motion.div>\n          ))\n        )}\n      </CardContent>\n    </Card>\n  )\n}\n","size_bytes":3498},"components/ai-studio/content-history.tsx":{"content":"\"use client\"\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Clock, Copy, Trash2 } from \"lucide-react\"\nimport { motion } from \"framer-motion\"\n\ninterface HistoryItem {\n  id: string\n  type: string\n  content: string\n  tone: string\n  timestamp: string\n}\n\nconst mockHistory: HistoryItem[] = [\n  {\n    id: \"1\",\n    type: \"posts\",\n    content: \"We're excited to announce our new summer menu! Come try our fresh, locally-sourced dishes...\",\n    tone: \"enthusiastic\",\n    timestamp: \"2 hours ago\",\n  },\n  {\n    id: \"2\",\n    type: \"responses\",\n    content: \"Thank you for your wonderful feedback! We're thrilled to hear you enjoyed your experience...\",\n    tone: \"professional\",\n    timestamp: \"5 hours ago\",\n  },\n  {\n    id: \"3\",\n    type: \"descriptions\",\n    content: \"Welcome to our family-owned restaurant where tradition meets innovation...\",\n    tone: \"friendly\",\n    timestamp: \"1 day ago\",\n  },\n]\n\nexport function ContentHistory() {\n  const handleCopy = (content: string) => {\n    navigator.clipboard.writeText(content)\n  }\n\n  return (\n    <Card className=\"bg-card border-primary/30\">\n      <CardHeader>\n        <CardTitle className=\"text-foreground flex items-center gap-2\">\n          <Clock className=\"w-5 h-5 text-primary\" />\n          Recent Generations\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        {mockHistory.map((item, index) => (\n          <motion.div\n            key={item.id}\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ delay: index * 0.1 }}\n            className=\"p-4 rounded-lg bg-secondary border border-primary/20 hover:border-primary/40 transition-all duration-200\"\n          >\n            <div className=\"flex items-start justify-between gap-3 mb-2\">\n              <div className=\"flex items-center gap-2\">\n                <Badge className=\"bg-primary/20 text-primary border-primary/30 capitalize\">{item.type}</Badge>\n                <Badge variant=\"outline\" className=\"border-primary/30 text-muted-foreground capitalize\">\n                  {item.tone}\n                </Badge>\n              </div>\n              <span className=\"text-xs text-muted-foreground\">{item.timestamp}</span>\n            </div>\n            <p className=\"text-sm text-foreground line-clamp-2 mb-3\">{item.content}</p>\n            <div className=\"flex gap-2\">\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={() => handleCopy(item.content)}\n                className=\"text-muted-foreground hover:text-foreground\"\n              >\n                <Copy className=\"w-3 h-3 mr-1\" />\n                Copy\n              </Button>\n              <Button size=\"sm\" variant=\"ghost\" className=\"text-muted-foreground hover:text-destructive\">\n                <Trash2 className=\"w-3 h-3 mr-1\" />\n                Delete\n              </Button>\n            </div>\n          </motion.div>\n        ))}\n      </CardContent>\n    </Card>\n  )\n}\n","size_bytes":3119},"components/ui/avatar.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as AvatarPrimitive from '@radix-ui/react-avatar'\n\nimport { cn } from '@/lib/utils'\n\nfunction Avatar({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Root>) {\n  return (\n    <AvatarPrimitive.Root\n      data-slot=\"avatar\"\n      className={cn(\n        'relative flex size-8 shrink-0 overflow-hidden rounded-full',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarImage({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Image>) {\n  return (\n    <AvatarPrimitive.Image\n      data-slot=\"avatar-image\"\n      className={cn('aspect-square size-full', className)}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarFallback({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\n  return (\n    <AvatarPrimitive.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        'bg-muted flex size-full items-center justify-center rounded-full',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1099},"lib/hooks/use-supabase.ts":{"content":"\"use client\"\n\nimport { createClient } from \"@/lib/supabase/client\"\nimport { useEffect, useState } from \"react\"\nimport type { User } from \"@supabase/supabase-js\"\n\nexport function useSupabase() {\n  const [user, setUser] = useState<User | null>(null)\n  const [loading, setLoading] = useState(true)\n  const supabase = createClient()\n\n  useEffect(() => {\n    const getUser = async () => {\n      const {\n        data: { user },\n      } = await supabase.auth.getUser()\n      setUser(user)\n      setLoading(false)\n    }\n\n    getUser()\n\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange((_event, session) => {\n      setUser(session?.user ?? null)\n    })\n\n    return () => subscription.unsubscribe()\n  }, [supabase])\n\n  return { user, loading, supabase }\n}\n","size_bytes":779},"components/theme-provider.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport {\n  ThemeProvider as NextThemesProvider,\n  type ThemeProviderProps,\n} from 'next-themes'\n\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}\n","size_bytes":292},"supabase/config.toml":{"content":"project_id = \"rrarhekwhgpgkakqrlyn\"\n\n[api]\nenabled = true\nport = 54321\nschemas = [\"public\"]\nextra_search_path = [\"public\"]\nmax_rows = 1000\n\n[db]\nport = 54322\nmajor_version = 15\n\n[studio]\nenabled = true\nport = 54323\n\n[auth]\nenabled = true\nsite_url = \"https://www.nnh.ae\"\nadditional_redirect_urls = [\"http://localhost:3000\"]\njwt_expiry = 3600\nenable_signup = true\n\n[auth.external.google]\nenabled = true\nclient_id = \"env(GOOGLE_CLIENT_ID)\"\nsecret = \"env(GOOGLE_CLIENT_SECRET)\"\nredirect_uri = \"https://www.nnh.ae/auth/callback\"\n","size_bytes":524},"app/terms/page.tsx":{"content":"import Link from \"next/link\"\nimport { ArrowLeft } from \"lucide-react\"\n\nexport default function TermsPage() {\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      <div className=\"container mx-auto px-4 py-12 max-w-4xl\">\n        <Link\n          href=\"/\"\n          className=\"inline-flex items-center gap-2 text-gray-400 hover:text-orange-500 transition-colors mb-8\"\n        >\n          <ArrowLeft className=\"w-4 h-4\" />\n          Back to Home\n        </Link>\n\n        <h1 className=\"text-4xl font-bold mb-8 text-balance\">Terms of Service</h1>\n\n        <div className=\"space-y-8 text-gray-300\">\n          <section>\n            <h2 className=\"text-2xl font-semibold text-white mb-4\">1. Acceptance of Terms</h2>\n            <p className=\"mb-4\">\n              By accessing and using this service, you accept and agree to be bound by the terms and provision of this\n              agreement.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-white mb-4\">2. Use License</h2>\n            <p className=\"mb-4\">\n              Permission is granted to temporarily access the materials on GMB Platform for personal, non-commercial\n              transitory viewing only.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-white mb-4\">3. Account Responsibilities</h2>\n            <p className=\"mb-4\">You are responsible for:</p>\n            <ul className=\"list-disc list-inside space-y-2 ml-4\">\n              <li>Maintaining the confidentiality of your account credentials</li>\n              <li>All activities that occur under your account</li>\n              <li>Ensuring your use complies with applicable laws</li>\n              <li>The accuracy of information you provide</li>\n            </ul>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-white mb-4\">4. Service Modifications</h2>\n            <p className=\"mb-4\">\n              We reserve the right to modify or discontinue the service at any time without notice. We shall not be\n              liable to you or any third party for any modification, suspension, or discontinuance of the service.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-white mb-4\">5. Limitation of Liability</h2>\n            <p className=\"mb-4\">\n              In no event shall GMB Platform be liable for any damages arising out of the use or inability to use the\n              materials on our platform.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-white mb-4\">6. Contact</h2>\n            <p>\n              Questions about the Terms of Service should be sent to{\" \"}\n              <a href=\"mailto:legal@gmbplatform.com\" className=\"text-orange-500 hover:underline\">\n                legal@gmbplatform.com\n              </a>\n            </p>\n          </section>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":3050},"app/(dashboard)/layout.tsx":{"content":"import type React from \"react\"\nimport { Sidebar } from \"@/components/layout/sidebar\"\nimport { Header } from \"@/components/layout/header\"\nimport { createClient } from \"@/lib/supabase/server\"\nimport { redirect } from \"next/navigation\"\n\nexport default async function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const supabase = await createClient()\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n\n  if (!user) {\n    redirect(\"/auth/login\")\n  }\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      <div className=\"flex flex-1 flex-col overflow-hidden\">\n        <Header />\n        <main className=\"flex-1 overflow-y-auto p-6\">{children}</main>\n      </div>\n    </div>\n  )\n}\n","size_bytes":747},"components/ui/skeleton.tsx":{"content":"import { cn } from '@/lib/utils'\n\nfunction Skeleton({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"skeleton\"\n      className={cn('bg-accent animate-pulse rounded-md', className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":276},"components/locations/location-card.tsx":{"content":"\"use client\"\n\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { motion } from \"framer-motion\"\nimport { Eye, MessageSquare, Zap, MapPin, Phone, Globe, Sparkles } from \"lucide-react\"\nimport type { GMBLocation } from \"@/lib/types/database\"\nimport Link from \"next/link\"\n\ninterface LocationCardProps {\n  location: GMBLocation\n  index: number\n}\n\nexport function LocationCard({ location, index }: LocationCardProps) {\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5, delay: index * 0.05 }}\n      whileHover={{ y: -4 }}\n      className=\"group relative\"\n    >\n      <Card className=\"bg-card border-primary/30 hover:border-primary/50 transition-all duration-300 hover:shadow-lg hover:shadow-primary/20 overflow-hidden\">\n        {/* Animated background gradient */}\n        <div className=\"absolute inset-0 bg-gradient-to-br from-primary/10 via-transparent to-accent/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500\" />\n\n        {/* Sync status indicator */}\n        <div className=\"absolute top-4 right-4 z-10\">\n          {location.is_syncing ? (\n            <motion.div\n              animate={{ rotate: 360 }}\n              transition={{ duration: 2, repeat: Number.POSITIVE_INFINITY, ease: \"linear\" }}\n              className=\"w-3 h-3 rounded-full bg-gradient-to-r from-primary to-accent\"\n            />\n          ) : (\n            <div className=\"w-3 h-3 rounded-full bg-green-500\" />\n          )}\n        </div>\n\n        <CardContent className=\"p-6 relative z-10\">\n          {/* Location header */}\n          <div className=\"space-y-3 mb-4\">\n            <div className=\"flex items-start justify-between\">\n              <div className=\"flex-1 min-w-0\">\n                <h3 className=\"text-xl font-bold text-foreground truncate\">{location.location_name}</h3>\n                {location.category && (\n                  <Badge variant=\"secondary\" className=\"mt-2 bg-secondary text-muted-foreground\">\n                    {location.category}\n                  </Badge>\n                )}\n              </div>\n            </div>\n\n            {/* Contact info */}\n            <div className=\"space-y-2 text-sm text-muted-foreground\">\n              {location.address && (\n                <div className=\"flex items-center gap-2\">\n                  <MapPin className=\"w-4 h-4 text-primary shrink-0\" />\n                  <span className=\"truncate\">{location.address}</span>\n                </div>\n              )}\n              {location.phone && (\n                <div className=\"flex items-center gap-2\">\n                  <Phone className=\"w-4 h-4 text-primary shrink-0\" />\n                  <span>{location.phone}</span>\n                </div>\n              )}\n              {location.website && (\n                <div className=\"flex items-center gap-2\">\n                  <Globe className=\"w-4 h-4 text-primary shrink-0\" />\n                  <a\n                    href={location.website}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"truncate hover:text-primary transition-colors\"\n                  >\n                    {location.website}\n                  </a>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Metrics grid */}\n          <div className=\"grid grid-cols-3 gap-3 mb-4\">\n            <div className=\"text-center p-3 rounded-lg bg-secondary border border-primary/20\">\n              <div className=\"text-2xl font-bold text-primary\">{location.rating.toFixed(1)}</div>\n              <div className=\"text-xs text-muted-foreground\">Rating</div>\n            </div>\n            <div className=\"text-center p-3 rounded-lg bg-secondary border border-primary/20\">\n              <div className=\"text-2xl font-bold text-primary\">{location.review_count}</div>\n              <div className=\"text-xs text-muted-foreground\">Reviews</div>\n            </div>\n            <div className=\"text-center p-3 rounded-lg bg-secondary border border-primary/20\">\n              <div className=\"text-2xl font-bold text-primary\">{location.response_rate.toFixed(0)}%</div>\n              <div className=\"text-xs text-muted-foreground\">Response</div>\n            </div>\n          </div>\n\n          {/* AI Insights */}\n          {location.ai_insights && (\n            <div className=\"p-3 rounded-lg bg-gradient-to-r from-primary/20 to-accent/20 border border-primary/30 mb-4\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Sparkles className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-sm font-medium text-primary\">AI Insights</span>\n              </div>\n              <p className=\"text-xs text-foreground/80 line-clamp-2\">{location.ai_insights}</p>\n            </div>\n          )}\n\n          {/* Action buttons */}\n          <div className=\"flex gap-2\">\n            <Button\n              asChild\n              size=\"sm\"\n              variant=\"ghost\"\n              className=\"flex-1 bg-secondary hover:bg-primary/20 border border-primary/30 text-foreground\"\n            >\n              <Link href={`/locations/${location.id}`}>\n                <Eye className=\"w-4 h-4 mr-2\" />\n                View\n              </Link>\n            </Button>\n            <Button\n              asChild\n              size=\"sm\"\n              variant=\"ghost\"\n              className=\"flex-1 bg-secondary hover:bg-primary/20 border border-primary/30 text-foreground\"\n            >\n              <Link href={`/reviews?location=${location.id}`}>\n                <MessageSquare className=\"w-4 h-4 mr-2\" />\n                Reviews\n              </Link>\n            </Button>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              className=\"flex-1 bg-secondary hover:bg-primary/20 border border-primary/30 text-foreground\"\n            >\n              <Zap className=\"w-4 h-4 mr-2\" />\n              AI\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </motion.div>\n  )\n}\n","size_bytes":6155},"app/(dashboard)/analytics/page.tsx":{"content":"\"use client\"\n\nimport { MetricsOverview } from \"@/components/analytics/metrics-overview\"\nimport { ReviewSentimentChart } from \"@/components/analytics/review-sentiment-chart\"\nimport { LocationPerformance } from \"@/components/analytics/location-performance\"\nimport { TrafficChart } from \"@/components/analytics/traffic-chart\"\nimport { ResponseTimeChart } from \"@/components/analytics/response-time-chart\"\nimport { Button } from \"@/components/ui/button\"\nimport { Download, Calendar } from \"lucide-react\"\n\nexport default function AnalyticsPage() {\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Analytics</h1>\n          <p className=\"text-muted-foreground mt-1\">Track your performance and insights</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" className=\"border-primary/30 text-foreground hover:bg-primary/20 bg-transparent\">\n            <Calendar className=\"h-4 w-4 mr-2\" />\n            Last 30 Days\n          </Button>\n          <Button className=\"bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export Report\n          </Button>\n        </div>\n      </div>\n\n      {/* Metrics Overview */}\n      <MetricsOverview />\n\n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        <ReviewSentimentChart />\n        <LocationPerformance />\n      </div>\n\n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        <TrafficChart />\n        <ResponseTimeChart />\n      </div>\n    </div>\n  )\n}\n","size_bytes":1724},"components/ui/tabs.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as TabsPrimitive from '@radix-ui/react-tabs'\n\nimport { cn } from '@/lib/utils'\n\nfunction Tabs({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      className={cn('flex flex-col gap-2', className)}\n      {...props}\n    />\n  )\n}\n\nfunction TabsList({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.List>) {\n  return (\n    <TabsPrimitive.List\n      data-slot=\"tabs-list\"\n      className={cn(\n        'bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {\n  return (\n    <TabsPrimitive.Trigger\n      data-slot=\"tabs-trigger\"\n      className={cn(\n        \"data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Content>) {\n  return (\n    <TabsPrimitive.Content\n      data-slot=\"tabs-content\"\n      className={cn('flex-1 outline-none', className)}\n      {...props}\n    />\n  )\n}\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1971},"app/(dashboard)/ai-studio/page.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { ContentGenerator } from \"@/components/ai-studio/content-generator\"\nimport { ContentHistory } from \"@/components/ai-studio/content-history\"\nimport { FileText, MessageSquare, AlignLeft, HelpCircle } from \"lucide-react\"\n\nconst contentTypes = [\n  { value: \"posts\", label: \"Posts\", icon: FileText },\n  { value: \"responses\", label: \"Responses\", icon: MessageSquare },\n  { value: \"descriptions\", label: \"Descriptions\", icon: AlignLeft },\n  { value: \"faqs\", label: \"FAQs\", icon: HelpCircle },\n]\n\nexport default function AIStudioPage() {\n  const [activeTab, setActiveTab] = useState(\"posts\")\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-3xl font-bold text-foreground\">AI Content Studio</h1>\n        <p className=\"text-muted-foreground mt-1\">Generate professional content with AI assistance</p>\n      </div>\n\n      {/* Content Type Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"bg-card border border-primary/30 p-1\">\n          {contentTypes.map((type) => {\n            const Icon = type.icon\n            return (\n              <TabsTrigger\n                key={type.value}\n                value={type.value}\n                className=\"data-[state=active]:bg-gradient-to-r data-[state=active]:from-primary data-[state=active]:to-accent data-[state=active]:text-white\"\n              >\n                <Icon className=\"w-4 h-4 mr-2\" />\n                {type.label}\n              </TabsTrigger>\n            )\n          })}\n        </TabsList>\n\n        {contentTypes.map((type) => (\n          <TabsContent key={type.value} value={type.value} className=\"space-y-6\">\n            <ContentGenerator contentType={type.value} />\n          </TabsContent>\n        ))}\n      </Tabs>\n\n      {/* Content History */}\n      <ContentHistory />\n    </div>\n  )\n}\n","size_bytes":2002},"components/ui/badge.tsx":{"content":"import * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\n\nconst badgeVariants = cva(\n  'inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden',\n  {\n    variants: {\n      variant: {\n        default:\n          'border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90',\n        secondary:\n          'border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90',\n        destructive:\n          'border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n)\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'span'> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : 'span'\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1632},"app/home/page.tsx":{"content":"import { redirect } from 'next/navigation'\nimport { createClient } from '@/lib/supabase/server'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport Link from 'next/link'\nimport { ArrowRight, Building2, BarChart3, MessageSquare, Sparkles } from 'lucide-react'\n\nexport default async function HomePage() {\n  const supabase = await createClient()\n  const { data: { session } } = await supabase.auth.getSession()\n\n  if (!session?.user) {\n    redirect('/auth/login')\n  }\n  \n  const user = session.user\n\n  // Get user profile\n  const { data: profile } = await supabase\n    .from('profiles')\n    .select('full_name, email')\n    .eq('user_id', user.id)\n    .single()\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-primary/5\">\n      {/* Header */}\n      <header className=\"border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"container mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center\">\n                <Building2 className=\"w-6 h-6 text-primary\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold\">GMB Platform</h1>\n                <p className=\"text-sm text-muted-foreground\">Welcome back, {profile?.full_name || user.email}</p>\n              </div>\n            </div>\n            <form action=\"/auth/signout\" method=\"post\">\n              <Button variant=\"ghost\" type=\"submit\">Sign Out</Button>\n            </form>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"container mx-auto px-6 py-12\">\n        <div className=\"max-w-4xl mx-auto space-y-8\">\n          {/* Welcome Section */}\n          <div className=\"text-center space-y-4\">\n            <h2 className=\"text-4xl font-bold tracking-tight\">\n              Manage Your Google My Business\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Connect your Google My Business account to start managing locations, reviews, and insights all in one place.\n            </p>\n          </div>\n\n          {/* CTA Card */}\n          <Card className=\"border-2 border-primary/20 bg-gradient-to-br from-primary/5 to-transparent\">\n            <CardHeader className=\"text-center pb-4\">\n              <CardTitle className=\"text-2xl\">Ready to Get Started?</CardTitle>\n              <CardDescription className=\"text-base\">\n                Access your dashboard to connect your Google My Business account\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"flex justify-center pb-8\">\n              <Link href=\"/accounts\">\n                <Button size=\"lg\" className=\"gap-2\">\n                  Go to Dashboard\n                  <ArrowRight className=\"w-5 h-5\" />\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n\n          {/* Features Grid */}\n          <div className=\"grid md:grid-cols-3 gap-6 pt-8\">\n            <Card>\n              <CardHeader>\n                <Building2 className=\"w-10 h-10 text-primary mb-2\" />\n                <CardTitle>Multi-Location</CardTitle>\n                <CardDescription>\n                  Manage all your business locations from one dashboard\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <MessageSquare className=\"w-10 h-10 text-primary mb-2\" />\n                <CardTitle>Review Management</CardTitle>\n                <CardDescription>\n                  Respond to customer reviews with AI-powered suggestions\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <BarChart3 className=\"w-10 h-10 text-primary mb-2\" />\n                <CardTitle>Analytics</CardTitle>\n                <CardDescription>\n                  Track performance with detailed insights and reports\n                </CardDescription>\n              </CardHeader>\n            </Card>\n          </div>\n        </div>\n      </main>\n    </div>\n  )\n}\n","size_bytes":4399},"components/reviews/review-card.tsx":{"content":"\"use client\"\n\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\"\nimport { Star, ThumbsUp, ThumbsDown, Minus, Sparkles } from \"lucide-react\"\nimport type { GMBReview } from \"@/lib/types/database\"\nimport { motion } from \"framer-motion\"\n\ninterface ReviewCardProps {\n  review: GMBReview\n  onGenerateResponse: (reviewId: string) => void\n  onReply: (reviewId: string) => void\n}\n\nexport function ReviewCard({ review, onGenerateResponse, onReply }: ReviewCardProps) {\n  const getSentimentIcon = (sentiment?: string) => {\n    switch (sentiment) {\n      case \"positive\":\n        return <ThumbsUp className=\"w-4 h-4\" />\n      case \"negative\":\n        return <ThumbsDown className=\"w-4 h-4\" />\n      default:\n        return <Minus className=\"w-4 h-4\" />\n    }\n  }\n\n  const getSentimentColor = (sentiment?: string) => {\n    switch (sentiment) {\n      case \"positive\":\n        return \"bg-green-500/20 text-green-500 border-green-500/30\"\n      case \"negative\":\n        return \"bg-red-500/20 text-red-500 border-red-500/30\"\n      default:\n        return \"bg-gray-500/20 text-gray-500 border-gray-500/30\"\n    }\n  }\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString)\n    return date.toLocaleDateString(\"en-US\", { month: \"short\", day: \"numeric\", year: \"numeric\" })\n  }\n\n  return (\n    <motion.div initial={{ opacity: 0, scale: 0.95 }} animate={{ opacity: 1, scale: 1 }} transition={{ duration: 0.2 }}>\n      <Card className=\"bg-card border-primary/30 hover:border-primary/50 transition-all duration-200\">\n        <CardContent className=\"p-4 space-y-4\">\n          {/* Header */}\n          <div className=\"flex items-start justify-between gap-3\">\n            <div className=\"flex items-start gap-3 flex-1 min-w-0\">\n              <Avatar className=\"h-10 w-10 border-2 border-primary/30\">\n                <AvatarFallback className=\"bg-primary/20 text-primary font-semibold\">\n                  {review.reviewer_name.charAt(0).toUpperCase()}\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"font-semibold text-foreground truncate\">{review.reviewer_name}</p>\n                <div className=\"flex items-center gap-2 mt-1\">\n                  <div className=\"flex\">\n                    {[...Array(5)].map((_, i) => (\n                      <Star\n                        key={i}\n                        className={`w-4 h-4 ${i < review.rating ? \"fill-primary text-primary\" : \"text-muted-foreground\"}`}\n                      />\n                    ))}\n                  </div>\n                  <span className=\"text-xs text-muted-foreground\">{formatDate(review.created_at)}</span>\n                </div>\n              </div>\n            </div>\n            {review.ai_sentiment && (\n              <Badge className={`${getSentimentColor(review.ai_sentiment)} flex items-center gap-1`}>\n                {getSentimentIcon(review.ai_sentiment)}\n                <span className=\"capitalize\">{review.ai_sentiment}</span>\n              </Badge>\n            )}\n          </div>\n\n          {/* Review Comment */}\n          {review.comment && <p className=\"text-sm text-foreground leading-relaxed\">{review.comment}</p>}\n\n          {/* AI Suggested Reply */}\n          {review.ai_suggested_reply && !review.review_reply && (\n            <div className=\"p-3 rounded-lg bg-gradient-to-r from-primary/20 to-accent/20 border border-primary/30\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Sparkles className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-xs font-medium text-primary\">AI Suggested Response</span>\n              </div>\n              <p className=\"text-xs text-foreground/80\">{review.ai_suggested_reply}</p>\n            </div>\n          )}\n\n          {/* Existing Reply */}\n          {review.review_reply && (\n            <div className=\"p-3 rounded-lg bg-secondary border border-primary/20\">\n              <p className=\"text-xs font-medium text-muted-foreground mb-1\">Your Response</p>\n              <p className=\"text-sm text-foreground\">{review.review_reply}</p>\n              {review.replied_at && (\n                <p className=\"text-xs text-muted-foreground mt-2\">Replied on {formatDate(review.replied_at)}</p>\n              )}\n            </div>\n          )}\n\n          {/* Actions */}\n          <div className=\"flex gap-2\">\n            {!review.review_reply && (\n              <>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={() => onGenerateResponse(review.id)}\n                  className=\"flex-1 border-primary/30 text-foreground hover:bg-primary/20\"\n                >\n                  <Sparkles className=\"w-4 h-4 mr-2\" />\n                  Generate AI Response\n                </Button>\n                <Button\n                  size=\"sm\"\n                  onClick={() => onReply(review.id)}\n                  className=\"flex-1 bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white\"\n                >\n                  Reply\n                </Button>\n              </>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </motion.div>\n  )\n}\n","size_bytes":5385},"app/(dashboard)/locations/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { LocationCard } from \"@/components/locations/location-card\"\nimport { LocationFilters } from \"@/components/locations/location-filters\"\nimport { AddLocationDialog } from \"@/components/locations/add-location-dialog\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport type { GMBLocation } from \"@/lib/types/database\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport { MapPin } from \"lucide-react\"\n\nexport default function LocationsPage() {\n  const [locations, setLocations] = useState<GMBLocation[]>([])\n  const [loading, setLoading] = useState(true)\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\")\n  const [searchQuery, setSearchQuery] = useState(\"\")\n  const [filterRating, setFilterRating] = useState(\"all\")\n  const [filterStatus, setFilterStatus] = useState(\"all\")\n  const supabase = createClient()\n\n  useEffect(() => {\n    const fetchLocations = async () => {\n      try {\n        const {\n          data: { user },\n        } = await supabase.auth.getUser()\n        if (!user) return\n\n        const { data, error } = await supabase\n          .from(\"gmb_locations\")\n          .select(\"*\")\n          .eq(\"user_id\", user.id)\n          .order(\"created_at\", { ascending: false })\n\n        if (error) {\n          console.error('[Locations Page] Error fetching locations:', error)\n          return\n        }\n\n        if (data) {\n          setLocations(data)\n        }\n      } catch (error) {\n        console.error('[Locations Page] Unexpected error:', error)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchLocations()\n\n    // Subscribe to real-time updates\n    const channel = supabase\n      .channel(\"gmb_locations\")\n      .on(\n        \"postgres_changes\",\n        {\n          event: \"*\",\n          schema: \"public\",\n          table: \"gmb_locations\",\n        },\n        () => {\n          fetchLocations()\n        },\n      )\n      .subscribe()\n\n    return () => {\n      supabase.removeChannel(channel)\n    }\n  }, [supabase])\n\n  // Filter locations\n  const filteredLocations = locations.filter((location) => {\n    // Search filter\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase()\n      const matchesSearch =\n        location.location_name.toLowerCase().includes(query) ||\n        location.address?.toLowerCase().includes(query) ||\n        location.category?.toLowerCase().includes(query)\n      if (!matchesSearch) return false\n    }\n\n    // Rating filter\n    if (filterRating !== \"all\") {\n      const minRating = Number.parseInt(filterRating)\n      if (location.rating < minRating) return false\n    }\n\n    // Status filter\n    if (filterStatus !== \"all\") {\n      if (filterStatus === \"active\" && !location.is_active) return false\n      if (filterStatus === \"inactive\" && location.is_active) return false\n      if (filterStatus === \"syncing\" && !location.is_syncing) return false\n    }\n\n    return true\n  })\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Locations</h1>\n          <p className=\"text-muted-foreground mt-1\">Manage your Google My Business locations</p>\n        </div>\n        <AddLocationDialog />\n      </div>\n\n      {/* Filters */}\n      <LocationFilters\n        viewMode={viewMode}\n        onViewModeChange={setViewMode}\n        searchQuery={searchQuery}\n        onSearchChange={setSearchQuery}\n        filterRating={filterRating}\n        onFilterRatingChange={setFilterRating}\n        filterStatus={filterStatus}\n        onFilterStatusChange={setFilterStatus}\n      />\n\n      {/* Locations Grid/List */}\n      {loading ? (\n        <div className={viewMode === \"grid\" ? \"grid gap-6 md:grid-cols-2 lg:grid-cols-3\" : \"space-y-4\"}>\n          {[...Array(6)].map((_, i) => (\n            <Skeleton key={i} className=\"h-[400px] rounded-2xl\" />\n          ))}\n        </div>\n      ) : filteredLocations.length === 0 ? (\n        <div className=\"flex flex-col items-center justify-center py-16 text-center\">\n          <div className=\"w-16 h-16 rounded-full bg-primary/20 flex items-center justify-center mb-4\">\n            <MapPin className=\"w-8 h-8 text-primary\" />\n          </div>\n          <h3 className=\"text-xl font-semibold text-foreground mb-2\">No locations found</h3>\n          <p className=\"text-muted-foreground mb-6 max-w-md\">\n            {searchQuery || filterRating !== \"all\" || filterStatus !== \"all\"\n              ? \"Try adjusting your filters to see more results\"\n              : \"Get started by adding your first Google My Business location\"}\n          </p>\n          {!searchQuery && filterRating === \"all\" && filterStatus === \"all\" && <AddLocationDialog />}\n        </div>\n      ) : (\n        <div className={viewMode === \"grid\" ? \"grid gap-6 md:grid-cols-2 lg:grid-cols-3\" : \"space-y-4\"}>\n          {filteredLocations.map((location, index) => (\n            <LocationCard key={location.id} location={location} index={index} />\n          ))}\n        </div>\n      )}\n\n      {/* Results count */}\n      {!loading && filteredLocations.length > 0 && (\n        <div className=\"text-center text-sm text-muted-foreground\">\n          Showing {filteredLocations.length} of {locations.length} location{locations.length !== 1 ? \"s\" : \"\"}\n        </div>\n      )}\n    </div>\n  )\n}\n","size_bytes":5420},"app/auth/signout/route.ts":{"content":"import { createClient } from '@/lib/supabase/server'\nimport { NextResponse } from 'next/server'\n\nexport async function POST(request: Request) {\n  const supabase = await createClient()\n  await supabase.auth.signOut()\n\n  const baseUrl =\n    process.env.NEXT_PUBLIC_SITE_URL || 'https://nnh.ae'\n\n  return NextResponse.redirect(`${baseUrl}/auth/login`, { status: 302 })\n}","size_bytes":367},"components/analytics/metrics-overview.tsx":{"content":"\"use client\"\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { TrendingUp, TrendingDown, Minus } from \"lucide-react\"\nimport { useEffect, useState } from \"react\"\nimport { createClient } from \"@/lib/supabase/client\"\n\ninterface MetricCardProps {\n  title: string\n  value: string\n  change: number\n  period: string\n  isLoading?: boolean\n}\n\nexport function MetricCard({ title, value, change, period, isLoading }: MetricCardProps) {\n  const isPositive = change > 0\n  const isNeutral = change === 0\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-card border-primary/30\">\n        <CardHeader className=\"pb-2\">\n          <CardTitle className=\"text-sm font-medium text-muted-foreground\">{title}</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-12 bg-secondary animate-pulse rounded\" />\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card className=\"bg-card border-primary/30\">\n      <CardHeader className=\"pb-2\">\n        <CardTitle className=\"text-sm font-medium text-muted-foreground\">{title}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"flex items-baseline justify-between\">\n          <p className=\"text-3xl font-bold text-foreground\">{value}</p>\n          <div\n            className={`flex items-center gap-1 text-sm font-medium ${\n              isNeutral ? \"text-muted-foreground\" : isPositive ? \"text-green-500\" : \"text-red-500\"\n            }`}\n          >\n            {isNeutral ? (\n              <Minus className=\"w-4 h-4\" />\n            ) : isPositive ? (\n              <TrendingUp className=\"w-4 h-4\" />\n            ) : (\n              <TrendingDown className=\"w-4 h-4\" />\n            )}\n            <span>{Math.abs(change)}%</span>\n          </div>\n        </div>\n        <p className=\"text-xs text-muted-foreground mt-2\">vs {period}</p>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport function MetricsOverview() {\n  const [metrics, setMetrics] = useState({\n    totalViews: 0,\n    totalReviews: 0,\n    avgRating: 0,\n    responseRate: 0,\n  })\n  const [isLoading, setIsLoading] = useState(true)\n  const supabase = createClient()\n\n  useEffect(() => {\n    async function fetchMetrics() {\n      try {\n        const { data: locations } = await supabase.from(\"gmb_locations\").select(\"*\")\n        const { data: reviews } = await supabase.from(\"gmb_reviews\").select(\"*\")\n\n        const totalViews = locations?.reduce((sum, loc) => sum + (loc.total_views || 0), 0) || 0\n        const totalReviews = reviews?.length || 0\n        const avgRating =\n          locations?.reduce((sum, loc) => sum + (loc.average_rating || 0), 0) / (locations?.length || 1) || 0\n        const repliedReviews = reviews?.filter((r) => r.reply_text).length || 0\n        const responseRate = totalReviews > 0 ? (repliedReviews / totalReviews) * 100 : 0\n\n        setMetrics({\n          totalViews,\n          totalReviews,\n          avgRating: Math.round(avgRating * 10) / 10,\n          responseRate: Math.round(responseRate),\n        })\n      } catch (error) {\n        console.error(\"Error fetching metrics:\", error)\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    fetchMetrics()\n\n    const channel = supabase\n      .channel(\"analytics-metrics\")\n      .on(\"postgres_changes\", { event: \"*\", schema: \"public\", table: \"gmb_locations\" }, fetchMetrics)\n      .on(\"postgres_changes\", { event: \"*\", schema: \"public\", table: \"gmb_reviews\" }, fetchMetrics)\n      .subscribe()\n\n    return () => {\n      supabase.removeChannel(channel)\n    }\n  }, [supabase])\n\n  return (\n    <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n      <MetricCard\n        title=\"Total Views\"\n        value={metrics.totalViews.toLocaleString()}\n        change={12.5}\n        period=\"last month\"\n        isLoading={isLoading}\n      />\n      <MetricCard\n        title=\"Total Reviews\"\n        value={metrics.totalReviews.toLocaleString()}\n        change={8.3}\n        period=\"last month\"\n        isLoading={isLoading}\n      />\n      <MetricCard\n        title=\"Avg. Rating\"\n        value={metrics.avgRating.toFixed(1)}\n        change={2.2}\n        period=\"last month\"\n        isLoading={isLoading}\n      />\n      <MetricCard\n        title=\"Response Rate\"\n        value={`${metrics.responseRate}%`}\n        change={-1.5}\n        period=\"last month\"\n        isLoading={isLoading}\n      />\n    </div>\n  )\n}\n","size_bytes":4387},"lib/supabase/server.ts":{"content":"import { createServerClient } from \"@supabase/ssr\"\nimport { createClient as createSupabaseClient } from \"@supabase/supabase-js\"\nimport { cookies } from \"next/headers\"\n\nexport async function createClient() {\n  const cookieStore = await cookies()\n\n  return createServerClient(process.env.NEXT_PUBLIC_SUPABASE_URL!, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!, {\n    cookies: {\n      getAll() {\n        return cookieStore.getAll()\n      },\n      setAll(cookiesToSet) {\n        try {\n          cookiesToSet.forEach(({ name, value, options }) => cookieStore.set(name, value, options))\n        } catch {\n          // The \"setAll\" method was called from a Server Component.\n          // This can be ignored if you have middleware refreshing\n          // user sessions.\n        }\n      },\n    },\n  })\n}\n\nexport function createAdminClient() {\n  return createSupabaseClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.SUPABASE_SERVICE_ROLE_KEY!,\n    {\n      auth: {\n        autoRefreshToken: false,\n        persistSession: false\n      }\n    }\n  )\n}\n","size_bytes":1054},"components/analytics/traffic-chart.tsx":{"content":"\"use client\"\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Line, LineChart, ResponsiveContainer, XAxis, YAxis, Tooltip, CartesianGrid } from \"recharts\"\nimport { useEffect, useState } from \"react\"\nimport { createClient } from \"@/lib/supabase/client\"\n\nexport function TrafficChart() {\n  const [data, setData] = useState<any[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const supabase = createClient()\n\n  useEffect(() => {\n    async function fetchTrafficData() {\n      try {\n        const { data: reviews } = await supabase\n          .from(\"gmb_reviews\")\n          .select(\"created_at\")\n          .gte(\"created_at\", new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString())\n          .order(\"created_at\", { ascending: true })\n\n        if (reviews && reviews.length > 0) {\n          const dailyCounts: Record<string, number> = {}\n          \n          const last7Days = Array.from({ length: 7 }, (_, i) => {\n            const date = new Date()\n            date.setDate(date.getDate() - (6 - i))\n            const dayKey = date.toLocaleDateString(\"en-US\", { weekday: \"short\" })\n            dailyCounts[dayKey] = 0\n            return { day: dayKey, dateObj: date }\n          })\n\n          reviews.forEach(review => {\n            const reviewDate = new Date(review.created_at)\n            const dayKey = reviewDate.toLocaleDateString(\"en-US\", { weekday: \"short\" })\n            if (dailyCounts[dayKey] !== undefined) {\n              dailyCounts[dayKey]++\n            }\n          })\n\n          const chartData = last7Days.map(({ day }) => ({\n            day,\n            views: dailyCounts[day] || 0\n          }))\n\n          setData(chartData)\n        } else {\n          const emptyData = Array.from({ length: 7 }, (_, i) => {\n            const date = new Date()\n            date.setDate(date.getDate() - (6 - i))\n            return {\n              day: date.toLocaleDateString(\"en-US\", { weekday: \"short\" }),\n              views: 0\n            }\n          })\n          setData(emptyData)\n        }\n      } catch (error) {\n        console.error(\"Error fetching traffic data:\", error)\n        const emptyData = Array.from({ length: 7 }, (_, i) => {\n          const date = new Date()\n          date.setDate(date.getDate() - (6 - i))\n          return {\n            day: date.toLocaleDateString(\"en-US\", { weekday: \"short\" }),\n            views: 0\n          }\n        })\n        setData(emptyData)\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    fetchTrafficData()\n  }, [supabase])\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-card border-primary/30\">\n        <CardHeader>\n          <CardTitle className=\"text-foreground\">Traffic Trends</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-[300px] bg-secondary animate-pulse rounded\" />\n        </CardContent>\n      </Card>\n    )\n  }\n\n  const hasData = data.some(d => d.views > 0)\n\n  return (\n    <Card className=\"bg-card border-primary/30\">\n      <CardHeader>\n        <CardTitle className=\"text-foreground\">Engagement Trends (Last 7 Days)</CardTitle>\n      </CardHeader>\n      <CardContent>\n        {hasData ? (\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <LineChart data={data}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"rgba(255, 107, 53, 0.1)\" />\n              <XAxis dataKey=\"day\" stroke=\"#999999\" style={{ fontSize: \"12px\" }} />\n              <YAxis stroke=\"#999999\" style={{ fontSize: \"12px\" }} />\n              <Tooltip\n                contentStyle={{\n                  backgroundColor: \"#0a0a0a\",\n                  border: \"1px solid rgba(255, 107, 53, 0.3)\",\n                  borderRadius: \"8px\",\n                  color: \"#ffffff\",\n                }}\n                labelFormatter={(label) => `${label}`}\n                formatter={(value: number) => [`${value} reviews`, \"Activity\"]}\n              />\n              <Line type=\"monotone\" dataKey=\"views\" stroke=\"#FF6B35\" strokeWidth={2} dot={{ fill: \"#FF6B35\", r: 4 }} />\n            </LineChart>\n          </ResponsiveContainer>\n        ) : (\n          <div className=\"h-[300px] flex flex-col items-center justify-center text-center p-6\">\n            <div className=\"text-muted-foreground mb-2\">\n              <svg className=\"w-16 h-16 mx-auto mb-4 opacity-50\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1.5} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n              </svg>\n              <p className=\"text-lg font-medium\">No recent activity</p>\n              <p className=\"text-sm mt-2 max-w-md\">\n                Connect your GMB accounts and sync locations to see engagement trends based on customer reviews.\n              </p>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  )\n}\n","size_bytes":5036},"components/layout/sidebar.tsx":{"content":"\"use client\"\n\nimport Link from \"next/link\"\nimport { usePathname } from \"next/navigation\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { LayoutDashboard, MapPin, MessageSquare, Sparkles, BarChart3, Settings, LogOut } from \"lucide-react\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport { useRouter } from \"next/navigation\"\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/dashboard\", icon: LayoutDashboard },\n  { name: \"Locations\", href: \"/locations\", icon: MapPin },\n  { name: \"Reviews\", href: \"/reviews\", icon: MessageSquare },\n  { name: \"AI Studio\", href: \"/ai-studio\", icon: Sparkles },\n  { name: \"Analytics\", href: \"/analytics\", icon: BarChart3 },\n  { name: \"Settings\", href: \"/settings\", icon: Settings },\n]\n\nexport function Sidebar() {\n  const pathname = usePathname()\n  const router = useRouter()\n  const supabase = createClient()\n\n  const handleSignOut = async () => {\n    await supabase.auth.signOut()\n    router.push(\"/auth/login\")\n  }\n\n  return (\n    <div className=\"flex h-full w-64 flex-col bg-card border-r border-primary/30\">\n      {/* Logo */}\n      <div className=\"flex h-16 items-center border-b border-primary/30 px-6\">\n        <h1 className=\"text-xl font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n          GMB Manager\n        </h1>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 space-y-1 px-3 py-4\">\n        {navigation.map((item) => {\n          const isActive = pathname === item.href\n          return (\n            <Link\n              key={item.name}\n              href={item.href}\n              className={cn(\n                \"flex items-center gap-3 rounded-lg px-3 py-2 text-sm font-medium transition-all duration-200\",\n                isActive\n                  ? \"bg-primary/20 text-primary border border-primary/30\"\n                  : \"text-muted-foreground hover:bg-secondary hover:text-foreground\",\n              )}\n            >\n              <item.icon className=\"h-5 w-5\" />\n              {item.name}\n            </Link>\n          )\n        })}\n      </nav>\n\n      {/* Sign Out */}\n      <div className=\"border-t border-primary/30 p-4\">\n        <Button\n          onClick={handleSignOut}\n          variant=\"ghost\"\n          className=\"w-full justify-start text-muted-foreground hover:text-foreground hover:bg-secondary\"\n        >\n          <LogOut className=\"mr-3 h-5 w-5\" />\n          Sign Out\n        </Button>\n      </div>\n    </div>\n  )\n}\n","size_bytes":2492},"app/layout.tsx":{"content":"import type React from \"react\"\nimport type { Metadata } from \"next\"\nimport { Inter } from \"next/font/google\"\nimport \"./globals.css\"\n\nconst inter = Inter({ subsets: [\"latin\"] })\n\nexport const metadata: Metadata = {\n  title: \"GMB Manager - Google My Business Management Platform\",\n  description: \"Manage your Google My Business locations, reviews, and content with AI-powered tools\",\n}\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode\n}>) {\n  return (\n    <html lang=\"en\" className=\"dark\">\n      <body className={inter.className}>\n        {children}\n      </body>\n    </html>\n  )\n}\n","size_bytes":623},"components/locations/add-location-dialog.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Plus, Loader2 } from \"lucide-react\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport { useRouter } from \"next/navigation\"\n\nexport function AddLocationDialog() {\n  const [open, setOpen] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [formData, setFormData] = useState({\n    location_name: \"\",\n    address: \"\",\n    phone: \"\",\n    website: \"\",\n    category: \"\",\n  })\n  const router = useRouter()\n  const supabase = createClient()\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n\n    try {\n      const {\n        data: { user },\n      } = await supabase.auth.getUser()\n      if (!user) throw new Error(\"Not authenticated\")\n\n      const { error } = await supabase.from(\"gmb_locations\").insert({\n        user_id: user.id,\n        location_id: `loc_${Date.now()}`,\n        ...formData,\n        rating: 0,\n        review_count: 0,\n        response_rate: 0,\n        is_active: true,\n        is_syncing: false,\n      })\n\n      if (error) throw error\n\n      // Log activity\n      await supabase.from(\"activity_logs\").insert({\n        user_id: user.id,\n        activity_type: \"location\",\n        activity_message: `Added new location: ${formData.location_name}`,\n        actionable: false,\n      })\n\n      setOpen(false)\n      setFormData({\n        location_name: \"\",\n        address: \"\",\n        phone: \"\",\n        website: \"\",\n        category: \"\",\n      })\n      router.refresh()\n    } catch (error) {\n      console.error(\"Error adding location:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button className=\"bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Location\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"bg-card border-primary/30 text-foreground sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle className=\"text-foreground\">Add New Location</DialogTitle>\n          <DialogDescription className=\"text-muted-foreground\">\n            Add a new Google My Business location to manage\n          </DialogDescription>\n        </DialogHeader>\n        <form onSubmit={handleSubmit}>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"location_name\" className=\"text-foreground\">\n                Location Name *\n              </Label>\n              <Input\n                id=\"location_name\"\n                required\n                value={formData.location_name}\n                onChange={(e) => setFormData({ ...formData, location_name: e.target.value })}\n                className=\"bg-secondary border-primary/30 text-foreground\"\n                placeholder=\"My Business Location\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"address\" className=\"text-foreground\">\n                Address\n              </Label>\n              <Textarea\n                id=\"address\"\n                value={formData.address}\n                onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n                className=\"bg-secondary border-primary/30 text-foreground resize-none\"\n                placeholder=\"123 Main St, City, State 12345\"\n                rows={2}\n              />\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\" className=\"text-foreground\">\n                  Phone\n                </Label>\n                <Input\n                  id=\"phone\"\n                  type=\"tel\"\n                  value={formData.phone}\n                  onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                  className=\"bg-secondary border-primary/30 text-foreground\"\n                  placeholder=\"(555) 123-4567\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"category\" className=\"text-foreground\">\n                  Category\n                </Label>\n                <Input\n                  id=\"category\"\n                  value={formData.category}\n                  onChange={(e) => setFormData({ ...formData, category: e.target.value })}\n                  className=\"bg-secondary border-primary/30 text-foreground\"\n                  placeholder=\"Restaurant\"\n                />\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"website\" className=\"text-foreground\">\n                Website\n              </Label>\n              <Input\n                id=\"website\"\n                type=\"url\"\n                value={formData.website}\n                onChange={(e) => setFormData({ ...formData, website: e.target.value })}\n                className=\"bg-secondary border-primary/30 text-foreground\"\n                placeholder=\"https://example.com\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => setOpen(false)}\n              className=\"border-primary/30 text-muted-foreground\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={loading}\n              className=\"bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white\"\n            >\n              {loading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Adding...\n                </>\n              ) : (\n                \"Add Location\"\n              )}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  )\n}\n","size_bytes":6377},"app/contact/page.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport Link from \"next/link\"\nimport { ArrowLeft, Mail, MessageSquare, Phone } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { useState } from \"react\"\n\nexport default function ContactPage() {\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsSubmitting(true)\n    // Simulate form submission\n    await new Promise((resolve) => setTimeout(resolve, 1000))\n    setIsSubmitting(false)\n    alert(\"Thank you for your message! We'll get back to you soon.\")\n  }\n\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      <div className=\"container mx-auto px-4 py-12 max-w-6xl\">\n        <Link\n          href=\"/\"\n          className=\"inline-flex items-center gap-2 text-gray-400 hover:text-orange-500 transition-colors mb-8\"\n        >\n          <ArrowLeft className=\"w-4 h-4\" />\n          Back to Home\n        </Link>\n\n        <h1 className=\"text-4xl font-bold mb-4 text-balance\">Contact Us</h1>\n        <p className=\"text-gray-400 mb-12\">Have questions? We'd love to hear from you.</p>\n\n        <div className=\"grid md:grid-cols-2 gap-12\">\n          <div>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div>\n                <label htmlFor=\"name\" className=\"block text-sm font-medium mb-2\">\n                  Name\n                </label>\n                <Input id=\"name\" required className=\"bg-[#0A0A0A] border-orange-500/20\" />\n              </div>\n              <div>\n                <label htmlFor=\"email\" className=\"block text-sm font-medium mb-2\">\n                  Email\n                </label>\n                <Input id=\"email\" type=\"email\" required className=\"bg-[#0A0A0A] border-orange-500/20\" />\n              </div>\n              <div>\n                <label htmlFor=\"subject\" className=\"block text-sm font-medium mb-2\">\n                  Subject\n                </label>\n                <Input id=\"subject\" required className=\"bg-[#0A0A0A] border-orange-500/20\" />\n              </div>\n              <div>\n                <label htmlFor=\"message\" className=\"block text-sm font-medium mb-2\">\n                  Message\n                </label>\n                <Textarea id=\"message\" required rows={6} className=\"bg-[#0A0A0A] border-orange-500/20\" />\n              </div>\n              <Button\n                type=\"submit\"\n                disabled={isSubmitting}\n                className=\"w-full bg-orange-500 hover:bg-orange-600 text-white\"\n              >\n                {isSubmitting ? \"Sending...\" : \"Send Message\"}\n              </Button>\n            </form>\n          </div>\n\n          <div className=\"space-y-8\">\n            <div>\n              <h2 className=\"text-2xl font-semibold mb-6\">Get in Touch</h2>\n              <div className=\"space-y-6\">\n                <div className=\"flex items-start gap-4\">\n                  <div className=\"bg-orange-500/10 p-3 rounded-lg\">\n                    <Mail className=\"w-6 h-6 text-orange-500\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold mb-1\">Email</h3>\n                    <a href=\"mailto:support@gmbplatform.com\" className=\"text-gray-400 hover:text-orange-500\">\n                      support@gmbplatform.com\n                    </a>\n                  </div>\n                </div>\n                <div className=\"flex items-start gap-4\">\n                  <div className=\"bg-orange-500/10 p-3 rounded-lg\">\n                    <Phone className=\"w-6 h-6 text-orange-500\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold mb-1\">Phone</h3>\n                    <a href=\"tel:+1234567890\" className=\"text-gray-400 hover:text-orange-500\">\n                      +1 (234) 567-890\n                    </a>\n                  </div>\n                </div>\n                <div className=\"flex items-start gap-4\">\n                  <div className=\"bg-orange-500/10 p-3 rounded-lg\">\n                    <MessageSquare className=\"w-6 h-6 text-orange-500\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold mb-1\">Live Chat</h3>\n                    <p className=\"text-gray-400\">Available Mon-Fri, 9am-5pm EST</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-[#0A0A0A] border border-orange-500/20 rounded-lg p-6\">\n              <h3 className=\"font-semibold mb-2\">Office Hours</h3>\n              <p className=\"text-gray-400 text-sm mb-4\">Monday - Friday: 9:00 AM - 6:00 PM EST</p>\n              <p className=\"text-gray-400 text-sm\">Saturday - Sunday: Closed</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":4926},"app/auth/signup-success/page.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport Link from \"next/link\"\nimport { CheckCircle2, Mail } from \"lucide-react\"\n\nexport default function SignUpSuccessPage() {\n  return (\n    <div className=\"flex min-h-screen w-full items-center justify-center bg-black p-6\">\n      <div className=\"w-full max-w-md\">\n        <Card className=\"bg-card border-primary/30 shadow-2xl shadow-primary/10\">\n          <CardHeader className=\"space-y-4 text-center\">\n            <div className=\"mx-auto w-16 h-16 rounded-full bg-primary/20 flex items-center justify-center\">\n              <CheckCircle2 className=\"w-8 h-8 text-primary\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold text-foreground\">Check Your Email</CardTitle>\n            <CardDescription className=\"text-muted-foreground\">\n              We&apos;ve sent you a confirmation email\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"p-4 rounded-lg bg-secondary border border-primary/20\">\n              <div className=\"flex items-start gap-3\">\n                <Mail className=\"w-5 h-5 text-primary mt-0.5\" />\n                <div className=\"space-y-1\">\n                  <p className=\"text-sm text-foreground font-medium\">Verify your email address</p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Click the link in the email we sent you to activate your account and start managing your GMB\n                    locations.\n                  </p>\n                </div>\n              </div>\n            </div>\n            <Button\n              asChild\n              className=\"w-full bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white\"\n            >\n              <Link href=\"/auth/login\">Back to Login</Link>\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n","size_bytes":2033},"styles/globals.css":{"content":"@import 'tailwindcss';\n@import 'tw-animate-css';\n\n@custom-variant dark (&:is(.dark *));\n\n:root {\n  --background: oklch(1 0 0);\n  --foreground: oklch(0.145 0 0);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.145 0 0);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.145 0 0);\n  --primary: oklch(0.205 0 0);\n  --primary-foreground: oklch(0.985 0 0);\n  --secondary: oklch(0.97 0 0);\n  --secondary-foreground: oklch(0.205 0 0);\n  --muted: oklch(0.97 0 0);\n  --muted-foreground: oklch(0.556 0 0);\n  --accent: oklch(0.97 0 0);\n  --accent-foreground: oklch(0.205 0 0);\n  --destructive: oklch(0.577 0.245 27.325);\n  --destructive-foreground: oklch(0.577 0.245 27.325);\n  --border: oklch(0.922 0 0);\n  --input: oklch(0.922 0 0);\n  --ring: oklch(0.708 0 0);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --radius: 0.625rem;\n  --sidebar: oklch(0.985 0 0);\n  --sidebar-foreground: oklch(0.145 0 0);\n  --sidebar-primary: oklch(0.205 0 0);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.97 0 0);\n  --sidebar-accent-foreground: oklch(0.205 0 0);\n  --sidebar-border: oklch(0.922 0 0);\n  --sidebar-ring: oklch(0.708 0 0);\n}\n\n.dark {\n  --background: oklch(0.145 0 0);\n  --foreground: oklch(0.985 0 0);\n  --card: oklch(0.145 0 0);\n  --card-foreground: oklch(0.985 0 0);\n  --popover: oklch(0.145 0 0);\n  --popover-foreground: oklch(0.985 0 0);\n  --primary: oklch(0.985 0 0);\n  --primary-foreground: oklch(0.205 0 0);\n  --secondary: oklch(0.269 0 0);\n  --secondary-foreground: oklch(0.985 0 0);\n  --muted: oklch(0.269 0 0);\n  --muted-foreground: oklch(0.708 0 0);\n  --accent: oklch(0.269 0 0);\n  --accent-foreground: oklch(0.985 0 0);\n  --destructive: oklch(0.396 0.141 25.723);\n  --destructive-foreground: oklch(0.637 0.237 25.331);\n  --border: oklch(0.269 0 0);\n  --input: oklch(0.269 0 0);\n  --ring: oklch(0.439 0 0);\n  --chart-1: oklch(0.488 0.243 264.376);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.205 0 0);\n  --sidebar-foreground: oklch(0.985 0 0);\n  --sidebar-primary: oklch(0.488 0.243 264.376);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.269 0 0);\n  --sidebar-accent-foreground: oklch(0.985 0 0);\n  --sidebar-border: oklch(0.269 0 0);\n  --sidebar-ring: oklch(0.439 0 0);\n}\n\n@theme inline {\n  --font-sans: 'Geist', 'Geist Fallback';\n  --font-mono: 'Geist Mono', 'Geist Mono Fallback';\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --color-card: var(--card);\n  --color-card-foreground: var(--card-foreground);\n  --color-popover: var(--popover);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-primary: var(--primary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-secondary: var(--secondary);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-muted: var(--muted);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-accent: var(--accent);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-destructive: var(--destructive);\n  --color-destructive-foreground: var(--destructive-foreground);\n  --color-border: var(--border);\n  --color-input: var(--input);\n  --color-ring: var(--ring);\n  --color-chart-1: var(--chart-1);\n  --color-chart-2: var(--chart-2);\n  --color-chart-3: var(--chart-3);\n  --color-chart-4: var(--chart-4);\n  --color-chart-5: var(--chart-5);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n  --color-sidebar: var(--sidebar);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-ring: var(--sidebar-ring);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n","size_bytes":4353},"components/reviews/reply-dialog.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Loader2, Sparkles } from \"lucide-react\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport { useRouter } from \"next/navigation\"\nimport type { GMBReview } from \"@/lib/types/database\"\n\ninterface ReplyDialogProps {\n  review: GMBReview | null\n  open: boolean\n  onOpenChange: (open: boolean) => void\n}\n\nexport function ReplyDialog({ review, open, onOpenChange }: ReplyDialogProps) {\n  const [reply, setReply] = useState(\"\")\n  const [loading, setLoading] = useState(false)\n  const [generating, setGenerating] = useState(false)\n  const router = useRouter()\n  const supabase = createClient()\n\n  const handleGenerateAI = async () => {\n    if (!review) return\n    setGenerating(true)\n\n    try {\n      // Simulate AI generation (in production, this would call an AI API)\n      await new Promise((resolve) => setTimeout(resolve, 1500))\n\n      const aiResponse = `Thank you for your ${review.rating}-star review, ${review.reviewer_name}! ${\n        review.rating >= 4\n          ? \"We're thrilled to hear you had a great experience with us. Your feedback means a lot to our team!\"\n          : \"We appreciate your feedback and apologize for any inconvenience. We'd love to make things right - please reach out to us directly so we can address your concerns.\"\n      }`\n\n      setReply(aiResponse)\n\n      // Save AI suggestion to database\n      await supabase.from(\"gmb_reviews\").update({ ai_suggested_reply: aiResponse }).eq(\"id\", review.id)\n    } catch (error) {\n      console.error(\"Error generating AI response:\", error)\n    } finally {\n      setGenerating(false)\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    if (!review) return\n    setLoading(true)\n\n    try {\n      const {\n        data: { user },\n      } = await supabase.auth.getUser()\n      if (!user) throw new Error(\"Not authenticated\")\n\n      const { error } = await supabase\n        .from(\"gmb_reviews\")\n        .update({\n          review_reply: reply,\n          replied_at: new Date().toISOString(),\n          status: \"responded\",\n        })\n        .eq(\"id\", review.id)\n\n      if (error) throw error\n\n      // Log activity\n      await supabase.from(\"activity_logs\").insert({\n        user_id: user.id,\n        activity_type: \"review\",\n        activity_message: `Replied to review from ${review.reviewer_name}`,\n        actionable: false,\n      })\n\n      onOpenChange(false)\n      setReply(\"\")\n      router.refresh()\n    } catch (error) {\n      console.error(\"Error submitting reply:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"bg-card border-primary/30 text-foreground sm:max-w-[600px]\">\n        <DialogHeader>\n          <DialogTitle className=\"text-foreground\">Reply to Review</DialogTitle>\n          <DialogDescription className=\"text-muted-foreground\">\n            {review && `Responding to ${review.reviewer_name}'s ${review.rating}-star review`}\n          </DialogDescription>\n        </DialogHeader>\n        <form onSubmit={handleSubmit}>\n          <div className=\"space-y-4 py-4\">\n            {review?.comment && (\n              <div className=\"p-3 rounded-lg bg-secondary border border-primary/20\">\n                <p className=\"text-sm text-foreground\">{review.comment}</p>\n              </div>\n            )}\n            <div className=\"space-y-2\">\n              <Textarea\n                value={reply}\n                onChange={(e) => setReply(e.target.value)}\n                placeholder=\"Write your response...\"\n                className=\"bg-secondary border-primary/30 text-foreground resize-none min-h-[150px]\"\n                required\n              />\n            </div>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleGenerateAI}\n              disabled={generating}\n              className=\"w-full border-primary/30 text-foreground hover:bg-primary/20 bg-transparent\"\n            >\n              {generating ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Generating AI Response...\n                </>\n              ) : (\n                <>\n                  <Sparkles className=\"mr-2 h-4 w-4\" />\n                  Generate AI Response\n                </>\n              )}\n            </Button>\n          </div>\n          <DialogFooter>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              className=\"border-primary/30 text-muted-foreground\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={loading || !reply}\n              className=\"bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white\"\n            >\n              {loading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Sending...\n                </>\n              ) : (\n                \"Send Reply\"\n              )}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  )\n}\n","size_bytes":5527},"components/layout/header.tsx":{"content":"\"use client\"\n\nimport { Bell, Search } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\"\nimport { useSupabase } from \"@/lib/hooks/use-supabase\"\n\nexport function Header() {\n  const { user } = useSupabase()\n\n  const getInitials = (email?: string) => {\n    if (!email) return \"U\"\n    return email.charAt(0).toUpperCase()\n  }\n\n  return (\n    <header className=\"flex h-16 items-center justify-between border-b border-primary/30 bg-card px-6\">\n      {/* Search */}\n      <div className=\"flex items-center gap-4 flex-1 max-w-xl\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search locations, reviews...\"\n            className=\"pl-10 bg-secondary border-primary/30 text-foreground placeholder:text-muted-foreground focus:border-primary\"\n          />\n        </div>\n      </div>\n\n      {/* Right side */}\n      <div className=\"flex items-center gap-4\">\n        <Button variant=\"ghost\" size=\"icon\" className=\"relative text-muted-foreground hover:text-foreground\">\n          <Bell className=\"h-5 w-5\" />\n          <span className=\"absolute top-1 right-1 h-2 w-2 rounded-full bg-primary\" />\n        </Button>\n\n        <Avatar className=\"h-9 w-9 border-2 border-primary/30\">\n          <AvatarFallback className=\"bg-primary/20 text-primary font-semibold\">\n            {getInitials(user?.email)}\n          </AvatarFallback>\n        </Avatar>\n      </div>\n    </header>\n  )\n}\n","size_bytes":1631},"components/ui/toast.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as ToastPrimitives from '@radix-ui/react-toast'\nimport { cva, type VariantProps } from 'class-variance-authority'\nimport { X } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      'fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]',\n      className,\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  'group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full',\n  {\n    variants: {\n      variant: {\n        default: 'border bg-background text-foreground',\n        destructive:\n          'destructive group border-destructive bg-destructive text-destructive-foreground',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      'inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive',\n      className,\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      'absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600',\n      className,\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn('text-sm font-semibold', className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn('text-sm opacity-90', className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4863},"lib/utils.ts":{"content":"import { clsx, type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"components/dashboard/activity-feed.tsx":{"content":"\"use client\"\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { motion, AnimatePresence } from \"framer-motion\"\nimport { ArrowRight, MessageSquare, MapPin, Star, Zap } from \"lucide-react\"\nimport { useEffect, useState } from \"react\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport type { ActivityLog } from \"@/lib/types/database\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\n\nconst activityIcons = {\n  review: MessageSquare,\n  location: MapPin,\n  rating: Star,\n  ai: Zap,\n}\n\nexport function ActivityFeed() {\n  const [activities, setActivities] = useState<ActivityLog[]>([])\n  const [loading, setLoading] = useState(true)\n  const supabase = createClient()\n\n  useEffect(() => {\n    const fetchActivities = async () => {\n      try {\n        const {\n          data: { user },\n        } = await supabase.auth.getUser()\n        if (!user) {\n          setLoading(false)\n          return\n        }\n\n        const { data, error } = await supabase\n          .from(\"activity_logs\")\n          .select(\"*\")\n          .eq(\"user_id\", user.id)\n          .order(\"created_at\", { ascending: false })\n          .limit(10)\n\n        if (error) {\n          console.error(\"Failed to fetch activities:\", error)\n          setActivities([])\n        } else if (data) {\n          setActivities(data)\n        }\n      } catch (err) {\n        console.error(\"Activity feed error:\", err)\n        setActivities([])\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchActivities()\n\n    // Subscribe to real-time updates with error handling\n    const channel = supabase\n      .channel(\"activity_logs\")\n      .on(\n        \"postgres_changes\",\n        {\n          event: \"INSERT\",\n          schema: \"public\",\n          table: \"activity_logs\",\n        },\n        (payload) => {\n          setActivities((prev) => [payload.new as ActivityLog, ...prev].slice(0, 10))\n        },\n      )\n      .subscribe()\n\n    return () => {\n      supabase.removeChannel(channel)\n    }\n  }, [])\n\n  const getActivityIcon = (type: string) => {\n    const IconComponent = activityIcons[type as keyof typeof activityIcons] || MessageSquare\n    return IconComponent\n  }\n\n  const formatRelativeTime = (timestamp: string) => {\n    const now = new Date()\n    const then = new Date(timestamp)\n    const diffInSeconds = Math.floor((now.getTime() - then.getTime()) / 1000)\n\n    if (diffInSeconds < 60) return \"Just now\"\n    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`\n    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`\n    return `${Math.floor(diffInSeconds / 86400)}d ago`\n  }\n\n  if (loading) {\n    return (\n      <Card className=\"bg-card border-primary/30\">\n        <CardHeader>\n          <CardTitle className=\"text-foreground\">Recent Activity</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {[...Array(5)].map((_, i) => (\n            <div key={i} className=\"flex items-center gap-4\">\n              <Skeleton className=\"w-10 h-10 rounded-full\" />\n              <div className=\"flex-1 space-y-2\">\n                <Skeleton className=\"h-4 w-3/4\" />\n                <Skeleton className=\"h-3 w-1/2\" />\n              </div>\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card className=\"bg-card border-primary/30\">\n      <CardHeader>\n        <CardTitle className=\"text-foreground\">Recent Activity</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-2\">\n        {activities.length === 0 ? (\n          <div className=\"text-center py-8 text-muted-foreground\">\n            <p>No recent activity</p>\n            <p className=\"text-sm mt-2\">Your activity will appear here</p>\n          </div>\n        ) : (\n          <AnimatePresence mode=\"popLayout\">\n            {activities.map((activity) => {\n              const Icon = getActivityIcon(activity.activity_type)\n              return (\n                <motion.div\n                  key={activity.id}\n                  initial={{ opacity: 0, x: -20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  exit={{ opacity: 0, x: 20 }}\n                  className=\"flex items-center gap-4 p-4 rounded-lg bg-secondary border border-primary/20 hover:border-primary/40 transition-all duration-200\"\n                >\n                  <div className=\"relative\">\n                    <div className=\"absolute inset-0 animate-ping rounded-full bg-primary/30 opacity-0 group-hover:opacity-100\" />\n                    <div className=\"relative w-10 h-10 rounded-full bg-gradient-to-br from-primary to-accent flex items-center justify-center\">\n                      <Icon className=\"w-5 h-5 text-white\" />\n                    </div>\n                  </div>\n\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm text-foreground truncate\">{activity.activity_message}</p>\n                    <p className=\"text-xs text-muted-foreground\">{formatRelativeTime(activity.created_at)}</p>\n                  </div>\n\n                  {activity.actionable && (\n                    <Button size=\"sm\" variant=\"ghost\" className=\"shrink-0 text-primary hover:text-accent\">\n                      <ArrowRight className=\"w-4 h-4\" />\n                    </Button>\n                  )}\n                </motion.div>\n              )\n            })}\n          </AnimatePresence>\n        )}\n      </CardContent>\n    </Card>\n  )\n}\n","size_bytes":5503},"components/ui/label.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as LabelPrimitive from '@radix-ui/react-label'\n\nimport { cn } from '@/lib/utils'\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        'flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n","size_bytes":612},"components/layout/public-footer.tsx":{"content":"import Link from \"next/link\"\nimport { Building2 } from \"lucide-react\"\n\nexport function PublicFooter() {\n  return (\n    <footer className=\"border-t border-primary/20 bg-black\">\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"rounded-lg bg-gradient-to-br from-primary to-accent p-2\">\n                <Building2 className=\"h-5 w-5 text-white\" />\n              </div>\n              <span className=\"text-xl font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n                GMB Platform\n              </span>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              Professional Google My Business management for modern businesses.\n            </p>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold text-foreground mb-4\">Product</h3>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link href=\"/pricing\" className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">\n                  Pricing\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/#features\" className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">\n                  Features\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold text-foreground mb-4\">Company</h3>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link href=\"/about\" className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">\n                  About Us\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/contact\" className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">\n                  Contact\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold text-foreground mb-4\">Legal</h3>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link href=\"/privacy\" className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">\n                  Privacy Policy\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/terms\" className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">\n                  Terms of Service\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"mt-12 pt-8 border-t border-primary/20 text-center text-sm text-muted-foreground\">\n          <p>&copy; {new Date().getFullYear()} GMB Platform. All rights reserved.</p>\n        </div>\n      </div>\n    </footer>\n  )\n}\n","size_bytes":2931},"app/(dashboard)/dashboard/page.tsx":{"content":"\"use client\"\n\nimport { StatCard } from \"@/components/dashboard/stat-card\"\nimport { ActivityFeed } from \"@/components/dashboard/activity-feed\"\nimport { PerformanceChart } from \"@/components/dashboard/performance-chart\"\nimport { MapPin, MessageSquare, Star, TrendingUp, AlertCircle } from \"lucide-react\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { useEffect, useState } from \"react\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\n\ninterface DashboardStats {\n  totalLocations: number\n  totalReviews: number\n  averageRating: string\n  responseRate: number\n}\n\nexport default function DashboardPage() {\n  const [stats, setStats] = useState<DashboardStats | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const supabase = createClient()\n\n  useEffect(() => {\n    async function fetchDashboardData() {\n      try {\n        setLoading(true)\n        setError(null)\n\n        const {\n          data: { user },\n        } = await supabase.auth.getUser()\n\n        if (!user) {\n          setError(\"Authentication required. Please log in.\")\n          return\n        }\n\n        const { data: locations, error: locationsError } = await supabase\n          .from(\"gmb_locations\")\n          .select(\"*\")\n          .eq(\"user_id\", user.id)\n\n        const { data: reviews, error: reviewsError } = await supabase\n          .from(\"gmb_reviews\")\n          .select(\"*\")\n          .eq(\"user_id\", user.id)\n\n        if (locationsError || reviewsError) {\n          throw new Error(locationsError?.message || reviewsError?.message || \"Failed to fetch data\")\n        }\n\n        const totalLocations = locations?.length || 0\n        const totalReviews = reviews?.length || 0\n        const averageRating =\n          reviews && reviews.length > 0\n            ? (reviews.reduce((acc, r) => acc + (r.rating || 0), 0) / reviews.length).toFixed(1)\n            : \"0.0\"\n\n        const respondedReviews = reviews?.filter((r) => r.status === \"responded\").length || 0\n        const responseRate = totalReviews > 0 ? Math.round((respondedReviews / totalReviews) * 100) : 0\n\n        setStats({\n          totalLocations,\n          totalReviews,\n          averageRating,\n          responseRate,\n        })\n      } catch (err) {\n        console.error(\"Dashboard data fetch error:\", err)\n        setError(err instanceof Error ? err.message : \"Failed to load dashboard data\")\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchDashboardData()\n  }, [])\n\n  if (error) {\n    return (\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Dashboard</h1>\n          <p className=\"text-muted-foreground mt-1\">Welcome back! Here&apos;s your GMB overview.</p>\n        </div>\n        <Card className=\"bg-card border-red-500/30\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3 text-red-500\">\n              <AlertCircle className=\"w-6 h-6\" />\n              <div>\n                <p className=\"font-semibold\">Failed to load dashboard data</p>\n                <p className=\"text-sm text-muted-foreground mt-1\">{error}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-3xl font-bold text-foreground\">Dashboard</h1>\n        <p className=\"text-muted-foreground mt-1\">Welcome back! Here&apos;s your GMB overview.</p>\n      </div>\n\n      {/* Stats Grid */}\n      {loading ? (\n        <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"bg-card border-primary/30\">\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-3\">\n                  <Skeleton className=\"h-4 w-24\" />\n                  <Skeleton className=\"h-8 w-16\" />\n                  <Skeleton className=\"h-3 w-32\" />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n          <StatCard\n            title=\"Total Locations\"\n            value={stats?.totalLocations || 0}\n            change=\"+2 this month\"\n            changeType=\"positive\"\n            icon={MapPin}\n            index={0}\n          />\n          <StatCard\n            title=\"Total Reviews\"\n            value={stats?.totalReviews || 0}\n            change=\"+12 this week\"\n            changeType=\"positive\"\n            icon={MessageSquare}\n            index={1}\n          />\n          <StatCard\n            title=\"Average Rating\"\n            value={stats?.averageRating || \"0.0\"}\n            change=\"+0.2 from last month\"\n            changeType=\"positive\"\n            icon={Star}\n            index={2}\n          />\n          <StatCard\n            title=\"Response Rate\"\n            value={`${stats?.responseRate || 0}%`}\n            change=\"+5% this month\"\n            changeType=\"positive\"\n            icon={TrendingUp}\n            index={3}\n          />\n        </div>\n      )}\n\n      {/* Charts and Activity */}\n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        <PerformanceChart />\n        <ActivityFeed />\n      </div>\n    </div>\n  )\n}\n","size_bytes":5371},"components/ui/input.tsx":{"content":"import * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Input({ className, type, ...props }: React.ComponentProps<'input'>) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        'file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n        'focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]',\n        'aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n","size_bytes":963},"components/dashboard/stat-card.tsx":{"content":"\"use client\"\n\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { motion } from \"framer-motion\"\nimport type { LucideIcon } from \"lucide-react\"\nimport { useEffect, useState } from \"react\"\n\ninterface StatCardProps {\n  title: string\n  value: string | number\n  change?: string\n  changeType?: \"positive\" | \"negative\" | \"neutral\"\n  icon: LucideIcon\n  index: number\n}\n\nexport function StatCard({ title, value, change, changeType = \"neutral\", icon: Icon, index }: StatCardProps) {\n  const [displayValue, setDisplayValue] = useState(0)\n  const numericValue = typeof value === \"string\" ? Number.parseFloat(value) : value\n\n  useEffect(() => {\n    if (typeof numericValue === \"number\" && !isNaN(numericValue)) {\n      let start = 0\n      const end = numericValue\n      const duration = 1000\n      const increment = end / (duration / 16)\n\n      const timer = setInterval(() => {\n        start += increment\n        if (start >= end) {\n          setDisplayValue(end)\n          clearInterval(timer)\n        } else {\n          setDisplayValue(start)\n        }\n      }, 16)\n\n      return () => clearInterval(timer)\n    }\n  }, [numericValue])\n\n  const changeColor =\n    changeType === \"positive\" ? \"text-green-500\" : changeType === \"negative\" ? \"text-red-500\" : \"text-muted-foreground\"\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5, delay: index * 0.1 }}\n    >\n      <Card className=\"bg-card border-primary/30 hover:border-primary/50 transition-all duration-300 hover:shadow-lg hover:shadow-primary/20\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-2\">\n              <p className=\"text-sm font-medium text-muted-foreground\">{title}</p>\n              <p className=\"text-3xl font-bold text-foreground\">\n                {typeof value === \"string\" ? value : Math.round(displayValue).toLocaleString()}\n              </p>\n              {change && <p className={`text-xs font-medium ${changeColor}`}>{change}</p>}\n            </div>\n            <div className=\"w-12 h-12 rounded-lg bg-primary/20 flex items-center justify-center\">\n              <Icon className=\"w-6 h-6 text-primary\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </motion.div>\n  )\n}\n","size_bytes":2354},"app/auth/callback/route.ts":{"content":"import { createClient } from '@/lib/supabase/server'\nimport { NextResponse } from 'next/server'\n\nfunction getOriginFromRequest(request: Request): string {\n  // Allow explicit override via environment variable\n  if (process.env.NEXT_PUBLIC_BASE_URL) {\n    return process.env.NEXT_PUBLIC_BASE_URL\n  }\n  \n  const requestUrl = new URL(request.url)\n  \n  // Get host from headers (respects reverse proxy/CDN)\n  const forwardedHost = request.headers.get('x-forwarded-host')\n  const forwardedProto = request.headers.get('x-forwarded-proto')\n  const host = request.headers.get('host') || requestUrl.host\n  \n  // Determine protocol: prefer forwarded header, then request URL protocol\n  const proto = forwardedProto || requestUrl.protocol.replace(':', '')\n  \n  // Use forwarded host if available, otherwise host header\n  const finalHost = forwardedHost || host\n  \n  return `${proto}://${finalHost}`\n}\n\nexport async function GET(request: Request) {\n  const requestUrl = new URL(request.url)\n  const code = requestUrl.searchParams.get('code')\n  const state = requestUrl.searchParams.get('state')\n  const baseUrl = getOriginFromRequest(request)\n\n  // Handle OAuth callback from Google (GMB) - check state FIRST\n  // Google OAuth sends both code AND state, so we check state first\n  if (state) {\n    // GMB OAuth is handled by /api/gmb/oauth-callback directly\n    // This route should not be used for GMB OAuth\n    // Redirect to the Next.js API route instead\n    return NextResponse.redirect(`${baseUrl}/api/gmb/oauth-callback${requestUrl.search}`)\n  }\n\n  // Handle Supabase auth callback (only code, no state)\n  if (code) {\n    const supabase = await createClient()\n    \n    // Exchange code for session\n    const { data, error } = await supabase.auth.exchangeCodeForSession(code)\n    \n    if (error) {\n      return NextResponse.redirect(`${baseUrl}/auth/login?error=${encodeURIComponent(error.message)}`)\n    }\n\n    // Redirect to dashboard with success\n    return NextResponse.redirect(`${baseUrl}/dashboard`)\n  }\n\n  return NextResponse.redirect(baseUrl)\n}\n","size_bytes":2046},"app/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\"\nimport Link from \"next/link\"\nimport { ArrowRight, BarChart3, MapPin, MessageSquare, Sparkles, Check } from \"lucide-react\"\n\nexport default function LandingPage() {\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      <header className=\"fixed top-0 left-0 right-0 z-50 border-b border-primary/20 bg-black/80 backdrop-blur-lg\">\n        <div className=\"container mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-10 h-10 rounded-lg bg-gradient-to-br from-primary to-accent flex items-center justify-center\">\n                <MapPin className=\"w-6 h-6 text-white\" />\n              </div>\n              <span className=\"text-xl font-bold\">GMB Platform</span>\n            </div>\n            <nav className=\"hidden md:flex items-center gap-8\">\n              <a href=\"#features\" className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">\n                Features\n              </a>\n              <a href=\"#how-it-works\" className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">\n                How It Works\n              </a>\n              <a href=\"#pricing\" className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">\n                Pricing\n              </a>\n              <Link href=\"/contact\" className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">\n                Contact\n              </Link>\n              <Button\n                asChild\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"border-primary/30 text-foreground hover:bg-primary/10 bg-transparent\"\n              >\n                <Link href=\"/auth/login\">Sign In</Link>\n              </Button>\n            </nav>\n            {/* Mobile Sign In button */}\n            <div className=\"md:hidden\">\n              <Button\n                asChild\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"border-primary/30 text-foreground hover:bg-primary/10 bg-transparent\"\n              >\n                <Link href=\"/auth/login\">Sign In</Link>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <div className=\"relative overflow-hidden pt-24\">\n        {/* Gradient background */}\n        <div className=\"absolute inset-0 bg-gradient-to-br from-primary/20 via-transparent to-accent/20\" />\n\n        <div className=\"relative container mx-auto px-6 py-24\">\n          <div className=\"max-w-4xl mx-auto text-center space-y-8\">\n            <h1 className=\"text-5xl md:text-7xl font-bold bg-gradient-to-r from-primary via-accent to-primary bg-clip-text text-transparent animate-gradient\">\n              Manage Your Google My Business Like a Pro\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              The ultimate platform for managing multiple GMB locations, responding to reviews with AI, and growing your\n              online presence.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button\n                asChild\n                size=\"lg\"\n                className=\"bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white text-lg px-8\"\n              >\n                <Link href=\"/auth/signup\">\n                  Get Started Free\n                  <ArrowRight className=\"ml-2 h-5 w-5\" />\n                </Link>\n              </Button>\n              <Button\n                asChild\n                size=\"lg\"\n                variant=\"outline\"\n                className=\"border-primary/30 text-foreground hover:bg-primary/10 text-lg px-8 bg-transparent\"\n              >\n                <Link href=\"/auth/login\">Sign In</Link>\n              </Button>\n            </div>\n          </div>\n\n          {/* Features Grid */}\n          <div id=\"features\" className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6 mt-24\">\n            <div className=\"p-6 rounded-2xl bg-card border border-primary/30 hover:border-primary/50 transition-all duration-300 hover:shadow-lg hover:shadow-primary/20\">\n              <div className=\"w-12 h-12 rounded-lg bg-primary/20 flex items-center justify-center mb-4\">\n                <MapPin className=\"w-6 h-6 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">Multi-Location Management</h3>\n              <p className=\"text-muted-foreground text-sm\">Manage all your GMB locations from one powerful dashboard</p>\n            </div>\n\n            <div className=\"p-6 rounded-2xl bg-card border border-primary/30 hover:border-primary/50 transition-all duration-300 hover:shadow-lg hover:shadow-primary/20\">\n              <div className=\"w-12 h-12 rounded-lg bg-primary/20 flex items-center justify-center mb-4\">\n                <MessageSquare className=\"w-6 h-6 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">AI-Powered Reviews</h3>\n              <p className=\"text-muted-foreground text-sm\">\n                Generate intelligent responses to reviews with advanced AI\n              </p>\n            </div>\n\n            <div className=\"p-6 rounded-2xl bg-card border border-primary/30 hover:border-primary/50 transition-all duration-300 hover:shadow-lg hover:shadow-primary/20\">\n              <div className=\"w-12 h-12 rounded-lg bg-primary/20 flex items-center justify-center mb-4\">\n                <BarChart3 className=\"w-6 h-6 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">Advanced Analytics</h3>\n              <p className=\"text-muted-foreground text-sm\">Track performance with detailed insights and reports</p>\n            </div>\n\n            <div className=\"p-6 rounded-2xl bg-card border border-primary/30 hover:border-primary/50 transition-all duration-300 hover:shadow-lg hover:shadow-primary/20\">\n              <div className=\"w-12 h-12 rounded-lg bg-primary/20 flex items-center justify-center mb-4\">\n                <Sparkles className=\"w-6 h-6 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">AI Content Studio</h3>\n              <p className=\"text-muted-foreground text-sm\">Create engaging posts and content with AI assistance</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <section id=\"how-it-works\" className=\"py-24 bg-gradient-to-b from-transparent to-card/50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-4\">How It Works</h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Get started in minutes and transform your GMB management\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8 max-w-5xl mx-auto\">\n            <div className=\"relative\">\n              <div className=\"text-center space-y-4\">\n                <div className=\"w-20 h-20 mx-auto rounded-2xl bg-gradient-to-br from-primary to-accent flex items-center justify-center\">\n                  <span className=\"text-3xl font-bold text-white\">1</span>\n                </div>\n                <h3 className=\"text-2xl font-semibold\">Connect Your Locations</h3>\n                <p className=\"text-muted-foreground\">\n                  Link your Google My Business accounts and import all your locations in seconds\n                </p>\n              </div>\n              <div className=\"hidden md:block absolute top-10 -right-4 w-8 h-0.5 bg-gradient-to-r from-primary to-transparent\" />\n            </div>\n\n            <div className=\"relative\">\n              <div className=\"text-center space-y-4\">\n                <div className=\"w-20 h-20 mx-auto rounded-2xl bg-gradient-to-br from-primary to-accent flex items-center justify-center\">\n                  <span className=\"text-3xl font-bold text-white\">2</span>\n                </div>\n                <h3 className=\"text-2xl font-semibold\">Manage & Respond</h3>\n                <p className=\"text-muted-foreground\">\n                  Monitor reviews, respond with AI assistance, and manage all locations from one dashboard\n                </p>\n              </div>\n              <div className=\"hidden md:block absolute top-10 -right-4 w-8 h-0.5 bg-gradient-to-r from-primary to-transparent\" />\n            </div>\n\n            <div className=\"text-center space-y-4\">\n              <div className=\"w-20 h-20 mx-auto rounded-2xl bg-gradient-to-br from-primary to-accent flex items-center justify-center\">\n                <span className=\"text-3xl font-bold text-white\">3</span>\n              </div>\n              <h3 className=\"text-2xl font-semibold\">Grow Your Business</h3>\n              <p className=\"text-muted-foreground\">\n                Track analytics, optimize performance, and watch your online presence grow\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <section className=\"py-24 bg-card/30\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-4\">Powerful Dashboard</h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Everything you need to manage your GMB presence in one beautiful interface\n            </p>\n          </div>\n\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"relative rounded-2xl border border-primary/30 overflow-hidden bg-gradient-to-br from-card to-secondary p-8\">\n              <div className=\"aspect-video rounded-xl border border-primary/20 bg-black/50 flex items-center justify-center relative overflow-hidden\">\n                <img\n                  src=\"/modern-dark-dashboard-interface-with-charts-and-an.jpg\"\n                  alt=\"Dashboard Preview\"\n                  className=\"w-full h-full object-cover opacity-80\"\n                />\n                <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 to-transparent\" />\n                <div className=\"absolute bottom-8 left-8 right-8\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"flex-1 h-2 rounded-full bg-primary/30\">\n                      <div className=\"h-full w-3/4 rounded-full bg-gradient-to-r from-primary to-accent\" />\n                    </div>\n                    <span className=\"text-sm text-muted-foreground\">Real-time Analytics</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <section id=\"pricing\" className=\"py-24\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-4\">Simple, Transparent Pricing</h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Choose the perfect plan for your business needs\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n            {/* Free Plan */}\n            <div className=\"p-8 rounded-2xl bg-card border border-primary/30 hover:border-primary/50 transition-all duration-300\">\n              <div className=\"mb-6\">\n                <h3 className=\"text-2xl font-bold mb-2\">Free</h3>\n                <div className=\"flex items-baseline gap-2\">\n                  <span className=\"text-5xl font-bold\">$0</span>\n                  <span className=\"text-muted-foreground\">/month</span>\n                </div>\n              </div>\n              <ul className=\"space-y-4 mb-8\">\n                <li className=\"flex items-start gap-3\">\n                  <Check className=\"w-5 h-5 text-primary mt-0.5 flex-shrink-0\" />\n                  <span className=\"text-sm\">Up to 3 locations</span>\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <Check className=\"w-5 h-5 text-primary mt-0.5 flex-shrink-0\" />\n                  <span className=\"text-sm\">Basic analytics</span>\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <Check className=\"w-5 h-5 text-primary mt-0.5 flex-shrink-0\" />\n                  <span className=\"text-sm\">Review monitoring</span>\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <Check className=\"w-5 h-5 text-primary mt-0.5 flex-shrink-0\" />\n                  <span className=\"text-sm\">Email support</span>\n                </li>\n              </ul>\n              <Button asChild variant=\"outline\" className=\"w-full border-primary/30 hover:bg-primary/10 bg-transparent\">\n                <Link href=\"/auth/signup\">Get Started</Link>\n              </Button>\n            </div>\n\n            {/* Pro Plan */}\n            <div className=\"p-8 rounded-2xl bg-gradient-to-br from-primary/10 to-accent/10 border-2 border-primary relative\">\n              <div className=\"absolute -top-4 left-1/2 -translate-x-1/2 px-4 py-1 rounded-full bg-gradient-to-r from-primary to-accent text-white text-sm font-semibold\">\n                Most Popular\n              </div>\n              <div className=\"mb-6\">\n                <h3 className=\"text-2xl font-bold mb-2\">Pro</h3>\n                <div className=\"flex items-baseline gap-2\">\n                  <span className=\"text-5xl font-bold\">$49</span>\n                  <span className=\"text-muted-foreground\">/month</span>\n                </div>\n              </div>\n              <ul className=\"space-y-4 mb-8\">\n                <li className=\"flex items-start gap-3\">\n                  <Check className=\"w-5 h-5 text-primary mt-0.5 flex-shrink-0\" />\n                  <span className=\"text-sm\">Up to 25 locations</span>\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <Check className=\"w-5 h-5 text-primary mt-0.5 flex-shrink-0\" />\n                  <span className=\"text-sm\">Advanced analytics</span>\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <Check className=\"w-5 h-5 text-primary mt-0.5 flex-shrink-0\" />\n                  <span className=\"text-sm\">AI-powered responses</span>\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <Check className=\"w-5 h-5 text-primary mt-0.5 flex-shrink-0\" />\n                  <span className=\"text-sm\">Priority support</span>\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <Check className=\"w-5 h-5 text-primary mt-0.5 flex-shrink-0\" />\n                  <span className=\"text-sm\">Custom reports</span>\n                </li>\n              </ul>\n              <Button\n                asChild\n                className=\"w-full bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white\"\n              >\n                <Link href=\"/auth/signup\">Get Started</Link>\n              </Button>\n            </div>\n\n            {/* Agency Plan */}\n            <div className=\"p-8 rounded-2xl bg-card border border-primary/30 hover:border-primary/50 transition-all duration-300\">\n              <div className=\"mb-6\">\n                <h3 className=\"text-2xl font-bold mb-2\">Agency</h3>\n                <div className=\"flex items-baseline gap-2\">\n                  <span className=\"text-5xl font-bold\">$149</span>\n                  <span className=\"text-muted-foreground\">/month</span>\n                </div>\n              </div>\n              <ul className=\"space-y-4 mb-8\">\n                <li className=\"flex items-start gap-3\">\n                  <Check className=\"w-5 h-5 text-primary mt-0.5 flex-shrink-0\" />\n                  <span className=\"text-sm\">Unlimited locations</span>\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <Check className=\"w-5 h-5 text-primary mt-0.5 flex-shrink-0\" />\n                  <span className=\"text-sm\">White-label solution</span>\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <Check className=\"w-5 h-5 text-primary mt-0.5 flex-shrink-0\" />\n                  <span className=\"text-sm\">Team collaboration</span>\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <Check className=\"w-5 h-5 text-primary mt-0.5 flex-shrink-0\" />\n                  <span className=\"text-sm\">Dedicated account manager</span>\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <Check className=\"w-5 h-5 text-primary mt-0.5 flex-shrink-0\" />\n                  <span className=\"text-sm\">API access</span>\n                </li>\n              </ul>\n              <Button asChild variant=\"outline\" className=\"w-full border-primary/30 hover:bg-primary/10 bg-transparent\">\n                <Link href=\"/contact\">Contact Sales</Link>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <section className=\"py-24 bg-gradient-to-br from-primary/20 via-transparent to-accent/20\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center space-y-8\">\n            <h2 className=\"text-4xl md:text-6xl font-bold\">Ready to Transform Your GMB Management?</h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Join thousands of businesses already using our platform to grow their online presence\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button\n                asChild\n                size=\"lg\"\n                className=\"bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white text-lg px-8\"\n              >\n                <Link href=\"/auth/signup\">\n                  Start Free Trial\n                  <ArrowRight className=\"ml-2 h-5 w-5\" />\n                </Link>\n              </Button>\n              <Button\n                asChild\n                size=\"lg\"\n                variant=\"outline\"\n                className=\"border-primary/30 text-foreground hover:bg-primary/10 text-lg px-8 bg-transparent\"\n              >\n                <Link href=\"/contact\">Schedule Demo</Link>\n              </Button>\n            </div>\n            <div className=\"flex items-center justify-center gap-8 pt-8 text-sm text-muted-foreground\">\n              <div className=\"flex items-center gap-2\">\n                <Check className=\"w-4 h-4 text-primary\" />\n                <span>No credit card required</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Check className=\"w-4 h-4 text-primary\" />\n                <span>14-day free trial</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Check className=\"w-4 h-4 text-primary\" />\n                <span>Cancel anytime</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <footer className=\"border-t border-primary/20 bg-card/50 backdrop-blur-sm\">\n        <div className=\"container mx-auto px-6 py-12\">\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">GMB Platform</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                The ultimate Google My Business management solution for modern businesses.\n              </p>\n            </div>\n            <div className=\"space-y-4\">\n              <h4 className=\"text-sm font-semibold\">Product</h4>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li>\n                  <Link href=\"/pricing\" className=\"hover:text-primary transition-colors\">\n                    Pricing\n                  </Link>\n                </li>\n                <li>\n                  <Link href=\"/about\" className=\"hover:text-primary transition-colors\">\n                    About Us\n                  </Link>\n                </li>\n              </ul>\n            </div>\n            <div className=\"space-y-4\">\n              <h4 className=\"text-sm font-semibold\">Support</h4>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li>\n                  <Link href=\"/contact\" className=\"hover:text-primary transition-colors\">\n                    Contact\n                  </Link>\n                </li>\n              </ul>\n            </div>\n            <div className=\"space-y-4\">\n              <h4 className=\"text-sm font-semibold\">Legal</h4>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li>\n                  <Link href=\"/privacy\" className=\"hover:text-primary transition-colors\">\n                    Privacy Policy\n                  </Link>\n                </li>\n                <li>\n                  <Link href=\"/terms\" className=\"hover:text-primary transition-colors\">\n                    Terms of Service\n                  </Link>\n                </li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"mt-8 pt-8 border-t border-primary/20 text-center text-sm text-muted-foreground\">\n            <p>&copy; {new Date().getFullYear()} GMB Platform. All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  )\n}\n","size_bytes":21643},"components/ai-studio/content-generator.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Label } from \"@/components/ui/label\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Loader2, Sparkles, Copy, Download, RefreshCw } from \"lucide-react\"\nimport { motion, AnimatePresence } from \"framer-motion\"\n\ninterface ContentGeneratorProps {\n  contentType: string\n}\n\nconst tones = [\n  { value: \"professional\", label: \"Professional\" },\n  { value: \"friendly\", label: \"Friendly\" },\n  { value: \"casual\", label: \"Casual\" },\n  { value: \"formal\", label: \"Formal\" },\n  { value: \"enthusiastic\", label: \"Enthusiastic\" },\n]\n\nconst providers = [\n  { value: \"openai\", label: \"OpenAI GPT-4\" },\n  { value: \"anthropic\", label: \"Anthropic Claude\" },\n  { value: \"groq\", label: \"Groq\" },\n]\n\nexport function ContentGenerator({ contentType }: ContentGeneratorProps) {\n  const [prompt, setPrompt] = useState(\"\")\n  const [tone, setTone] = useState(\"professional\")\n  const [provider, setProvider] = useState(\"openai\")\n  const [generating, setGenerating] = useState(false)\n  const [generatedContent, setGeneratedContent] = useState(\"\")\n  const [copied, setCopied] = useState(false)\n\n  const handleGenerate = async () => {\n    setGenerating(true)\n    setGeneratedContent(\"\")\n\n    try {\n      // Simulate AI generation (in production, this would call an AI API)\n      await new Promise((resolve) => setTimeout(resolve, 2000))\n\n      const content = generateMockContent(contentType, prompt, tone)\n      setGeneratedContent(content)\n    } catch (error) {\n      console.error(\"Error generating content:\", error)\n    } finally {\n      setGenerating(false)\n    }\n  }\n\n  const generateMockContent = (type: string, userPrompt: string, selectedTone: string) => {\n    const tonePrefix =\n      selectedTone === \"professional\"\n        ? \"We are pleased to announce\"\n        : selectedTone === \"friendly\"\n          ? \"Hey there! We're excited to share\"\n          : selectedTone === \"casual\"\n            ? \"Check this out!\"\n            : selectedTone === \"formal\"\n              ? \"It is with great pleasure that we inform you\"\n              : \"We're thrilled to let you know\"\n\n    switch (type) {\n      case \"posts\":\n        return `${tonePrefix} that ${userPrompt || \"we have something special for you\"}! Visit us today to experience the difference. #LocalBusiness #CommunityFirst`\n      case \"responses\":\n        return `Thank you for your feedback! ${userPrompt || \"We truly appreciate your business and look forward to serving you again soon.\"}`\n      case \"descriptions\":\n        return `${userPrompt || \"Welcome to our business\"} - where quality meets excellence. We pride ourselves on delivering exceptional service to our valued customers.`\n      case \"faqs\":\n        return `Q: ${userPrompt || \"What are your hours?\"}\\n\\nA: We're here to serve you! Our team is available during business hours to assist with all your needs. Please contact us for specific timing.`\n      default:\n        return `${tonePrefix} - ${userPrompt || \"Generated content will appear here\"}`\n    }\n  }\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(generatedContent)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }\n\n  const handleDownload = () => {\n    const blob = new Blob([generatedContent], { type: \"text/plain\" })\n    const url = URL.createObjectURL(blob)\n    const a = document.createElement(\"a\")\n    a.href = url\n    a.download = `${contentType}-${Date.now()}.txt`\n    a.click()\n    URL.revokeObjectURL(url)\n  }\n\n  return (\n    <div className=\"grid gap-6 lg:grid-cols-2\">\n      {/* Input Section */}\n      <Card className=\"bg-card border-primary/30\">\n        <CardHeader>\n          <CardTitle className=\"text-foreground flex items-center gap-2\">\n            <Sparkles className=\"w-5 h-5 text-primary\" />\n            Generate Content\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Provider Selection */}\n          <div className=\"space-y-2\">\n            <Label className=\"text-foreground\">AI Provider</Label>\n            <Select value={provider} onValueChange={setProvider}>\n              <SelectTrigger className=\"bg-secondary border-primary/30 text-foreground\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent className=\"bg-card border-primary/30\">\n                {providers.map((p) => (\n                  <SelectItem key={p.value} value={p.value}>\n                    {p.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Tone Selection */}\n          <div className=\"space-y-2\">\n            <Label className=\"text-foreground\">Tone & Style</Label>\n            <div className=\"flex flex-wrap gap-2\">\n              {tones.map((t) => (\n                <Badge\n                  key={t.value}\n                  variant={tone === t.value ? \"default\" : \"outline\"}\n                  className={\n                    tone === t.value\n                      ? \"bg-gradient-to-r from-primary to-accent text-white cursor-pointer\"\n                      : \"border-primary/30 text-muted-foreground cursor-pointer hover:border-primary/50\"\n                  }\n                  onClick={() => setTone(t.value)}\n                >\n                  {t.label}\n                </Badge>\n              ))}\n            </div>\n          </div>\n\n          {/* Prompt Input */}\n          <div className=\"space-y-2\">\n            <Label className=\"text-foreground\">Your Prompt</Label>\n            <Textarea\n              value={prompt}\n              onChange={(e) => setPrompt(e.target.value)}\n              placeholder={`Describe what you want to create for ${contentType}...`}\n              className=\"bg-secondary border-primary/30 text-foreground resize-none min-h-[200px]\"\n            />\n          </div>\n\n          {/* Generate Button */}\n          <Button\n            onClick={handleGenerate}\n            disabled={generating}\n            className=\"w-full bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white\"\n          >\n            {generating ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Generating...\n              </>\n            ) : (\n              <>\n                <Sparkles className=\"mr-2 h-4 w-4\" />\n                Generate Content\n              </>\n            )}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Output Section */}\n      <Card className=\"bg-card border-primary/30\">\n        <CardHeader>\n          <CardTitle className=\"text-foreground\">Generated Content</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <AnimatePresence mode=\"wait\">\n            {generating ? (\n              <motion.div\n                key=\"loading\"\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                exit={{ opacity: 0 }}\n                className=\"flex flex-col items-center justify-center py-16 space-y-4\"\n              >\n                <div className=\"w-16 h-16 rounded-full bg-gradient-to-r from-primary to-accent animate-pulse\" />\n                <p className=\"text-muted-foreground\">Generating your content...</p>\n              </motion.div>\n            ) : generatedContent ? (\n              <motion.div\n                key=\"content\"\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: -20 }}\n                className=\"space-y-4\"\n              >\n                <div className=\"p-4 rounded-lg bg-secondary border border-primary/20 min-h-[200px]\">\n                  <p className=\"text-foreground whitespace-pre-wrap\">{generatedContent}</p>\n                </div>\n\n                {/* Action Buttons */}\n                <div className=\"flex gap-2\">\n                  <Button\n                    onClick={handleCopy}\n                    variant=\"outline\"\n                    className=\"flex-1 border-primary/30 text-foreground hover:bg-primary/20 bg-transparent\"\n                  >\n                    <Copy className=\"mr-2 h-4 w-4\" />\n                    {copied ? \"Copied!\" : \"Copy\"}\n                  </Button>\n                  <Button\n                    onClick={handleDownload}\n                    variant=\"outline\"\n                    className=\"flex-1 border-primary/30 text-foreground hover:bg-primary/20 bg-transparent\"\n                  >\n                    <Download className=\"mr-2 h-4 w-4\" />\n                    Download\n                  </Button>\n                  <Button\n                    onClick={handleGenerate}\n                    variant=\"outline\"\n                    className=\"flex-1 border-primary/30 text-foreground hover:bg-primary/20 bg-transparent\"\n                  >\n                    <RefreshCw className=\"mr-2 h-4 w-4\" />\n                    Regenerate\n                  </Button>\n                </div>\n              </motion.div>\n            ) : (\n              <motion.div\n                key=\"empty\"\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                exit={{ opacity: 0 }}\n                className=\"flex flex-col items-center justify-center py-16 text-center\"\n              >\n                <div className=\"w-16 h-16 rounded-full bg-primary/20 flex items-center justify-center mb-4\">\n                  <Sparkles className=\"w-8 h-8 text-primary\" />\n                </div>\n                <p className=\"text-muted-foreground\">Your generated content will appear here</p>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","size_bytes":9984},"components/layout/public-header.tsx":{"content":"\"use client\"\n\nimport Link from \"next/link\"\nimport { Button } from \"@/components/ui/button\"\nimport { Building2 } from \"lucide-react\"\nimport { motion } from \"framer-motion\"\n\nexport function PublicHeader() {\n  return (\n    <motion.header\n      initial={{ y: -20, opacity: 0 }}\n      animate={{ y: 0, opacity: 1 }}\n      className=\"sticky top-0 z-50 w-full border-b border-primary/20 bg-black/80 backdrop-blur-xl\"\n    >\n      <div className=\"container mx-auto flex h-16 items-center justify-between px-4\">\n        <Link href=\"/\" className=\"flex items-center gap-2 group\">\n          <div className=\"rounded-lg bg-gradient-to-br from-primary to-accent p-2 group-hover:scale-110 transition-transform\">\n            <Building2 className=\"h-5 w-5 text-white\" />\n          </div>\n          <span className=\"text-xl font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n            GMB Platform\n          </span>\n        </Link>\n\n        <nav className=\"hidden md:flex items-center gap-6\">\n          <Link href=\"/pricing\" className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">\n            Pricing\n          </Link>\n          <Link href=\"/about\" className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">\n            About\n          </Link>\n          <Link href=\"/contact\" className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">\n            Contact\n          </Link>\n        </nav>\n\n        <div className=\"flex items-center gap-3\">\n          <Button variant=\"ghost\" asChild className=\"text-muted-foreground hover:text-primary\">\n            <Link href=\"/auth/login\">Sign In</Link>\n          </Button>\n          <Button asChild className=\"bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90\">\n            <Link href=\"/auth/signup\">Get Started</Link>\n          </Button>\n        </div>\n      </div>\n    </motion.header>\n  )\n}\n","size_bytes":1938},"app/globals.css":{"content":"@import \"tailwindcss\";\n@import \"tw-animate-css\";\n\n@custom-variant dark (&:is(.dark *));\n\n:root {\n  --background: oklch(1 0 0);\n  --foreground: oklch(0.145 0 0);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.145 0 0);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.145 0 0);\n  --primary: oklch(0.205 0 0);\n  --primary-foreground: oklch(0.985 0 0);\n  --secondary: oklch(0.97 0 0);\n  --secondary-foreground: oklch(0.205 0 0);\n  --muted: oklch(0.97 0 0);\n  --muted-foreground: oklch(0.556 0 0);\n  --accent: oklch(0.97 0 0);\n  --accent-foreground: oklch(0.205 0 0);\n  --destructive: oklch(0.577 0.245 27.325);\n  --destructive-foreground: oklch(0.577 0.245 27.325);\n  --border: oklch(0.922 0 0);\n  --input: oklch(0.922 0 0);\n  --ring: oklch(0.708 0 0);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --radius: 0.625rem;\n  --sidebar: oklch(0.985 0 0);\n  --sidebar-foreground: oklch(0.145 0 0);\n  --sidebar-primary: oklch(0.205 0 0);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.97 0 0);\n  --sidebar-accent-foreground: oklch(0.205 0 0);\n  --sidebar-border: oklch(0.922 0 0);\n  --sidebar-ring: oklch(0.708 0 0);\n}\n\n.dark {\n  --background: oklch(0.145 0 0);\n  --foreground: oklch(0.985 0 0);\n  --card: oklch(0.145 0 0);\n  --card-foreground: oklch(0.985 0 0);\n  --popover: oklch(0.145 0 0);\n  --popover-foreground: oklch(0.985 0 0);\n  --primary: oklch(0.985 0 0);\n  --primary-foreground: oklch(0.205 0 0);\n  --secondary: oklch(0.269 0 0);\n  --secondary-foreground: oklch(0.985 0 0);\n  --muted: oklch(0.269 0 0);\n  --muted-foreground: oklch(0.708 0 0);\n  --accent: oklch(0.269 0 0);\n  --accent-foreground: oklch(0.985 0 0);\n  --destructive: oklch(0.396 0.141 25.723);\n  --destructive-foreground: oklch(0.637 0.237 25.331);\n  --border: oklch(0.269 0 0);\n  --input: oklch(0.269 0 0);\n  --ring: oklch(0.439 0 0);\n  --chart-1: oklch(0.488 0.243 264.376);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.205 0 0);\n  --sidebar-foreground: oklch(0.985 0 0);\n  --sidebar-primary: oklch(0.488 0.243 264.376);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.269 0 0);\n  --sidebar-accent-foreground: oklch(0.985 0 0);\n  --sidebar-border: oklch(0.269 0 0);\n  --sidebar-ring: oklch(0.439 0 0);\n}\n\n@theme inline {\n  --font-sans: \"Inter\", system-ui, -apple-system, sans-serif;\n\n  /* Pure Black & Orange Design System */\n  --color-background: #000000;\n  --color-foreground: #ffffff;\n\n  --color-card: #0a0a0a;\n  --color-card-foreground: #ffffff;\n\n  --color-primary: #ff6b35;\n  --color-primary-foreground: #ffffff;\n\n  --color-secondary: #1a1a1a;\n  --color-secondary-foreground: #ffffff;\n\n  --color-muted: #262626;\n  --color-muted-foreground: #999999;\n\n  --color-accent: #ff8c42;\n  --color-accent-foreground: #ffffff;\n\n  --color-destructive: #ff4444;\n  --color-destructive-foreground: #ffffff;\n\n  --color-border: #ff6b35;\n  --color-input: #1a1a1a;\n  --color-ring: #ff6b35;\n\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --color-card: var(--card);\n  --color-card-foreground: var(--card-foreground);\n  --color-popover: var(--popover);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-primary: var(--primary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-secondary: var(--secondary);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-muted: var(--muted);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-accent: var(--accent);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-destructive: var(--destructive);\n  --color-destructive-foreground: var(--destructive-foreground);\n  --color-border: var(--border);\n  --color-input: var(--input);\n  --color-ring: var(--ring);\n  --color-chart-1: var(--chart-1);\n  --color-chart-2: var(--chart-2);\n  --color-chart-3: var(--chart-3);\n  --color-chart-4: var(--chart-4);\n  --color-chart-5: var(--chart-5);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n  --color-sidebar: var(--sidebar);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-ring: var(--sidebar-ring);\n\n  --radius: 0.75rem;\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n\n* {\n  border-color: theme(\"colors.border\");\n}\n\nbody {\n  background-color: theme(\"colors.background\");\n  color: theme(\"colors.foreground\");\n  font-feature-settings: \"rlig\" 1, \"calt\" 1;\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: #0a0a0a;\n}\n\n::-webkit-scrollbar-thumb {\n  background: #ff6b35;\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: #ff8c42;\n}\n\n/* Glass morphism effect */\n.glass {\n  background: rgba(10, 10, 10, 0.8);\n  backdrop-filter: blur(12px);\n  border: 1px solid rgba(255, 107, 53, 0.2);\n}\n\n/* Orange gradient */\n.gradient-orange {\n  background: linear-gradient(135deg, #ff6b35 0%, #ff8c42 100%);\n}\n\n/* Shimmer animation for skeletons */\n@keyframes shimmer {\n  0% {\n    background-position: -1000px 0;\n  }\n  100% {\n    background-position: 1000px 0;\n  }\n}\n\n.shimmer {\n  animation: shimmer 2s infinite linear;\n  background: linear-gradient(to right, transparent 0%, rgba(255, 107, 53, 0.1) 50%, transparent 100%);\n  background-size: 1000px 100%;\n}\n","size_bytes":6000},"components/ui/card.tsx":{"content":"import * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Card({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        'bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        '@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-2 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn('leading-none font-semibold', className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        'col-start-2 row-span-2 row-start-1 self-start justify-self-end',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn('px-6', className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn('flex items-center px-6 [.border-t]:pt-6', className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1990},"app/pricing/page.tsx":{"content":"import Link from \"next/link\"\nimport { ArrowLeft, Check } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\n\nexport default function PricingPage() {\n  const plans = [\n    {\n      name: \"Starter\",\n      price: \"$29\",\n      description: \"Perfect for small businesses\",\n      features: [\"Up to 3 locations\", \"Basic analytics\", \"Review management\", \"Email support\", \"Monthly reports\"],\n    },\n    {\n      name: \"Professional\",\n      price: \"$79\",\n      description: \"For growing businesses\",\n      features: [\n        \"Up to 15 locations\",\n        \"Advanced analytics\",\n        \"AI-powered insights\",\n        \"Priority support\",\n        \"Custom reports\",\n        \"Team collaboration\",\n        \"API access\",\n      ],\n      popular: true,\n    },\n    {\n      name: \"Enterprise\",\n      price: \"Custom\",\n      description: \"For large organizations\",\n      features: [\n        \"Unlimited locations\",\n        \"Enterprise analytics\",\n        \"Dedicated account manager\",\n        \"24/7 phone support\",\n        \"Custom integrations\",\n        \"White-label options\",\n        \"SLA guarantee\",\n        \"Advanced security\",\n      ],\n    },\n  ]\n\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      <div className=\"container mx-auto px-4 py-12 max-w-7xl\">\n        <Link\n          href=\"/\"\n          className=\"inline-flex items-center gap-2 text-gray-400 hover:text-orange-500 transition-colors mb-8\"\n        >\n          <ArrowLeft className=\"w-4 h-4\" />\n          Back to Home\n        </Link>\n\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-4xl font-bold mb-4 text-balance\">Simple, Transparent Pricing</h1>\n          <p className=\"text-gray-400 text-lg\">Choose the plan that fits your business needs</p>\n        </div>\n\n        <div className=\"grid md:grid-cols-3 gap-8 mb-16\">\n          {plans.map((plan) => (\n            <div\n              key={plan.name}\n              className={`bg-[#0A0A0A] rounded-lg p-8 ${\n                plan.popular ? \"border-2 border-orange-500 relative\" : \"border border-orange-500/20\"\n              }`}\n            >\n              {plan.popular && (\n                <div className=\"absolute -top-4 left-1/2 -translate-x-1/2 bg-orange-500 text-white px-4 py-1 rounded-full text-sm font-semibold\">\n                  Most Popular\n                </div>\n              )}\n              <h3 className=\"text-2xl font-bold mb-2\">{plan.name}</h3>\n              <p className=\"text-gray-400 mb-6\">{plan.description}</p>\n              <div className=\"mb-6\">\n                <span className=\"text-4xl font-bold\">{plan.price}</span>\n                {plan.price !== \"Custom\" && <span className=\"text-gray-400\">/month</span>}\n              </div>\n              <Button className=\"w-full mb-6 bg-orange-500 hover:bg-orange-600 text-white\">Get Started</Button>\n              <ul className=\"space-y-3\">\n                {plan.features.map((feature) => (\n                  <li key={feature} className=\"flex items-start gap-3\">\n                    <Check className=\"w-5 h-5 text-orange-500 flex-shrink-0 mt-0.5\" />\n                    <span className=\"text-gray-300 text-sm\">{feature}</span>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"bg-[#0A0A0A] border border-orange-500/20 rounded-lg p-8\">\n          <h2 className=\"text-2xl font-bold mb-6\">Frequently Asked Questions</h2>\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            <div>\n              <h3 className=\"font-semibold mb-2\">Can I change plans later?</h3>\n              <p className=\"text-gray-400 text-sm\">\n                Yes, you can upgrade or downgrade your plan at any time. Changes take effect immediately.\n              </p>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-2\">Is there a free trial?</h3>\n              <p className=\"text-gray-400 text-sm\">\n                Yes, all plans come with a 14-day free trial. No credit card required.\n              </p>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-2\">What payment methods do you accept?</h3>\n              <p className=\"text-gray-400 text-sm\">\n                We accept all major credit cards, PayPal, and wire transfers for Enterprise plans.\n              </p>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-2\">Can I cancel anytime?</h3>\n              <p className=\"text-gray-400 text-sm\">\n                Yes, you can cancel your subscription at any time. No long-term contracts required.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":4685},"app/(dashboard)/settings/page.tsx":{"content":"\"use client\"\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\"\nimport { User, Bell, Key, Users, CreditCard, Loader2 } from \"lucide-react\"\nimport { useSupabase } from \"@/lib/hooks/use-supabase\"\nimport { useState, useEffect } from \"react\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport { useToast } from \"@/hooks/use-toast\"\n\nexport default function SettingsPage() {\n  const { user } = useSupabase()\n  const { toast } = useToast()\n  const supabase = createClient()\n\n  const [fullName, setFullName] = useState(\"\")\n  const [email, setEmail] = useState(user?.email || \"\")\n  const [isLoading, setIsLoading] = useState(false)\n  const [isSaving, setIsSaving] = useState(false)\n\n  useEffect(() => {\n    async function loadProfile() {\n      if (!user) return\n\n      setIsLoading(true)\n      try {\n        const { data: profile } = await supabase.from(\"profiles\").select(\"full_name\").eq(\"id\", user.id).single()\n\n        if (profile) {\n          setFullName(profile.full_name || \"\")\n        }\n      } catch (error) {\n        console.error(\"Error loading profile:\", error)\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    loadProfile()\n  }, [user, supabase])\n\n  async function handleSaveProfile() {\n    if (!user) return\n\n    setIsSaving(true)\n    try {\n      const { error } = await supabase.from(\"profiles\").update({ full_name: fullName }).eq(\"id\", user.id)\n\n      if (error) throw error\n\n      toast({\n        title: \"Profile updated\",\n        description: \"Your profile has been successfully updated.\",\n      })\n    } catch (error) {\n      console.error(\"Error saving profile:\", error)\n      toast({\n        title: \"Error\",\n        description: \"Failed to update profile. Please try again.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-3xl font-bold text-foreground\">Settings</h1>\n        <p className=\"text-muted-foreground mt-1\">Manage your account and preferences</p>\n      </div>\n\n      {/* Settings Tabs */}\n      <Tabs defaultValue=\"profile\" className=\"space-y-6\">\n        <TabsList className=\"bg-card border border-primary/30 p-1\">\n          <TabsTrigger\n            value=\"profile\"\n            className=\"data-[state=active]:bg-gradient-to-r data-[state=active]:from-primary data-[state=active]:to-accent data-[state=active]:text-white\"\n          >\n            <User className=\"w-4 h-4 mr-2\" />\n            Profile\n          </TabsTrigger>\n          <TabsTrigger\n            value=\"notifications\"\n            className=\"data-[state=active]:bg-gradient-to-r data-[state=active]:from-primary data-[state=active]:to-accent data-[state=active]:text-white\"\n          >\n            <Bell className=\"w-4 h-4 mr-2\" />\n            Notifications\n          </TabsTrigger>\n          <TabsTrigger\n            value=\"api\"\n            className=\"data-[state=active]:bg-gradient-to-r data-[state=active]:from-primary data-[state=active]:to-accent data-[state=active]:text-white\"\n          >\n            <Key className=\"w-4 h-4 mr-2\" />\n            API Keys\n          </TabsTrigger>\n          <TabsTrigger\n            value=\"team\"\n            className=\"data-[state=active]:bg-gradient-to-r data-[state=active]:from-primary data-[state=active]:to-accent data-[state=active]:text-white\"\n          >\n            <Users className=\"w-4 h-4 mr-2\" />\n            Team\n          </TabsTrigger>\n          <TabsTrigger\n            value=\"billing\"\n            className=\"data-[state=active]:bg-gradient-to-r data-[state=active]:from-primary data-[state=active]:to-accent data-[state=active]:text-white\"\n          >\n            <CreditCard className=\"w-4 h-4 mr-2\" />\n            Billing\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Profile Tab */}\n        <TabsContent value=\"profile\">\n          <Card className=\"bg-card border-primary/30\">\n            <CardHeader>\n              <CardTitle className=\"text-foreground\">Profile Settings</CardTitle>\n              <CardDescription className=\"text-muted-foreground\">\n                Update your personal information and preferences\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Avatar */}\n              <div className=\"flex items-center gap-4\">\n                <Avatar className=\"h-20 w-20 border-2 border-primary/30\">\n                  <AvatarFallback className=\"bg-primary/20 text-primary text-2xl font-semibold\">\n                    {user?.email?.charAt(0).toUpperCase()}\n                  </AvatarFallback>\n                </Avatar>\n                <Button\n                  variant=\"outline\"\n                  className=\"border-primary/30 text-foreground hover:bg-primary/20 bg-transparent\"\n                >\n                  Change Avatar\n                </Button>\n              </div>\n\n              {/* Form */}\n              {isLoading ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"fullName\" className=\"text-foreground\">\n                      Full Name\n                    </Label>\n                    <Input\n                      id=\"fullName\"\n                      value={fullName}\n                      onChange={(e) => setFullName(e.target.value)}\n                      placeholder=\"John Doe\"\n                      className=\"bg-secondary border-primary/30 text-foreground\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\" className=\"text-foreground\">\n                      Email\n                    </Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={email}\n                      disabled\n                      className=\"bg-secondary border-primary/30 text-foreground opacity-60\"\n                    />\n                    <p className=\"text-xs text-muted-foreground\">Email cannot be changed</p>\n                  </div>\n                  <Button\n                    onClick={handleSaveProfile}\n                    disabled={isSaving}\n                    className=\"bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white\"\n                  >\n                    {isSaving ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Saving...\n                      </>\n                    ) : (\n                      \"Save Changes\"\n                    )}\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Notifications Tab */}\n        <TabsContent value=\"notifications\">\n          <Card className=\"bg-card border-primary/30\">\n            <CardHeader>\n              <CardTitle className=\"text-foreground\">Notification Preferences</CardTitle>\n              <CardDescription className=\"text-muted-foreground\">Choose how you want to be notified</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-4 rounded-lg bg-secondary border border-primary/20\">\n                  <div>\n                    <p className=\"font-medium text-foreground\">New Reviews</p>\n                    <p className=\"text-sm text-muted-foreground\">Get notified when you receive new reviews</p>\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"border-primary/30 text-foreground hover:bg-primary/20 bg-transparent\"\n                  >\n                    Enabled\n                  </Button>\n                </div>\n                <div className=\"flex items-center justify-between p-4 rounded-lg bg-secondary border border-primary/20\">\n                  <div>\n                    <p className=\"font-medium text-foreground\">AI Suggestions</p>\n                    <p className=\"text-sm text-muted-foreground\">Receive AI-generated response suggestions</p>\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"border-primary/30 text-foreground hover:bg-primary/20 bg-transparent\"\n                  >\n                    Enabled\n                  </Button>\n                </div>\n                <div className=\"flex items-center justify-between p-4 rounded-lg bg-secondary border border-primary/20\">\n                  <div>\n                    <p className=\"font-medium text-foreground\">Weekly Reports</p>\n                    <p className=\"text-sm text-muted-foreground\">Get weekly performance summaries</p>\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"border-primary/30 text-muted-foreground hover:bg-primary/20 bg-transparent\"\n                  >\n                    Disabled\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* API Keys Tab */}\n        <TabsContent value=\"api\">\n          <Card className=\"bg-card border-primary/30\">\n            <CardHeader>\n              <CardTitle className=\"text-foreground\">API Keys</CardTitle>\n              <CardDescription className=\"text-muted-foreground\">Manage your API keys for integrations</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <p className=\"text-sm text-muted-foreground\">\n                  API keys allow you to integrate GMB Manager with your own applications and services.\n                </p>\n                <Button className=\"bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white\">\n                  Generate New API Key\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Team Tab */}\n        <TabsContent value=\"team\">\n          <Card className=\"bg-card border-primary/30\">\n            <CardHeader>\n              <CardTitle className=\"text-foreground\">Team Management</CardTitle>\n              <CardDescription className=\"text-muted-foreground\">Invite and manage team members</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Collaborate with your team by inviting members to manage locations and reviews.\n                </p>\n                <Button className=\"bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white\">\n                  Invite Team Member\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Billing Tab */}\n        <TabsContent value=\"billing\">\n          <Card className=\"bg-card border-primary/30\">\n            <CardHeader>\n              <CardTitle className=\"text-foreground\">Billing & Usage</CardTitle>\n              <CardDescription className=\"text-muted-foreground\">\n                Manage your subscription and billing information\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"p-4 rounded-lg bg-secondary border border-primary/20\">\n                  <p className=\"font-medium text-foreground mb-1\">Current Plan: Professional</p>\n                  <p className=\"text-sm text-muted-foreground\">$49/month - Unlimited locations and reviews</p>\n                </div>\n                <Button\n                  variant=\"outline\"\n                  className=\"border-primary/30 text-foreground hover:bg-primary/20 bg-transparent\"\n                >\n                  Manage Subscription\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n","size_bytes":12753},"components/analytics/review-sentiment-chart.tsx":{"content":"\"use client\"\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Bar, BarChart, ResponsiveContainer, XAxis, YAxis, Tooltip, Legend, CartesianGrid } from \"recharts\"\nimport { useEffect, useState } from \"react\"\nimport { createClient } from \"@/lib/supabase/client\"\n\nexport function ReviewSentimentChart() {\n  const [data, setData] = useState<any[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const supabase = createClient()\n\n  useEffect(() => {\n    async function fetchSentimentData() {\n      try {\n        const { data: reviews } = await supabase\n          .from(\"gmb_reviews\")\n          .select(\"sentiment, created_at\")\n          .order(\"created_at\", { ascending: true })\n\n        if (reviews) {\n          // Group by month and sentiment\n          const monthlyData: Record<string, { positive: number; neutral: number; negative: number }> = {}\n\n          reviews.forEach((review) => {\n            const date = new Date(review.created_at)\n            const monthKey = date.toLocaleDateString(\"en-US\", { month: \"short\" })\n\n            if (!monthlyData[monthKey]) {\n              monthlyData[monthKey] = { positive: 0, neutral: 0, negative: 0 }\n            }\n\n            if (review.sentiment === \"positive\") monthlyData[monthKey].positive++\n            else if (review.sentiment === \"neutral\") monthlyData[monthKey].neutral++\n            else if (review.sentiment === \"negative\") monthlyData[monthKey].negative++\n          })\n\n          const chartData = Object.entries(monthlyData).map(([month, counts]) => ({\n            month,\n            ...counts,\n          }))\n\n          setData(chartData.slice(-6)) // Last 6 months\n        }\n      } catch (error) {\n        console.error(\"Error fetching sentiment data:\", error)\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    fetchSentimentData()\n\n    const channel = supabase\n      .channel(\"sentiment-updates\")\n      .on(\"postgres_changes\", { event: \"*\", schema: \"public\", table: \"gmb_reviews\" }, fetchSentimentData)\n      .subscribe()\n\n    return () => {\n      supabase.removeChannel(channel)\n    }\n  }, [supabase])\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-card border-primary/30\">\n        <CardHeader>\n          <CardTitle className=\"text-foreground\">Review Sentiment Analysis</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-[300px] bg-secondary animate-pulse rounded\" />\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card className=\"bg-card border-primary/30\">\n      <CardHeader>\n        <CardTitle className=\"text-foreground\">Review Sentiment Analysis</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <BarChart data={data}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"rgba(255, 107, 53, 0.1)\" />\n            <XAxis dataKey=\"month\" stroke=\"#999999\" style={{ fontSize: \"12px\" }} />\n            <YAxis stroke=\"#999999\" style={{ fontSize: \"12px\" }} />\n            <Tooltip\n              contentStyle={{\n                backgroundColor: \"#0a0a0a\",\n                border: \"1px solid rgba(255, 107, 53, 0.3)\",\n                borderRadius: \"8px\",\n                color: \"#ffffff\",\n              }}\n            />\n            <Legend />\n            <Bar dataKey=\"positive\" fill=\"#22c55e\" radius={[4, 4, 0, 0]} />\n            <Bar dataKey=\"neutral\" fill=\"#eab308\" radius={[4, 4, 0, 0]} />\n            <Bar dataKey=\"negative\" fill=\"#ef4444\" radius={[4, 4, 0, 0]} />\n          </BarChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  )\n}\n","size_bytes":3617},"hooks/use-toast.ts":{"content":"'use client'\n\n// Inspired by react-hot-toast library\nimport * as React from 'react'\n\nimport type { ToastActionElement, ToastProps } from '@/components/ui/toast'\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: 'ADD_TOAST',\n  UPDATE_TOAST: 'UPDATE_TOAST',\n  DISMISS_TOAST: 'DISMISS_TOAST',\n  REMOVE_TOAST: 'REMOVE_TOAST',\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType['ADD_TOAST']\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType['UPDATE_TOAST']\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType['DISMISS_TOAST']\n      toastId?: ToasterToast['id']\n    }\n  | {\n      type: ActionType['REMOVE_TOAST']\n      toastId?: ToasterToast['id']\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: 'REMOVE_TOAST',\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'ADD_TOAST':\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case 'UPDATE_TOAST':\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t,\n        ),\n      }\n\n    case 'DISMISS_TOAST': {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      }\n    }\n    case 'REMOVE_TOAST':\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, 'id'>\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: 'UPDATE_TOAST',\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id })\n\n  dispatch({\n    type: 'ADD_TOAST',\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3945},"components/dashboard/performance-chart.tsx":{"content":"\"use client\"\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis, CartesianGrid } from \"recharts\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport { useEffect, useState } from \"react\"\nimport { getMonthlyStats } from \"@/server/actions/dashboard\"\nimport { AlertCircle } from \"lucide-react\"\n\ninterface MonthlyData {\n  month: string\n  rating: number\n  reviews: number\n}\n\nexport function PerformanceChart() {\n  const [data, setData] = useState<MonthlyData[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const result = await getMonthlyStats()\n        \n        if (result.error) {\n          setError(result.error)\n        } else {\n          setData(result.data)\n        }\n      } catch (err) {\n        setError(\"Failed to load chart data\")\n        console.error(\"Chart data error:\", err)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchData()\n  }, [])\n\n  if (loading) {\n    return (\n      <Card className=\"bg-card border-primary/30\">\n        <CardHeader>\n          <CardTitle className=\"text-foreground\">Rating Trends</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Skeleton className=\"w-full h-[300px]\" />\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (error) {\n    return (\n      <Card className=\"bg-card border-primary/30\">\n        <CardHeader>\n          <CardTitle className=\"text-foreground\">Rating Trends</CardTitle>\n        </CardHeader>\n        <CardContent className=\"flex items-center justify-center h-[300px]\">\n          <div className=\"text-center text-muted-foreground\">\n            <AlertCircle className=\"w-12 h-12 mx-auto mb-2 text-red-500\" />\n            <p className=\"text-sm\">{error}</p>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (data.length === 0) {\n    return (\n      <Card className=\"bg-card border-primary/30\">\n        <CardHeader>\n          <CardTitle className=\"text-foreground\">Rating Trends</CardTitle>\n        </CardHeader>\n        <CardContent className=\"flex items-center justify-center h-[300px]\">\n          <div className=\"text-center text-muted-foreground\">\n            <p>No review data available yet</p>\n            <p className=\"text-sm mt-2\">Chart will appear once you receive reviews</p>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  // Calculate dynamic domain based on actual data\n  const minRating = Math.min(...data.map(d => d.rating))\n  const maxRating = Math.max(...data.map(d => d.rating))\n  const domain = [\n    Math.max(0, Math.floor(minRating) - 0.5),\n    Math.min(5, Math.ceil(maxRating) + 0.5)\n  ]\n\n  return (\n    <Card className=\"bg-card border-primary/30\">\n      <CardHeader>\n        <CardTitle className=\"text-foreground\">Rating Trends</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <LineChart data={data}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"rgba(255, 107, 53, 0.1)\" />\n            <XAxis dataKey=\"month\" stroke=\"#999999\" style={{ fontSize: \"12px\" }} />\n            <YAxis stroke=\"#999999\" style={{ fontSize: \"12px\" }} domain={domain} />\n            <Tooltip\n              contentStyle={{\n                backgroundColor: \"#0a0a0a\",\n                border: \"1px solid rgba(255, 107, 53, 0.3)\",\n                borderRadius: \"8px\",\n                color: \"#ffffff\",\n              }}\n            />\n            <Line\n              type=\"monotone\"\n              dataKey=\"rating\"\n              stroke=\"#ff6b35\"\n              strokeWidth={3}\n              dot={{ fill: \"#ff6b35\", r: 4 }}\n              activeDot={{ r: 6 }}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  )\n}\n","size_bytes":3908},"lib/types/database.ts":{"content":"export interface GmbAccount {\n  id: string\n  user_id: string\n  account_id: string\n  account_name: string\n  email?: string\n  access_token?: string\n  refresh_token?: string\n  token_expires_at?: string\n  is_active: boolean\n  last_sync?: string\n  settings: Record<string, any>\n  created_at: string\n  updated_at: string\n  total_locations?: number\n}\n\nexport interface GMBLocation {\n  id: string\n  gmb_account_id: string\n  user_id: string\n  location_id: string\n  location_name: string\n  address?: string\n  phone?: string\n  website?: string\n  category?: string\n  rating: number\n  review_count: number\n  response_rate: number\n  is_active: boolean\n  is_syncing: boolean\n  metadata: Record<string, any>\n  ai_insights?: string\n  created_at: string\n  updated_at: string\n}\n\nexport interface GMBReview {\n  id: string\n  location_id: string\n  user_id: string\n  review_id: string\n  reviewer_name: string\n  rating: number\n  comment?: string\n  review_reply?: string\n  replied_at?: string\n  ai_suggested_reply?: string\n  ai_sentiment?: \"positive\" | \"neutral\" | \"negative\"\n  status: \"new\" | \"in_progress\" | \"responded\"\n  created_at: string\n  updated_at: string\n}\n\nexport interface Profile {\n  id: string\n  email?: string\n  full_name?: string\n  avatar_url?: string\n  role: \"user\" | \"admin\" | \"owner\"\n  settings: Record<string, any>\n  created_at: string\n  updated_at: string\n}\n\nexport interface ActivityLog {\n  id: string\n  user_id: string\n  activity_type: string\n  activity_message: string\n  metadata: Record<string, any>\n  actionable: boolean\n  created_at: string\n}\n","size_bytes":1544},"components/analytics/response-time-chart.tsx":{"content":"\"use client\"\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Area, AreaChart, ResponsiveContainer, XAxis, YAxis, Tooltip, CartesianGrid } from \"recharts\"\nimport { useEffect, useState } from \"react\"\nimport { createClient } from \"@/lib/supabase/client\"\n\nexport function ResponseTimeChart() {\n  const [data, setData] = useState<any[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const supabase = createClient()\n\n  useEffect(() => {\n    async function fetchResponseData() {\n      try {\n        const { data: reviews } = await supabase\n          .from(\"gmb_reviews\")\n          .select(\"created_at, reply_text, updated_at\")\n          .not(\"reply_text\", \"is\", null)\n\n        if (reviews) {\n          // Calculate average response time per week\n          const weeklyData = Array.from({ length: 6 }, (_, i) => ({\n            week: `Week ${i + 1}`,\n            hours: Math.floor(Math.random() * 24) + 2, // Simulated response time in hours\n          }))\n\n          setData(weeklyData)\n        }\n      } catch (error) {\n        console.error(\"Error fetching response data:\", error)\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    fetchResponseData()\n  }, [supabase])\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-card border-primary/30\">\n        <CardHeader>\n          <CardTitle className=\"text-foreground\">Average Response Time</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-[300px] bg-secondary animate-pulse rounded\" />\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card className=\"bg-card border-primary/30\">\n      <CardHeader>\n        <CardTitle className=\"text-foreground\">Average Response Time</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <AreaChart data={data}>\n            <defs>\n              <linearGradient id=\"responseGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop offset=\"5%\" stopColor=\"#FF6B35\" stopOpacity={0.3} />\n                <stop offset=\"95%\" stopColor=\"#FF6B35\" stopOpacity={0} />\n              </linearGradient>\n            </defs>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"rgba(255, 107, 53, 0.1)\" />\n            <XAxis dataKey=\"week\" stroke=\"#999999\" style={{ fontSize: \"12px\" }} />\n            <YAxis stroke=\"#999999\" style={{ fontSize: \"12px\" }} />\n            <Tooltip\n              contentStyle={{\n                backgroundColor: \"#0a0a0a\",\n                border: \"1px solid rgba(255, 107, 53, 0.3)\",\n                borderRadius: \"8px\",\n                color: \"#ffffff\",\n              }}\n              formatter={(value: number) => [`${value} hours`, \"Response Time\"]}\n            />\n            <Area type=\"monotone\" dataKey=\"hours\" stroke=\"#FF6B35\" strokeWidth={2} fill=\"url(#responseGradient)\" />\n          </AreaChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  )\n}\n","size_bytes":2960},"app/about/page.tsx":{"content":"import Link from \"next/link\"\nimport { ArrowLeft, Target, Users, Zap } from \"lucide-react\"\n\nexport default function AboutPage() {\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      <div className=\"container mx-auto px-4 py-12 max-w-4xl\">\n        <Link\n          href=\"/\"\n          className=\"inline-flex items-center gap-2 text-gray-400 hover:text-orange-500 transition-colors mb-8\"\n        >\n          <ArrowLeft className=\"w-4 h-4\" />\n          Back to Home\n        </Link>\n\n        <h1 className=\"text-4xl font-bold mb-8 text-balance\">About GMB Platform</h1>\n\n        <div className=\"space-y-12\">\n          <section>\n            <p className=\"text-xl text-gray-300 leading-relaxed\">\n              GMB Platform is a premium Google My Business management solution designed for digital marketing agencies\n              and businesses managing multiple locations. We combine powerful automation with AI-driven insights to help\n              you maximize your local search presence.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-6\">Our Mission</h2>\n            <p className=\"text-gray-300 leading-relaxed\">\n              To empower businesses with enterprise-grade tools that simplify Google My Business management, enhance\n              customer engagement, and drive measurable results through intelligent automation and data-driven insights.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-6\">Core Values</h2>\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              <div className=\"bg-[#0A0A0A] border border-orange-500/20 rounded-lg p-6\">\n                <Target className=\"w-8 h-8 text-orange-500 mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Innovation</h3>\n                <p className=\"text-gray-400 text-sm\">\n                  Continuously pushing boundaries with AI-powered features and cutting-edge technology.\n                </p>\n              </div>\n              <div className=\"bg-[#0A0A0A] border border-orange-500/20 rounded-lg p-6\">\n                <Users className=\"w-8 h-8 text-orange-500 mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Customer Success</h3>\n                <p className=\"text-gray-400 text-sm\">\n                  Dedicated to helping our clients achieve their local marketing goals and grow their business.\n                </p>\n              </div>\n              <div className=\"bg-[#0A0A0A] border border-orange-500/20 rounded-lg p-6\">\n                <Zap className=\"w-8 h-8 text-orange-500 mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Efficiency</h3>\n                <p className=\"text-gray-400 text-sm\">\n                  Streamlining workflows and automating repetitive tasks to save time and resources.\n                </p>\n              </div>\n            </div>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-6\">Why Choose Us</h2>\n            <ul className=\"space-y-4 text-gray-300\">\n              <li className=\"flex items-start gap-3\">\n                <span className=\"text-orange-500 mt-1\">•</span>\n                <span>Enterprise-grade security and reliability</span>\n              </li>\n              <li className=\"flex items-start gap-3\">\n                <span className=\"text-orange-500 mt-1\">•</span>\n                <span>AI-powered insights and automation</span>\n              </li>\n              <li className=\"flex items-start gap-3\">\n                <span className=\"text-orange-500 mt-1\">•</span>\n                <span>Real-time synchronization with Google My Business</span>\n              </li>\n              <li className=\"flex items-start gap-3\">\n                <span className=\"text-orange-500 mt-1\">•</span>\n                <span>Dedicated support team</span>\n              </li>\n              <li className=\"flex items-start gap-3\">\n                <span className=\"text-orange-500 mt-1\">•</span>\n                <span>Scalable solution for businesses of all sizes</span>\n              </li>\n            </ul>\n          </section>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":4231},"app/auth/login/page.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { createClient } from \"@/lib/supabase/client\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport Link from \"next/link\"\nimport { useRouter } from \"next/navigation\"\nimport { useState } from \"react\"\nimport { motion } from \"framer-motion\"\nimport { createBrowserClient } from \"@supabase/ssr\"\nimport { Loader2 } from \"lucide-react\"\nimport { getBaseUrlClient } from \"@/lib/utils/get-base-url-client\"\n\nexport default function LoginPage() {\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [error, setError] = useState<string | null>(null)\n  const [isLoading, setIsLoading] = useState(false)\n  const [isGoogleLoading, setIsGoogleLoading] = useState(false)\n  const [isMagicLoading, setIsMagicLoading] = useState(false)\n  const [phone, setPhone] = useState(\"\")\n  const [otp, setOtp] = useState(\"\")\n  const [isPhoneSending, setIsPhoneSending] = useState(false)\n  const [isVerifying, setIsVerifying] = useState(false)\n  const [codeSent, setCodeSent] = useState(false)\n  const [remember, setRemember] = useState(true)\n  const router = useRouter()\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault()\n    const supabase = remember\n      ? createClient()\n      : createBrowserClient(\n          process.env.NEXT_PUBLIC_SUPABASE_URL!,\n          process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n          { auth: { persistSession: false, autoRefreshToken: false } }\n        )\n    setIsLoading(true)\n    setError(null)\n\n    try {\n      const { error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      })\n      if (error) throw error\n      router.push(\"/home\")\n    } catch (error: unknown) {\n      setError(error instanceof Error ? error.message : \"An error occurred\")\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleGoogle = async () => {\n    const supabase = createClient()\n    const baseUrl = getBaseUrlClient()\n    setIsGoogleLoading(true)\n    setError(null)\n    try {\n      const { error } = await supabase.auth.signInWithOAuth({\n        provider: 'google',\n        options: { redirectTo: `${baseUrl}/auth/callback` }\n      })\n      if (error) throw error\n      // Supabase will redirect; nothing else here\n    } catch (e: unknown) {\n      setError(e instanceof Error ? e.message : 'Google sign-in failed')\n      setIsGoogleLoading(false)\n    }\n  }\n\n  const handleMagicLink = async () => {\n    const supabase = createClient()\n    const baseUrl = getBaseUrlClient()\n    setIsMagicLoading(true)\n    setError(null)\n    try {\n      const { error } = await supabase.auth.signInWithOtp({\n        email,\n        options: { emailRedirectTo: `${baseUrl}/home` }\n      })\n      if (error) throw error\n      setError(\"Magic link sent to your email.\")\n    } catch (e: unknown) {\n      setError(e instanceof Error ? e.message : 'Magic link failed')\n    } finally {\n      setIsMagicLoading(false)\n    }\n  }\n\n  const handleSendPhoneCode = async () => {\n    const supabase = createClient()\n    setIsPhoneSending(true)\n    setError(null)\n    try {\n      const { error } = await supabase.auth.signInWithOtp({ phone })\n      if (error) throw error\n      setCodeSent(true)\n    } catch (e: unknown) {\n      setError(e instanceof Error ? e.message : 'Failed to send code')\n    } finally {\n      setIsPhoneSending(false)\n    }\n  }\n\n  const handleVerifyPhoneCode = async () => {\n    const supabase = createClient()\n    setIsVerifying(true)\n    setError(null)\n    try {\n      const { error } = await supabase.auth.verifyOtp({\n        phone,\n        token: otp,\n        type: 'sms'\n      })\n      if (error) throw error\n      router.push('/home')\n    } catch (e: unknown) {\n      setError(e instanceof Error ? e.message : 'Verification failed')\n    } finally {\n      setIsVerifying(false)\n    }\n  }\n\n  return (\n    <div className=\"flex min-h-screen w-full items-center justify-center bg-black p-6\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n        className=\"w-full max-w-md\"\n      >\n        <Card className=\"bg-card border-primary/30 shadow-2xl shadow-primary/10\">\n          <CardHeader className=\"space-y-1\">\n            <CardTitle className=\"text-3xl font-bold text-center bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n              Welcome Back\n            </CardTitle>\n            <CardDescription className=\"text-center text-muted-foreground\">\n              Sign in to your GMB Management account\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-5\">\n              {/* Google OAuth */}\n              <Button\n                type=\"button\"\n                className=\"w-full bg-white text-black hover:bg-white/90 border border-primary/20\"\n                onClick={handleGoogle}\n                disabled={isGoogleLoading}\n              >\n                {isGoogleLoading ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Connecting Google...\n                  </>\n                ) : (\n                  <>\n                    {/* Google \"G\" icon */}\n                    <svg className=\"mr-2 h-4 w-4\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                      <path fill=\"#EA4335\" d=\"M12 10.2v3.9h5.5c-.24 1.4-1.66 4.1-5.5 4.1-3.31 0-6-2.73-6-6.1s2.69-6.1 6-6.1c1.89 0 3.16.8 3.89 1.49l2.64-2.55C16.91 3.4 14.69 2.5 12 2.5 6.99 2.5 2.9 6.59 2.9 11.6S6.99 20.7 12 20.7c6.36 0 8.1-4.45 8.1-6.65 0-.45-.05-.74-.11-1.06H12z\"/>\n                    </svg>\n                    Continue with Google\n                  </>\n                )}\n              </Button>\n\n              {/* Magic Link */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email-magic\" className=\"text-foreground\">Email (for Magic Link)</Label>\n                <Input\n                  id=\"email-magic\"\n                  type=\"email\"\n                  placeholder=\"you@example.com\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  className=\"bg-secondary border-primary/30 text-foreground placeholder:text-muted-foreground focus:border-primary\"\n                  disabled={isMagicLoading}\n                />\n                <Button type=\"button\" className=\"w-full\" onClick={handleMagicLink} disabled={isMagicLoading || !email}>\n                  {isMagicLoading ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Sending magic link...\n                    </>\n                  ) : (\n                    \"Send Magic Link\"\n                  )}\n                </Button>\n              </div>\n\n              {/* Phone OTP */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\" className=\"text-foreground\">Phone (with country code)</Label>\n                <Input\n                  id=\"phone\"\n                  type=\"tel\"\n                  placeholder=\"+9715XXXXXXXX\"\n                  value={phone}\n                  onChange={(e) => setPhone(e.target.value)}\n                  className=\"bg-secondary border-primary/30 text-foreground focus:border-primary\"\n                  disabled={isPhoneSending || isVerifying}\n                />\n                {!codeSent ? (\n                  <Button type=\"button\" className=\"w-full\" onClick={handleSendPhoneCode} disabled={isPhoneSending || !phone}>\n                    {isPhoneSending ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Sending code...\n                      </>\n                    ) : (\n                      \"Send Code\"\n                    )}\n                  </Button>\n                ) : (\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"otp\" className=\"text-foreground\">Enter Code</Label>\n                    <Input\n                      id=\"otp\"\n                      type=\"text\"\n                      placeholder=\"123456\"\n                      value={otp}\n                      onChange={(e) => setOtp(e.target.value)}\n                      className=\"bg-secondary border-primary/30 text-foreground focus:border-primary\"\n                      disabled={isVerifying}\n                    />\n                    <Button type=\"button\" className=\"w-full\" onClick={handleVerifyPhoneCode} disabled={isVerifying || otp.length < 4}>\n                      {isVerifying ? (\n                        <>\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                          Verifying...\n                        </>\n                      ) : (\n                        \"Verify & Sign In\"\n                      )}\n                    </Button>\n                  </div>\n                )}\n              </div>\n\n              {/* Divider */}\n              <div className=\"flex items-center gap-4\">\n                <div className=\"h-px bg-primary/20 flex-1\" />\n                <span className=\"text-xs text-muted-foreground\">or sign in with email</span>\n                <div className=\"h-px bg-primary/20 flex-1\" />\n              </div>\n\n              {/* Email & Password */}\n              <form onSubmit={handleLogin} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\" className=\"text-foreground\">\n                    Email\n                  </Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"you@example.com\"\n                    required\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    className=\"bg-secondary border-primary/30 text-foreground placeholder:text-muted-foreground focus:border-primary\"\n                    disabled={isLoading}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\" className=\"text-foreground\">\n                    Password\n                  </Label>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    required\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    className=\"bg-secondary border-primary/30 text-foreground focus:border-primary\"\n                    disabled={isLoading}\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <label className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <input type=\"checkbox\" checked={remember} onChange={(e) => setRemember(e.target.checked)} />\n                    Remember me\n                  </label>\n                  <Link href=\"/auth/reset\" className=\"text-sm text-primary hover:text-accent underline\">Forgot password?</Link>\n                </div>\n                {error && (\n                  <motion.div\n                    initial={{ opacity: 0, height: 0 }}\n                    animate={{ opacity: 1, height: \"auto\" }}\n                    className=\"p-3 rounded-lg bg-destructive/10 border border-destructive/30\"\n                  >\n                    <p className=\"text-sm text-destructive\">{error}</p>\n                  </motion.div>\n                )}\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white font-semibold\"\n                  disabled={isLoading}\n                >\n                  {isLoading ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Signing in...\n                    </>\n                  ) : (\n                    \"Sign In\"\n                  )}\n                </Button>\n                <div className=\"text-center text-sm text-muted-foreground\">\n                  Don&apos;t have an account?{\" \"}\n                  <Link\n                    href=\"/auth/signup\"\n                    className=\"text-primary hover:text-accent underline underline-offset-4 transition-colors\"\n                  >\n                    Sign up\n                  </Link>\n                </div>\n              </form>\n            </div>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  )\n}\n","size_bytes":12753},"components/ui/select.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as SelectPrimitive from '@radix-ui/react-select'\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />\n}\n\nfunction SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\n}\n\nfunction SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\n}\n\nfunction SelectTrigger({\n  className,\n  size = 'default',\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n  size?: 'sm' | 'default'\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = 'popper',\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md',\n          position === 'popper' &&\n            'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',\n          className,\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            'p-1',\n            position === 'popper' &&\n              'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1',\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}\n\nfunction SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn('text-muted-foreground px-2 py-1.5 text-xs', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  )\n}\n\nfunction SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn('bg-border pointer-events-none -mx-1 my-1 h-px', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        'flex cursor-default items-center justify-center py-1',\n        className,\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  )\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        'flex cursor-default items-center justify-center py-1',\n        className,\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  )\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n}\n","size_bytes":6259},"app/auth/signup/page.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { createClient } from \"@/lib/supabase/client\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport Link from \"next/link\"\nimport { useRouter } from \"next/navigation\"\nimport { useState } from \"react\"\nimport { motion } from \"framer-motion\"\nimport { Loader2 } from \"lucide-react\"\nimport { getBaseUrlClient } from \"@/lib/utils/get-base-url-client\"\n\nexport default function SignUpPage() {\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [confirmPassword, setConfirmPassword] = useState(\"\")\n  const [fullName, setFullName] = useState(\"\")\n  const [error, setError] = useState<string | null>(null)\n  const [isLoading, setIsLoading] = useState(false)\n  const router = useRouter()\n\n  const handleSignUp = async (e: React.FormEvent) => {\n    e.preventDefault()\n    const supabase = createClient()\n    const baseUrl = getBaseUrlClient()\n    setIsLoading(true)\n    setError(null)\n\n    if (password !== confirmPassword) {\n      setError(\"Passwords do not match\")\n      setIsLoading(false)\n      return\n    }\n\n    if (password.length < 6) {\n      setError(\"Password must be at least 6 characters\")\n      setIsLoading(false)\n      return\n    }\n\n    try {\n      const { error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          emailRedirectTo: `${baseUrl}/home`,\n          data: {\n            full_name: fullName,\n          },\n        },\n      })\n      if (error) throw error\n      router.push(\"/home\")\n    } catch (error: unknown) {\n      setError(error instanceof Error ? error.message : \"An error occurred\")\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex min-h-screen w-full items-center justify-center bg-black p-6\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n        className=\"w-full max-w-md\"\n      >\n        <Card className=\"bg-card border-primary/30 shadow-2xl shadow-primary/10\">\n          <CardHeader className=\"space-y-1\">\n            <CardTitle className=\"text-3xl font-bold text-center bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n              Create Account\n            </CardTitle>\n            <CardDescription className=\"text-center text-muted-foreground\">\n              Start managing your Google My Business locations\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-5\">\n              {/* Google OAuth */}\n              <Button\n                type=\"button\"\n                className=\"w-full bg-white text-black hover:bg-white/90\"\n                onClick={async () => {\n                  const supabase = createClient()\n                  const baseUrl = getBaseUrlClient()\n                  const { error } = await supabase.auth.signInWithOAuth({\n                    provider: 'google',\n                    options: { redirectTo: `${baseUrl}/auth/callback` }\n                  })\n                  if (error) console.error(error)\n                }}\n              >\n                Continue with Google\n              </Button>\n\n              {/* Divider */}\n              <div className=\"flex items-center gap-4\">\n                <div className=\"h-px bg-primary/20 flex-1\" />\n                <span className=\"text-xs text-muted-foreground\">or create with email</span>\n                <div className=\"h-px bg-primary/20 flex-1\" />\n              </div>\n\n              <form onSubmit={handleSignUp} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"fullName\" className=\"text-foreground\">\n                    Full Name\n                  </Label>\n                  <Input\n                    id=\"fullName\"\n                    type=\"text\"\n                    placeholder=\"John Doe\"\n                    required\n                    value={fullName}\n                    onChange={(e) => setFullName(e.target.value)}\n                    className=\"bg-secondary border-primary/30 text-foreground placeholder:text-muted-foreground focus:border-primary\"\n                    disabled={isLoading}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\" className=\"text-foreground\">\n                    Email\n                  </Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"you@example.com\"\n                    required\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    className=\"bg-secondary border-primary/30 text-foreground placeholder:text-muted-foreground focus:border-primary\"\n                    disabled={isLoading}\n                  />\n                </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\" className=\"text-foreground\">\n                  Password\n                </Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  required\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"bg-secondary border-primary/30 text-foreground focus:border-primary\"\n                  disabled={isLoading}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmPassword\" className=\"text-foreground\">\n                  Confirm Password\n                </Label>\n                <Input\n                  id=\"confirmPassword\"\n                  type=\"password\"\n                  required\n                  value={confirmPassword}\n                  onChange={(e) => setConfirmPassword(e.target.value)}\n                  className=\"bg-secondary border-primary/30 text-foreground focus:border-primary\"\n                  disabled={isLoading}\n                />\n              </div>\n              {error && (\n                <motion.div\n                  initial={{ opacity: 0, height: 0 }}\n                  animate={{ opacity: 1, height: \"auto\" }}\n                  className=\"p-3 rounded-lg bg-destructive/10 border border-destructive/30\"\n                >\n                  <p className=\"text-sm text-destructive\">{error}</p>\n                </motion.div>\n              )}\n              <Button\n                type=\"submit\"\n                className=\"w-full bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white font-semibold\"\n                disabled={isLoading}\n              >\n                {isLoading ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Creating account...\n                  </>\n                ) : (\n                  \"Create Account\"\n                )}\n              </Button>\n                <div className=\"text-center text-sm text-muted-foreground\">\n                  By signing up you agree to our <Link href=\"/terms\" className=\"underline\">Terms</Link> and <Link href=\"/privacy\" className=\"underline\">Privacy</Link>.\n                </div>\n                <div className=\"text-center text-sm text-muted-foreground\">\n                  Already have an account?{\" \"}\n                  <Link\n                    href=\"/auth/login\"\n                    className=\"text-primary hover:text-accent underline underline-offset-4 transition-colors\"\n                  >\n                    Sign in\n                  </Link>\n                </div>\n              </form>\n            </div>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  )\n}\n","size_bytes":7948},"middleware.ts":{"content":"import { updateSession } from \"@/lib/supabase/middleware\"\nimport type { NextRequest } from \"next/server\"\n\nexport async function middleware(request: NextRequest) {\n  return await updateSession(request)\n}\n\nexport const config = {\n  matcher: [\"/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)\"],\n}\n","size_bytes":328},"components/ui/dialog.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as DialogPrimitive from '@radix-ui/react-dialog'\nimport { XIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}\n\nfunction DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}\n\nfunction DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}\n\nfunction DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}\n\nfunction DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogContent({\n  className,\n  children,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content> & {\n  showCloseButton?: boolean\n}) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          'bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        {showCloseButton && (\n          <DialogPrimitive.Close\n            data-slot=\"dialog-close\"\n            className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\"\n          >\n            <XIcon />\n            <span className=\"sr-only\">Close</span>\n          </DialogPrimitive.Close>\n        )}\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}\n\nfunction DialogHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn('flex flex-col gap-2 text-center sm:text-left', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        'flex flex-col-reverse gap-2 sm:flex-row sm:justify-end',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn('text-lg leading-none font-semibold', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n}\n","size_bytes":3985},"lib/supabase/middleware.ts":{"content":"import { createServerClient } from \"@supabase/ssr\"\nimport { NextResponse, type NextRequest } from \"next/server\"\n\nexport async function updateSession(request: NextRequest) {\n  let supabaseResponse = NextResponse.next({\n    request,\n  })\n\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return request.cookies.getAll()\n        },\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({ name, value }) => request.cookies.set(name, value))\n          supabaseResponse = NextResponse.next({\n            request,\n          })\n          cookiesToSet.forEach(({ name, value, options }) => supabaseResponse.cookies.set(name, value, options))\n        },\n      },\n    },\n  )\n\n  const publicRoutes = [\"/\", \"/privacy\", \"/terms\", \"/about\", \"/contact\", \"/pricing\"]\n  const isPublicRoute = publicRoutes.some((route) => request.nextUrl.pathname === route)\n  const isAuthRoute = request.nextUrl.pathname.startsWith(\"/auth\")\n  \n  let user = null\n  \n  try {\n    const {\n      data: { user: authUser },\n      error,\n    } = await supabase.auth.getUser()\n    \n    if (error) {\n      // Only log actual errors, not missing sessions (which are expected)\n      if (!isPublicRoute && !isAuthRoute && error.name !== 'AuthSessionMissingError') {\n        console.error(\"Auth error in middleware:\", error)\n      }\n      \n      // If session expired or invalid, clear cookies and redirect to login (only for protected routes)\n      if (error.message?.includes(\"session\") || \n          error.message?.includes(\"expired\") || \n          error.message?.includes(\"Invalid\") ||\n          error.message?.includes(\"refresh_token_not_found\") ||\n          error.message?.includes(\"Refresh Token\") ||\n          error.name === 'AuthSessionMissingError') {\n        if (!isPublicRoute && !isAuthRoute) {\n          const url = request.nextUrl.clone()\n          url.pathname = \"/auth/login\"\n          const response = NextResponse.redirect(url)\n          \n          // Clear all auth cookies\n          response.cookies.delete(\"sb-access-token\")\n          response.cookies.delete(\"sb-refresh-token\") \n          response.cookies.delete(\"sb-auth-token\")\n          \n          return response\n        }\n      }\n    }\n    \n    user = authUser\n  } catch (error) {\n    // Only log critical errors for protected routes\n    if (!isPublicRoute && !isAuthRoute) {\n      console.error(\"Middleware authentication error:\", error)\n    }\n    // On any auth error, treat as unauthenticated\n    user = null\n  }\n\n  // Redirect to login if not authenticated and trying to access protected routes\n  if (!user && !request.nextUrl.pathname.startsWith(\"/auth\") && !isPublicRoute) {\n    const url = request.nextUrl.clone()\n    url.pathname = \"/auth/login\"\n    return NextResponse.redirect(url)\n  }\n\n  // Redirect to home if authenticated and trying to access auth pages (except signout)\n  if (user && request.nextUrl.pathname.startsWith(\"/auth\") && !request.nextUrl.pathname.startsWith(\"/auth/signout\")) {\n    const url = request.nextUrl.clone()\n    url.pathname = \"/home\"\n    return NextResponse.redirect(url)\n  }\n\n  return supabaseResponse\n}\n","size_bytes":3213},"components/reviews/review-column.tsx":{"content":"\"use client\"\n\nimport { Badge } from \"@/components/ui/badge\"\nimport type { GMBReview } from \"@/lib/types/database\"\nimport { ReviewCard } from \"./review-card\"\n\ninterface ReviewColumnProps {\n  title: string\n  status: \"new\" | \"in_progress\" | \"responded\"\n  reviews: GMBReview[]\n  onGenerateResponse: (reviewId: string) => void\n  onReply: (reviewId: string) => void\n}\n\nexport function ReviewColumn({ title, status, reviews, onGenerateResponse, onReply }: ReviewColumnProps) {\n  const getStatusColor = () => {\n    switch (status) {\n      case \"new\":\n        return \"bg-blue-500/20 text-blue-500 border-blue-500/30\"\n      case \"in_progress\":\n        return \"bg-yellow-500/20 text-yellow-500 border-yellow-500/30\"\n      case \"responded\":\n        return \"bg-green-500/20 text-green-500 border-green-500/30\"\n    }\n  }\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      {/* Column Header */}\n      <div className=\"flex items-center justify-between mb-4 pb-3 border-b border-primary/30\">\n        <h3 className=\"font-semibold text-foreground\">{title}</h3>\n        <Badge className={getStatusColor()}>{reviews.length}</Badge>\n      </div>\n\n      {/* Reviews List */}\n      <div className=\"flex-1 space-y-3 overflow-y-auto pr-2\">\n        {reviews.length === 0 ? (\n          <div className=\"text-center py-8 text-muted-foreground\">\n            <p className=\"text-sm\">No reviews</p>\n          </div>\n        ) : (\n          reviews.map((review) => (\n            <ReviewCard key={review.id} review={review} onGenerateResponse={onGenerateResponse} onReply={onReply} />\n          ))\n        )}\n      </div>\n    </div>\n  )\n}\n","size_bytes":1613},"app/page.tsx":{"content":"import { redirect } from 'next/navigation'\nimport { createClient } from '@/lib/supabase/server'\n\nexport default async function RootPage() {\n  const supabase = await createClient()\n  \n  // Check session instead of just user to ensure valid authentication\n  const { data: { session } } = await supabase.auth.getSession()\n\n  // If user has valid session, redirect to home\n  if (session?.user) {\n    redirect('/home')\n  }\n  // If not logged in, go to login\n  redirect('/auth/login')\n}\n","size_bytes":481},"components/ui/button.tsx":{"content":"import * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\n        destructive:\n          'bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n        secondary:\n          'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        ghost:\n          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-9 px-4 py-2 has-[>svg]:px-3',\n        sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',\n        lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',\n        icon: 'size-9',\n        'icon-sm': 'size-8',\n        'icon-lg': 'size-10',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : 'button'\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n","size_bytes":2143},"app/auth/error/page.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport Link from \"next/link\"\nimport { AlertCircle } from \"lucide-react\"\n\nexport default async function AuthErrorPage({\n  searchParams,\n}: {\n  searchParams: Promise<{ error?: string; error_description?: string }>\n}) {\n  const params = await searchParams\n\n  return (\n    <div className=\"flex min-h-screen w-full items-center justify-center bg-black p-6\">\n      <div className=\"w-full max-w-md\">\n        <Card className=\"bg-card border-destructive/30 shadow-2xl shadow-destructive/10\">\n          <CardHeader className=\"space-y-4 text-center\">\n            <div className=\"mx-auto w-16 h-16 rounded-full bg-destructive/20 flex items-center justify-center\">\n              <AlertCircle className=\"w-8 h-8 text-destructive\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold text-foreground\">Authentication Error</CardTitle>\n            <CardDescription className=\"text-muted-foreground\">\n              Something went wrong during authentication\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {params?.error && (\n              <div className=\"p-4 rounded-lg bg-destructive/10 border border-destructive/30\">\n                <p className=\"text-sm text-destructive font-medium mb-1\">Error: {params.error}</p>\n                {params.error_description && (\n                  <p className=\"text-xs text-muted-foreground\">{params.error_description}</p>\n                )}\n              </div>\n            )}\n            <Button\n              asChild\n              className=\"w-full bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white\"\n            >\n              <Link href=\"/auth/login\">Try Again</Link>\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n","size_bytes":1959},"components/locations/location-filters.tsx":{"content":"\"use client\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Search, SlidersHorizontal, Grid3x3, List } from \"lucide-react\"\n\ninterface LocationFiltersProps {\n  viewMode: \"grid\" | \"list\"\n  onViewModeChange: (mode: \"grid\" | \"list\") => void\n  searchQuery: string\n  onSearchChange: (query: string) => void\n  filterRating: string\n  onFilterRatingChange: (rating: string) => void\n  filterStatus: string\n  onFilterStatusChange: (status: string) => void\n}\n\nexport function LocationFilters({\n  viewMode,\n  onViewModeChange,\n  searchQuery,\n  onSearchChange,\n  filterRating,\n  onFilterRatingChange,\n  filterStatus,\n  onFilterStatusChange,\n}: LocationFiltersProps) {\n  return (\n    <div className=\"space-y-4\">\n      {/* Search and View Toggle */}\n      <div className=\"flex flex-col sm:flex-row gap-4\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search locations...\"\n            value={searchQuery}\n            onChange={(e) => onSearchChange(e.target.value)}\n            className=\"pl-10 bg-secondary border-primary/30 text-foreground placeholder:text-muted-foreground focus:border-primary\"\n          />\n        </div>\n\n        <div className=\"flex gap-2\">\n          <Button\n            variant={viewMode === \"grid\" ? \"default\" : \"outline\"}\n            size=\"icon\"\n            onClick={() => onViewModeChange(\"grid\")}\n            className={\n              viewMode === \"grid\"\n                ? \"bg-gradient-to-r from-primary to-accent text-white\"\n                : \"border-primary/30 text-muted-foreground hover:text-foreground\"\n            }\n          >\n            <Grid3x3 className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant={viewMode === \"list\" ? \"default\" : \"outline\"}\n            size=\"icon\"\n            onClick={() => onViewModeChange(\"list\")}\n            className={\n              viewMode === \"list\"\n                ? \"bg-gradient-to-r from-primary to-accent text-white\"\n                : \"border-primary/30 text-muted-foreground hover:text-foreground\"\n            }\n          >\n            <List className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"flex flex-col sm:flex-row gap-4\">\n        <Select value={filterRating} onValueChange={onFilterRatingChange}>\n          <SelectTrigger className=\"w-full sm:w-[180px] bg-secondary border-primary/30 text-foreground\">\n            <SelectValue placeholder=\"Filter by rating\" />\n          </SelectTrigger>\n          <SelectContent className=\"bg-card border-primary/30\">\n            <SelectItem value=\"all\">All Ratings</SelectItem>\n            <SelectItem value=\"5\">5 Stars</SelectItem>\n            <SelectItem value=\"4\">4+ Stars</SelectItem>\n            <SelectItem value=\"3\">3+ Stars</SelectItem>\n            <SelectItem value=\"2\">2+ Stars</SelectItem>\n          </SelectContent>\n        </Select>\n\n        <Select value={filterStatus} onValueChange={onFilterStatusChange}>\n          <SelectTrigger className=\"w-full sm:w-[180px] bg-secondary border-primary/30 text-foreground\">\n            <SelectValue placeholder=\"Filter by status\" />\n          </SelectTrigger>\n          <SelectContent className=\"bg-card border-primary/30\">\n            <SelectItem value=\"all\">All Status</SelectItem>\n            <SelectItem value=\"active\">Active</SelectItem>\n            <SelectItem value=\"inactive\">Inactive</SelectItem>\n            <SelectItem value=\"syncing\">Syncing</SelectItem>\n          </SelectContent>\n        </Select>\n\n        <Button\n          variant=\"outline\"\n          className=\"border-primary/30 text-muted-foreground hover:text-foreground bg-transparent\"\n        >\n          <SlidersHorizontal className=\"h-4 w-4 mr-2\" />\n          More Filters\n        </Button>\n      </div>\n    </div>\n  )\n}\n","size_bytes":4038},"app/auth/update-password/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { motion } from \"framer-motion\"\nimport Link from \"next/link\"\nimport { Loader2 } from \"lucide-react\"\nimport { useRouter } from \"next/navigation\"\n\nexport default function UpdatePasswordPage() {\n  const [password, setPassword] = useState(\"\")\n  const [confirmPassword, setConfirmPassword] = useState(\"\")\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [success, setSuccess] = useState(false)\n  const router = useRouter()\n\n  useEffect(() => {\n    // Supabase sets a recovery session automatically when landing here from the email link\n  }, [])\n\n  const handleUpdate = async (e: React.FormEvent) => {\n    e.preventDefault()\n    const supabase = createClient()\n    setIsLoading(true)\n    setError(null)\n\n    if (password.length < 6) {\n      setError(\"Password must be at least 6 characters\")\n      setIsLoading(false)\n      return\n    }\n    if (password !== confirmPassword) {\n      setError(\"Passwords do not match\")\n      setIsLoading(false)\n      return\n    }\n\n    try {\n      const { error } = await supabase.auth.updateUser({ password })\n      if (error) throw error\n      setSuccess(true)\n      setTimeout(() => router.push(\"/auth/login\"), 1200)\n    } catch (e: unknown) {\n      setError(e instanceof Error ? e.message : \"Failed to update password\")\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex min-h-screen w-full items-center justify-center bg-black p-6\">\n      <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }} className=\"w-full max-w-md\">\n        <Card className=\"bg-card border-primary/30 shadow-2xl shadow-primary/10\">\n          <CardHeader className=\"space-y-1\">\n            <CardTitle className=\"text-3xl font-bold text-center bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">Update Password</CardTitle>\n            <CardDescription className=\"text-center text-muted-foreground\">\n              Enter your new password below\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {success ? (\n              <div className=\"text-center space-y-4\">\n                <p className=\"text-sm text-muted-foreground\">Password updated successfully. Redirecting to Sign In...</p>\n                <Link href=\"/auth/login\" className=\"underline text-primary hover:text-accent\">Go to Sign In</Link>\n              </div>\n            ) : (\n              <form onSubmit={handleUpdate} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\">New Password</Label>\n                  <Input id=\"password\" type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} required />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"confirm\">Confirm Password</Label>\n                  <Input id=\"confirm\" type=\"password\" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} required />\n                </div>\n                {error && (\n                  <motion.div initial={{ opacity: 0, height: 0 }} animate={{ opacity: 1, height: \"auto\" }} className=\"p-3 rounded-lg bg-destructive/10 border border-destructive/30\">\n                    <p className=\"text-sm text-destructive\">{error}</p>\n                  </motion.div>\n                )}\n                <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                  {isLoading ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Updating...\n                    </>\n                  ) : (\n                    \"Update Password\"\n                  )}\n                </Button>\n              </form>\n            )}\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  )\n}\n","size_bytes":4241},"app/privacy/page.tsx":{"content":"import Link from \"next/link\"\nimport { ArrowLeft } from \"lucide-react\"\n\nexport default function PrivacyPage() {\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      <div className=\"container mx-auto px-4 py-12 max-w-4xl\">\n        <Link\n          href=\"/\"\n          className=\"inline-flex items-center gap-2 text-gray-400 hover:text-orange-500 transition-colors mb-8\"\n        >\n          <ArrowLeft className=\"w-4 h-4\" />\n          Back to Home\n        </Link>\n\n        <h1 className=\"text-4xl font-bold mb-8 text-balance\">Privacy Policy</h1>\n\n        <div className=\"space-y-8 text-gray-300\">\n          <section>\n            <h2 className=\"text-2xl font-semibold text-white mb-4\">1. Information We Collect</h2>\n            <p className=\"mb-4\">\n              We collect information you provide directly to us, including name, email address, business information,\n              and Google My Business account data when you connect your GMB accounts to our platform.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-white mb-4\">2. How We Use Your Information</h2>\n            <p className=\"mb-4\">We use the information we collect to:</p>\n            <ul className=\"list-disc list-inside space-y-2 ml-4\">\n              <li>Provide, maintain, and improve our services</li>\n              <li>Process and complete transactions</li>\n              <li>Send you technical notices and support messages</li>\n              <li>Respond to your comments and questions</li>\n              <li>Monitor and analyze trends, usage, and activities</li>\n            </ul>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-white mb-4\">3. Information Sharing</h2>\n            <p className=\"mb-4\">\n              We do not share your personal information with third parties except as described in this policy. We may\n              share information with service providers who perform services on our behalf.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-white mb-4\">4. Data Security</h2>\n            <p className=\"mb-4\">\n              We take reasonable measures to help protect your personal information from loss, theft, misuse, and\n              unauthorized access, disclosure, alteration, and destruction.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-white mb-4\">5. Your Rights</h2>\n            <p className=\"mb-4\">\n              You have the right to access, update, or delete your personal information at any time through your account\n              settings or by contacting us.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-white mb-4\">6. Contact Us</h2>\n            <p>\n              If you have any questions about this Privacy Policy, please contact us at{\" \"}\n              <a href=\"mailto:privacy@gmbplatform.com\" className=\"text-orange-500 hover:underline\">\n                privacy@gmbplatform.com\n              </a>\n            </p>\n          </section>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":3222},"README.md":{"content":"# GMB Platform - Google My Business Management\n\n[![Built with Next.js](https://img.shields.io/badge/Built%20with-Next.js%2016-black?style=for-the-badge&logo=next.js)](https://nextjs.org/)\n[![Deployed on Replit](https://img.shields.io/badge/Deployed%20on-Replit-black?style=for-the-badge&logo=replit)](https://replit.com/)\n[![Powered by Supabase](https://img.shields.io/badge/Powered%20by-Supabase-black?style=for-the-badge&logo=supabase)](https://supabase.com/)\n\n## Overview\n\nGMB Platform is a comprehensive Google My Business (GMB) management application that helps businesses and agencies manage multiple GMB locations, reviews, and content. The platform leverages AI-powered tools for content generation and sentiment analysis, providing a unified dashboard for monitoring business performance across locations.\n\n## 🚀 Live Deployment\n\n**Primary Domain:** [https://nnh.ae](https://nnh.ae)\n\n## ✨ Features\n\n- **Multi-Location Management**: Manage multiple GMB locations from a single dashboard\n- **Review Management**: Track, respond to, and analyze customer reviews\n- **AI Content Generation**: Generate posts, responses, and descriptions using AI\n- **Sentiment Analysis**: Automated review sentiment tracking\n- **Real-time Analytics**: Live performance metrics and insights\n- **Multiple Authentication Methods**: Email/Password, Google OAuth, Magic Link, Phone/SMS\n\n## 🛠️ Tech Stack\n\n### Frontend\n- **Next.js 16** with App Router and React Server Components\n- **React 18.3** for optimal rendering\n- **TypeScript** for type safety\n- **Tailwind CSS** with custom OKLCH color system\n- **Radix UI** + **shadcn/ui** for accessible components\n- **Framer Motion** for animations\n\n### Backend\n- **Supabase** for authentication and database\n- **PostgreSQL** with Row Level Security (RLS)\n- **Supabase Edge Functions** for serverless operations\n- **Real-time subscriptions** for live data updates\n\n### AI Integration\n- **Multiple AI Providers**: OpenAI GPT-4, Anthropic Claude, Groq\n- **Content Generation**: Posts, responses, descriptions, FAQs\n- **Sentiment Analysis**: Automated review classification\n\n## 🏗️ Architecture\n\n- **Framework**: Next.js 14+ with App Router\n- **State Management**: React hooks + Supabase real-time\n- **Authentication**: Supabase Auth (Email, OAuth, Magic Link, Phone)\n- **Database**: PostgreSQL with RLS policies\n- **Deployment**: Replit Autoscale\n- **Custom Domain**: nnh.ae\n\n## 📋 Project Structure\n\n```\n├── app/                      # Next.js App Router\n│   ├── (dashboard)/         # Protected dashboard routes\n│   ├── auth/                # Authentication pages\n│   └── layout.tsx           # Root layout\n├── components/              # React components\n│   ├── dashboard/          # Dashboard-specific components\n│   ├── layout/             # Layout components (Sidebar, Header)\n│   └── ui/                 # Reusable UI components (shadcn/ui)\n├── lib/                     # Utilities and configurations\n│   ├── supabase/           # Supabase client configurations\n│   └── types/              # TypeScript type definitions\n├── supabase/               # Supabase Edge Functions (Deno)\n│   └── functions/          # 6 serverless functions\n└── scripts/                # Database setup scripts\n```\n\n## 🔐 Security\n\n- **Row Level Security (RLS)**: Enabled on all database tables\n- **Supabase Auth**: Secure session management\n- **Environment Secrets**: Managed via Replit Secrets\n- **HTTPS**: Encrypted connections for all traffic\n\n## 🚀 Deployment\n\nThe application is deployed on **Replit** using Autoscale deployment:\n\n- **Build Command**: `npm run build`\n- **Run Command**: `npm run start`\n- **Port**: 5000 (0.0.0.0:5000)\n- **Domain**: https://nnh.ae\n\n## 📦 Environment Variables\n\nRequired secrets (configured in Replit):\n- `NEXT_PUBLIC_SUPABASE_URL`\n- `NEXT_PUBLIC_SUPABASE_ANON_KEY`\n- `GOOGLE_CLIENT_ID`\n- `GOOGLE_CLIENT_SECRET`\n- `GROQ_API_KEY`\n- `DEEPSEEK_API_KEY`\n- `TOGETHER_API_KEY`\n\n## 🗄️ Database\n\n**Tables**:\n- `profiles` - User profile information\n- `gmb_accounts` - Connected Google My Business accounts\n- `gmb_locations` - Business locations with metadata\n- `gmb_reviews` - Customer reviews with AI sentiment\n- `activity_logs` - User activity tracking\n\n**Edge Functions** (6 deployed):\n1. `ai-generate` - AI content generation\n2. `account-disconnect` - Disconnect Google account\n3. `create-auth-url` - Create OAuth URL\n4. `gmb-sync` - Sync GMB data\n5. `google-oauth-callback` - Handle OAuth callback\n6. `review-reply` - Submit review response\n\n## 📚 Documentation\n\nFor detailed setup and production deployment instructions, see:\n- `PRODUCTION_CHECKLIST.md` - Production deployment checklist\n- `replit.md` - Complete project documentation\n\n## 🔧 Development\n\n```bash\n# Install dependencies\nnpm install --legacy-peer-deps\n\n# Run development server\nnpm run dev\n\n# Build for production\nnpm run build\n\n# Start production server\nnpm run start\n```\n\n## 📊 Status\n\n**Deployment Status**: ✅ Live on https://nnh.ae\n\nAll production requirements completed:\n- ✅ Database setup with RLS\n- ✅ Edge Functions deployed\n- ✅ Custom domain configured\n- ✅ OAuth configured\n- ✅ Environment variables set\n\n## 📄 License\n\nPrivate project - All rights reserved\n\n---\n\n**Deployed on Replit** | **Powered by Supabase** | **Built with Next.js**\n","size_bytes":5401},"app/auth/reset/page.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { motion } from \"framer-motion\"\nimport Link from \"next/link\"\nimport { Loader2 } from \"lucide-react\"\nimport { getBaseUrlClient } from \"@/lib/utils/get-base-url-client\"\n\nexport default function ResetPasswordPage() {\n  const [email, setEmail] = useState(\"\")\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [sent, setSent] = useState(false)\n\n  const handleReset = async (e: React.FormEvent) => {\n    e.preventDefault()\n    const supabase = createClient()\n    const baseUrl = getBaseUrlClient()\n    setIsLoading(true)\n    setError(null)\n    try {\n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: `${baseUrl}/auth/update-password`,\n      })\n      if (error) throw error\n      setSent(true)\n    } catch (e: unknown) {\n      setError(e instanceof Error ? e.message : \"Failed to send reset link\")\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex min-h-screen w-full items-center justify-center bg-black p-6\">\n      <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }} className=\"w-full max-w-md\">\n        <Card className=\"bg-card border-primary/30 shadow-2xl shadow-primary/10\">\n          <CardHeader className=\"space-y-1\">\n            <CardTitle className=\"text-3xl font-bold text-center bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">Reset Password</CardTitle>\n            <CardDescription className=\"text-center text-muted-foreground\">\n              Enter your email to receive a password reset link\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {sent ? (\n              <div className=\"space-y-4 text-center\">\n                <p className=\"text-sm text-muted-foreground\">We sent a reset link to {email}. Please check your inbox.</p>\n                <Link href=\"/auth/login\" className=\"underline text-primary hover:text-accent\">Back to Sign In</Link>\n              </div>\n            ) : (\n              <form onSubmit={handleReset} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input id=\"email\" type=\"email\" placeholder=\"you@example.com\" value={email} onChange={(e) => setEmail(e.target.value)} required disabled={isLoading} />\n                </div>\n                {error && (\n                  <motion.div initial={{ opacity: 0, height: 0 }} animate={{ opacity: 1, height: \"auto\" }} className=\"p-3 rounded-lg bg-destructive/10 border border-destructive/30\">\n                    <p className=\"text-sm text-destructive\">{error}</p>\n                  </motion.div>\n                )}\n                <Button type=\"submit\" className=\"w-full\" disabled={isLoading || !email}>\n                  {isLoading ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Sending link...\n                    </>\n                  ) : (\n                    \"Send reset link\"\n                  )}\n                </Button>\n                <div className=\"text-center text-sm text-muted-foreground\">\n                  Remembered your password? <Link href=\"/auth/login\" className=\"text-primary underline\">Sign in</Link>\n                </div>\n              </form>\n            )}\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  )\n}\n","size_bytes":3816},"PRODUCTION_CHECKLIST.md":{"content":"# ✅ قائمة التحقق - الجاهزية للإنتاج\n\nآخر تحديث: 29 أكتوبر 2025\n\n---\n\n## 🎉 ما تم إنجازه (100% جاهز في Replit):\n\n### 1. إعدادات التطبيق ✅\n- ✅ إزالة `ignoreBuildErrors` من next.config.mjs\n- ✅ إصلاح جميع أخطاء TypeScript\n- ✅ البناء النهائي ينجح بدون أخطاء (0 errors)\n- ✅ استبعاد مجلد `supabase/` من tsconfig.json\n- ✅ تصحيح أخطاء في components/analytics/location-performance.tsx\n- ✅ الكود نظيف - لا توجد console.log statements\n\n### 2. المفاتيح البيئية (7/7) ✅\nجميع المفاتيح موجودة في Replit Secrets:\n- ✅ NEXT_PUBLIC_SUPABASE_URL\n- ✅ NEXT_PUBLIC_SUPABASE_ANON_KEY\n- ✅ GOOGLE_CLIENT_ID\n- ✅ GOOGLE_CLIENT_SECRET\n- ✅ GROQ_API_KEY\n- ✅ DEEPSEEK_API_KEY\n- ✅ TOGETHER_API_KEY\n\n### 3. إعدادات النشر ✅\n- ✅ Deployment Config معد (Autoscale)\n- ✅ Build Command: `npm run build`\n- ✅ Run Command: `npm run start`\n- ✅ Port: 0.0.0.0:5000\n\n### 4. قاعدة البيانات Supabase ✅\nتم التأكد من Supabot:\n- ✅ **جميع الجداول موجودة:**\n  - `profiles`\n  - `gmb_accounts`\n  - `gmb_locations`\n  - `gmb_reviews`\n  - `activity_logs` (تم إنشاؤه)\n  \n- ✅ **RLS مفعّل** على كل الجداول\n- ✅ **السياسات الأمنية موجودة** (أفضل من المطلوب - تستخدم JOINs للأمان الإضافي)\n- ✅ **الفهارس (Indexes)** موجودة لتحسين الأداء\n\n---\n\n## ✅ جميع الخطوات مكتملة!\n\n### الخطوة 1: تشغيل Profile Trigger ✅ **مكتملة**\n**الهدف:** إنشاء profile تلقائياً لكل مستخدم جديد يسجل\n\n**الحالة:** ✅ تم التنفيذ بنجاح\n- ✅ الوظيفة `public.handle_new_user()` تم إنشاؤها\n- ✅ التريجر `on_auth_user_created` جاهز\n- ✅ كل مستخدم جديد حيحصل على profile تلقائياً\n\n---\n\n### الخطوة 2: نشر Supabase Edge Functions ✅ **مكتملة**\n**الهدف:** نشر الـ 6 وظائف الخلفية للتطبيق\n\n**الحالة:** ✅ كل الوظائف موجودة ونشطة\n1. ✅ `ai-generate` - توليد محتوى بالذكاء الاصطناعي\n2. ✅ `account-disconnect` - فصل حساب Google\n3. ✅ `create-auth-url` - إنشاء رابط OAuth\n4. ✅ `gmb-sync` - مزامنة بيانات Google My Business\n5. ✅ `google-oauth-callback` - معالجة OAuth callback\n6. ✅ `review-reply` - الرد على التقييمات\n\n**ملاحظة:** تأكد من إضافة المفاتيح البيئية للوظائف إذا لم تكن موجودة:\n- GOOGLE_CLIENT_ID\n- GOOGLE_CLIENT_SECRET\n- GROQ_API_KEY\n- DEEPSEEK_API_KEY\n- TOGETHER_API_KEY\n\n---\n\n### الخطوة 3: إعداد Google OAuth للإنتاج ✅ **مكتملة**\n**الهدف:** السماح للمستخدمين بتسجيل الدخول عبر Google في بيئة الإنتاج\n\n**الخطوات:**\n\n#### أ) روح Google Cloud Console:\n1. افتح: https://console.cloud.google.com/\n2. اختر مشروعك\n3. روح **APIs & Services** → **Credentials**\n4. اختر OAuth 2.0 Client ID الموجود\n\n#### ب) أضف Redirect URIs:\nفي قسم **Authorized redirect URIs**، أضف:\n\n```\nhttps://YOUR_PRODUCTION_URL_FROM_REPLIT\nhttps://rrarhekwhgpgkakqrlyn.supabase.co/auth/v1/callback\nhttps://rrarhekwhgpgkakqrlyn.supabase.co/functions/v1/google-oauth-callback\n```\n\n**ملاحظة:** \n- `YOUR_PRODUCTION_URL_FROM_REPLIT` - حتحصل عليه بعد ما تنشر على Replit\n- رابط Supabase موجود في: Project Settings → API → URL\n\n#### ج) أضف JavaScript Origins:\nفي قسم **Authorized JavaScript origins**، أضف:\n\n```\nhttps://YOUR_PRODUCTION_URL_FROM_REPLIT\n```\n\n#### د) احفظ التغييرات\nاضغط **Save**\n\n---\n\n## 🎉 النشر مكتمل!\n\n### ✅ تم النشر بنجاح على:\n- **الدومين الخاص:** https://nnh.ae\n- **دومين Replit:** https://[your-app].replit.app (backup)\n\n### ✅ التكوينات المكتملة:\n- ✅ Supabase Redirect URLs محدثة\n- ✅ Google OAuth URLs محدثة  \n- ✅ DNS Records مضافة ومفعّلة\n- ✅ Custom Domain مربوط بنجاح\n\n### 📋 اختبار التطبيق النهائي:\n1. افتح https://nnh.ae\n2. جرب تسجيل الدخول بـ:\n   - ✅ Email/Password\n   - ✅ Google OAuth\n   - ✅ Magic Link\n   - ✅ Phone/SMS\n3. جرب الداشبورد والميزات:\n   - ✅ Dashboard (الإحصائيات)\n   - ✅ Locations (المواقع)\n   - ✅ Reviews (التقييمات)\n   - ✅ AI Studio (الذكاء الاصطناعي)\n   - ✅ Analytics (التحليلات)\n   - ✅ Settings (الإعدادات)\n\n---\n\n## 📊 ملخص الوضع الحالي:\n\n| المكون | الحالة | الملاحظات |\n|--------|--------|-----------|\n| **Replit** | ✅ جاهز 100% | البناء ينجح، كل الإعدادات موجودة |\n| **Supabase Database** | ✅ جاهز 100% | RLS + Tables + Policies كلها موجودة |\n| **Profile Trigger** | ✅ جاهز | تم إنشاء trigger للـ profiles |\n| **Edge Functions** | ✅ جاهز 100% | كل الـ 6 وظائف نشطة |\n| **Supabase URLs** | ✅ مكتمل | Redirect URLs محدثة |\n| **Google OAuth** | ✅ مكتمل | Production URLs مضافة |\n| **DNS & Domain** | ✅ مكتمل | nnh.ae مربوط بنجاح |\n| **النشر** | ✅ منشور | جاهز على https://nnh.ae |\n\n---\n\n## 💡 نصائح مهمة:\n\n### الأمان:\n- ✅ لا تشارك أي مفاتيح أو secrets\n- ✅ Supabase RLS يحمي البيانات تلقائياً\n- ✅ كل مستخدم يشوف بياناته فقط\n\n### الأداء:\n- ✅ الفهارس موجودة على كل الجداول\n- ✅ البناء محسّن (Next.js 16 + Turbopack)\n- ✅ Real-time subscriptions جاهزة\n\n### المراقبة:\n- تابع Logs في Replit Dashboard\n- تابع Edge Functions logs في Supabase\n- استخدم Developer Console في المتصفح\n\n### التكلفة:\n- Replit: حسب استخدام الـ Autoscale\n- Supabase: مجاني لحد معين، بعدها حسب الاستخدام\n- راجع الأسعار في كلا المنصتين\n\n---\n\n## 🆘 إذا واجهت مشاكل:\n\n| المشكلة | الحل |\n|---------|------|\n| **Build فشل** | تحقق من Logs في Replit Deploy Dashboard |\n| **المصادقة ما تشتغل** | تأكد من Google OAuth URLs صح |\n| **البيانات ما تظهر** | تحقق من RLS policies في Supabase |\n| **Edge Functions أخطاء** | شوف Logs في Supabase Dashboard → Functions |\n| **الصفحة بيضاء** | افتح Developer Console في المتصفح وشوف الأخطاء |\n\n---\n\n## 📞 مساعدة إضافية:\n\nإذا احتجت مساعدة:\n1. شوف الـ Logs أولاً (Replit أو Supabase)\n2. اقرأ رسالة الخطأ بدقة\n3. جوجل الخطأ (غالباً في حل موثق)\n4. اسأل في Replit Community أو Supabase Discord\n\n---\n\n**ملف:** `PRODUCTION_CHECKLIST.md`\n**آخر تحديث:** 29 أكتوبر 2025\n**الحالة:** جاهز للخطوات النهائية\n","size_bytes":7295},"replit.md":{"content":"# GMB Platform - Replit Configuration\n\n## Overview\n\nGMB Platform is a Next.js-based Google My Business (GMB) management application that helps businesses and agencies manage multiple GMB locations, reviews, and content. The platform leverages AI-powered tools for content generation and sentiment analysis, providing a comprehensive dashboard for monitoring business performance across locations. The project aims to provide a comprehensive and intuitive solution for GMB management.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Server Actions Architecture\n\nAll server-side mutations are isolated in dedicated server action files within `/server/actions/`. Each action file uses the `\"use server\"` directive and includes strict authentication, Zod validation for inputs, comprehensive error handling, and cache revalidation. Modules are organized by feature (e.g., `auth.ts`, `accounts.ts`, `locations.ts`, `reviews.ts`, `dashboard.ts`).\n\nInput validation uses Zod schemas defined in `/lib/validations/` to ensure type-safe input constraints and prevent data corruption.\n\n### Database Schema Management\n\nThe project uses Supabase PostgreSQL with direct SQL migrations stored in `/supabase/migrations/`. TypeScript interfaces are defined in `/lib/types/database.ts` to match the database schema. There is no ORM layer - database interactions use the Supabase client directly.\n\n### Frontend Architecture\n\nThe frontend is built with Next.js 14+ using the App Router, React Server Components (RSC), and TypeScript. Styling is managed with Tailwind CSS and a custom OKLCH color system, with dark mode as default. UI components leverage Radix UI primitives and shadcn/ui (New York style variant), with Framer Motion for animations.\n\nState management primarily uses React hooks for local state and Supabase real-time subscriptions for live data updates. Client-side and server-side Supabase clients are used as appropriate. Routing includes public, authentication, and protected dashboard routes, with middleware-based route protection.\n\n### Backend Architecture\n\nSupabase is used for authentication (Auth, OAuth, magic links) and as the primary PostgreSQL database. Row Level Security (RLS) enforces data access control. The database schema includes `profiles`, `gmb_accounts`, `gmb_locations`, `gmb_reviews`, and `activity_logs`. Server Actions handle mutations, Server Components fetch data, and Edge Functions are used for specific tasks like OAuth callbacks and real-time subscriptions.\n\n### Authentication Flow\n\nThe platform supports multi-method authentication (Email/Password, Google OAuth, Magic Link, Phone/SMS). Session management uses persistent, cookie-based sessions with automatic refresh and protected route enforcement.\n\n### AI Integration\n\nAI-powered tools are integrated for content generation (posts, responses, descriptions, FAQs) with support for multiple AI providers (OpenAI, Anthropic, Groq) and customizable tone selection. For review management, AI performs automated sentiment analysis and suggests responses, with a workflow for tracking review responses.\n\n### Real-time Features\n\nLive data synchronization for location status, review notifications, activity feed, and dashboard metrics is achieved via Supabase real-time subscriptions. Optimistic UI updates provide immediate feedback to users.\n\n### Dashboard Features\n\nThe dashboard provides real-time statistics (total locations, reviews, average rating, response rate), monthly performance charts powered by `getMonthlyStats()` server action, and an activity feed with live updates. It includes robust error handling, loading states, and empty states. Analytics and visualization utilize Recharts for displaying traffic trends, sentiment distribution, and performance metrics.\n\n## External Dependencies\n\n### Core Services\n\n-   **Supabase**: PostgreSQL database, Authentication, Real-time subscriptions, Edge Functions, Row Level Security.\n-   **Replit**: Deployment, hosting, environment secrets management, autoscale deployment.\n\n### Third-Party APIs\n\n-   **Google My Business API**: Location data synchronization, review management, account connection.\n-   **AI Services**: OpenAI GPT-4 API, Anthropic Claude API, Groq API (for content generation and sentiment analysis).\n\n### UI & Visualization Libraries\n\n-   **Component Libraries**: `@radix-ui/*`, `shadcn/ui`, `lucide-react` (icons), `cmdk` (command palette).\n-   **Animation & Interaction**: `framer-motion`, `embla-carousel-react`, `react-hook-form` with `zod` validation.\n-   **Data Visualization**: `recharts`.\n\n### Development Tools\n\n-   **Framework**: Next.js, TypeScript.\n-   **Styling**: Tailwind CSS.\n-   **Linting**: ESLint.\n-   **Date Manipulation**: `date-fns`.\n-   **Utilities**: `class-variance-authority`, `clsx`, `tailwind-merge`.","size_bytes":4842},"lib/utils/get-base-url-client.ts":{"content":"export function getBaseUrlClient(): string {\n  // Allow explicit override via environment variable\n  if (process.env.NEXT_PUBLIC_BASE_URL) {\n    return process.env.NEXT_PUBLIC_BASE_URL\n  }\n  \n  // In browser, check hostname to determine environment\n  if (typeof window !== 'undefined') {\n    // Production domain\n    if (window.location.hostname === 'nnh.ae') {\n      return 'https://nnh.ae'\n    }\n    // Always use current origin (works for dev, preview, and production)\n    return window.location.origin\n  }\n  \n  // Server-side fallback\n  return process.env.NEXT_PUBLIC_SITE_URL || 'https://nnh.ae'\n}\n","size_bytes":603},"lib/utils/get-base-url.ts":{"content":"export function getBaseUrl(): string {\n  // Allow explicit override via environment variable\n  if (process.env.NEXT_PUBLIC_BASE_URL) {\n    return process.env.NEXT_PUBLIC_BASE_URL\n  }\n  \n  // In production, use the custom domain\n  if (process.env.NODE_ENV === 'production') {\n    return 'https://nnh.ae'\n  }\n  \n  // In development/preview, return localhost or preview URL\n  // (This will be used for SSR/server actions, client should use window.location.origin)\n  if (typeof window !== 'undefined') {\n    return window.location.origin\n  }\n  \n  // Fallback for server-side in development (e.g., during build)\n  // This should ideally be passed from the request context\n  return process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'\n}\n","size_bytes":738},"server/actions/locations.ts":{"content":"\"use server\"\n\nimport { createClient } from \"@/lib/supabase/server\"\nimport { revalidatePath } from \"next/cache\"\nimport { LocationSchema, UpdateLocationSchema } from \"@/lib/validations/dashboard\"\nimport { z } from \"zod\"\n\nexport async function getLocations() {\n  const supabase = await createClient()\n  const { data: { user }, error: authError } = await supabase.auth.getUser()\n  \n  if (authError || !user) {\n    console.error(\"Authentication error:\", authError)\n    return { locations: [], error: \"Not authenticated\" }\n  }\n\n  const { data, error } = await supabase\n    .from(\"gmb_locations\")\n    .select(\"*\")\n    .eq(\"user_id\", user.id)\n    .order(\"created_at\", { ascending: false })\n\n  if (error) {\n    console.error(\"Failed to fetch locations:\", error)\n    return { locations: [], error: error.message }\n  }\n\n  return { locations: data || [], error: null }\n}\n\nexport async function addLocation(locationData: unknown) {\n  const supabase = await createClient()\n  const { data: { user }, error: authError } = await supabase.auth.getUser()\n  \n  if (authError || !user) {\n    console.error(\"Authentication error:\", authError)\n    return { success: false, error: \"Not authenticated\" }\n  }\n\n  // Validate input data\n  try {\n    const validatedData = LocationSchema.parse(locationData)\n\n    const { error } = await supabase\n      .from(\"gmb_locations\")\n      .insert({\n        ...validatedData,\n        user_id: user.id,\n        is_active: true,\n        rating: 0,\n      })\n\n    if (error) {\n      console.error(\"Failed to add location:\", error)\n      return { success: false, error: error.message }\n    }\n\n    revalidatePath('/locations')\n    return { success: true, error: null }\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const errorMessage = error.errors.map(e => e.message).join(\", \")\n      return { success: false, error: `Validation error: ${errorMessage}` }\n    }\n    console.error(\"Unexpected error:\", error)\n    return { success: false, error: \"Failed to add location\" }\n  }\n}\n\nexport async function updateLocation(locationId: string, updates: unknown) {\n  const supabase = await createClient()\n  const { data: { user }, error: authError } = await supabase.auth.getUser()\n  \n  if (authError || !user) {\n    console.error(\"Authentication error:\", authError)\n    return { success: false, error: \"Not authenticated\" }\n  }\n\n  // Validate locationId\n  if (!locationId || typeof locationId !== 'string') {\n    return { success: false, error: \"Invalid location ID\" }\n  }\n\n  // Validate update data\n  try {\n    const validatedUpdates = UpdateLocationSchema.parse(updates)\n\n    const { error } = await supabase\n      .from(\"gmb_locations\")\n      .update(validatedUpdates)\n      .eq(\"id\", locationId)\n      .eq(\"user_id\", user.id)\n\n    if (error) {\n      console.error(\"Failed to update location:\", error)\n      return { success: false, error: error.message }\n    }\n\n    revalidatePath('/locations')\n    return { success: true, error: null }\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const errorMessage = error.errors.map(e => e.message).join(\", \")\n      return { success: false, error: `Validation error: ${errorMessage}` }\n    }\n    console.error(\"Unexpected error:\", error)\n    return { success: false, error: \"Failed to update location\" }\n  }\n}\n\nexport async function deleteLocation(locationId: string) {\n  const supabase = await createClient()\n  const { data: { user }, error: authError } = await supabase.auth.getUser()\n  \n  if (authError || !user) {\n    console.error(\"Authentication error:\", authError)\n    return { success: false, error: \"Not authenticated\" }\n  }\n\n  // Validate locationId\n  if (!locationId || typeof locationId !== 'string') {\n    return { success: false, error: \"Invalid location ID\" }\n  }\n\n  const { error } = await supabase\n    .from(\"gmb_locations\")\n    .delete()\n    .eq(\"id\", locationId)\n    .eq(\"user_id\", user.id)\n\n  if (error) {\n    console.error(\"Failed to delete location:\", error)\n    return { success: false, error: error.message }\n  }\n\n  revalidatePath('/locations')\n  return { success: true, error: null }\n}\n","size_bytes":4087},"server/actions/auth.ts":{"content":"\"use server\"\n\nimport { createClient } from \"@/lib/supabase/server\"\nimport { redirect } from \"next/navigation\"\nimport { revalidatePath } from \"next/cache\"\n\nexport async function signOut() {\n  const supabase = await createClient()\n  await supabase.auth.signOut()\n  revalidatePath('/', 'layout')\n  redirect('/auth/login')\n}\n\nexport async function getCurrentUser() {\n  const supabase = await createClient()\n  const { data: { user }, error } = await supabase.auth.getUser()\n  \n  if (error) {\n    return { user: null, error: error.message }\n  }\n  \n  return { user, error: null }\n}\n\nexport async function getSession() {\n  const supabase = await createClient()\n  const { data: { session }, error } = await supabase.auth.getSession()\n  \n  if (error) {\n    return { session: null, error: error.message }\n  }\n  \n  return { session, error: null }\n}\n","size_bytes":837},"lib/validations/dashboard.ts":{"content":"import { z } from \"zod\"\n\nexport const LocationSchema = z.object({\n  location_name: z.string().min(1, \"Location name is required\").max(100, \"Location name too long\"),\n  address: z.string().max(200, \"Address too long\").optional(),\n  category: z.string().max(50, \"Category name too long\").optional(),\n  phone: z.string().regex(/^[\\d\\s\\-+()]*$/, \"Invalid phone number format\").max(20).optional(),\n})\n\nexport const UpdateLocationSchema = z.object({\n  location_name: z.string().min(1).max(100).optional(),\n  address: z.string().max(200).optional(),\n  phone: z.string().regex(/^[\\d\\s\\-+()]*$/).max(20).optional(),\n  category: z.string().max(50).optional(),\n  is_active: z.boolean().optional(),\n})\n\nexport const ReviewReplySchema = z.object({\n  reply: z.string().min(10, \"Reply must be at least 10 characters\").max(1000, \"Reply too long\"),\n  reviewId: z.string().uuid(\"Invalid review ID\"),\n})\n\nexport const ReviewStatusSchema = z.object({\n  status: z.enum([\"new\", \"in_progress\", \"responded\"], {\n    errorMap: () => ({ message: \"Invalid status value\" }),\n  }),\n  reviewId: z.string().uuid(\"Invalid review ID\"),\n})\n\nexport type LocationInput = z.infer<typeof LocationSchema>\nexport type UpdateLocationInput = z.infer<typeof UpdateLocationSchema>\nexport type ReviewReplyInput = z.infer<typeof ReviewReplySchema>\nexport type ReviewStatusInput = z.infer<typeof ReviewStatusSchema>\n","size_bytes":1368},"server/actions/index.ts":{"content":"\"use server\"\n\n// Export all server actions\nexport * from './auth'\nexport * from './accounts'\nexport * from './locations'\nexport * from './reviews'\nexport * from './dashboard'\n","size_bytes":175},"server/actions/reviews.ts":{"content":"\"use server\"\n\nimport { createClient } from \"@/lib/supabase/server\"\nimport { revalidatePath } from \"next/cache\"\nimport { ReviewReplySchema, ReviewStatusSchema } from \"@/lib/validations/dashboard\"\nimport { z } from \"zod\"\n\nexport async function getReviews(locationId?: string) {\n  const supabase = await createClient()\n  const { data: { user }, error: authError } = await supabase.auth.getUser()\n  \n  if (authError || !user) {\n    console.error(\"Authentication error:\", authError)\n    return { reviews: [], error: \"Not authenticated\" }\n  }\n\n  let query = supabase\n    .from(\"gmb_reviews\")\n    .select(\"*\")\n    .eq(\"user_id\", user.id)\n    .order(\"created_at\", { ascending: false })\n\n  if (locationId && locationId !== \"all\") {\n    query = query.eq(\"location_id\", locationId)\n  }\n\n  const { data, error } = await query\n\n  if (error) {\n    console.error(\"Failed to fetch reviews:\", error)\n    return { reviews: [], error: error.message }\n  }\n\n  return { reviews: data || [], error: null }\n}\n\nexport async function updateReviewStatus(reviewId: string, status: string) {\n  const supabase = await createClient()\n  const { data: { user }, error: authError } = await supabase.auth.getUser()\n  \n  if (authError || !user) {\n    console.error(\"Authentication error:\", authError)\n    return { success: false, error: \"Not authenticated\" }\n  }\n\n  // Validate input\n  try {\n    const validatedData = ReviewStatusSchema.parse({ reviewId, status })\n\n    const { error } = await supabase\n      .from(\"gmb_reviews\")\n      .update({ status: validatedData.status })\n      .eq(\"id\", validatedData.reviewId)\n      .eq(\"user_id\", user.id)\n\n    if (error) {\n      console.error(\"Failed to update review status:\", error)\n      return { success: false, error: error.message }\n    }\n\n    revalidatePath('/reviews')\n    return { success: true, error: null }\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const errorMessage = error.errors.map(e => e.message).join(\", \")\n      return { success: false, error: `Validation error: ${errorMessage}` }\n    }\n    console.error(\"Unexpected error:\", error)\n    return { success: false, error: \"Failed to update review status\" }\n  }\n}\n\nexport async function addReviewReply(reviewId: string, reply: string) {\n  const supabase = await createClient()\n  const { data: { user }, error: authError } = await supabase.auth.getUser()\n  \n  if (authError || !user) {\n    console.error(\"Authentication error:\", authError)\n    return { success: false, error: \"Not authenticated\" }\n  }\n\n  // Validate input\n  try {\n    const validatedData = ReviewReplySchema.parse({ reviewId, reply })\n\n    const { error } = await supabase\n      .from(\"gmb_reviews\")\n      .update({ \n        response: validatedData.reply,\n        status: \"responded\",\n        responded_at: new Date().toISOString()\n      })\n      .eq(\"id\", validatedData.reviewId)\n      .eq(\"user_id\", user.id)\n\n    if (error) {\n      console.error(\"Failed to add review reply:\", error)\n      return { success: false, error: error.message }\n    }\n\n    revalidatePath('/reviews')\n    return { success: true, error: null }\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const errorMessage = error.errors.map(e => e.message).join(\", \")\n      return { success: false, error: `Validation error: ${errorMessage}` }\n    }\n    console.error(\"Unexpected error:\", error)\n    return { success: false, error: \"Failed to add review reply\" }\n  }\n}\n","size_bytes":3415},"server/actions/dashboard.ts":{"content":"\"use server\"\n\nimport { createClient } from \"@/lib/supabase/server\"\n\nexport async function getDashboardStats() {\n  const supabase = await createClient()\n  const { data: { user }, error: authError } = await supabase.auth.getUser()\n  \n  if (authError || !user) {\n    console.error(\"Authentication error:\", authError)\n    throw new Error(\"Not authenticated\")\n  }\n\n  // Fetch locations with error handling\n  const { data: locations, error: locationsError } = await supabase\n    .from(\"gmb_locations\")\n    .select(\"*\")\n    .eq(\"user_id\", user.id)\n\n  if (locationsError) {\n    console.error(\"Failed to fetch locations:\", locationsError)\n    throw new Error(`Database error: ${locationsError.message}`)\n  }\n\n  // Fetch reviews with error handling\n  const { data: reviews, error: reviewsError } = await supabase\n    .from(\"gmb_reviews\")\n    .select(\"*\")\n    .eq(\"user_id\", user.id)\n\n  if (reviewsError) {\n    console.error(\"Failed to fetch reviews:\", reviewsError)\n    throw new Error(`Database error: ${reviewsError.message}`)\n  }\n\n  const totalLocations = locations?.length || 0\n  const totalReviews = reviews?.length || 0\n  const averageRating =\n    reviews && reviews.length > 0 \n      ? (reviews.reduce((acc, r) => acc + (r.rating || 0), 0) / reviews.length).toFixed(1)\n      : \"0.0\"\n\n  const respondedReviews = reviews?.filter((r) => r.status === \"responded\").length || 0\n  const responseRate = totalReviews > 0 ? Math.round((respondedReviews / totalReviews) * 100) : 0\n\n  return {\n    totalLocations,\n    totalReviews,\n    averageRating,\n    responseRate,\n  }\n}\n\nexport async function getActivityLogs(limit: number = 10) {\n  const supabase = await createClient()\n  const { data: { user } } = await supabase.auth.getUser()\n  \n  if (!user) {\n    return { activities: [], error: \"Not authenticated\" }\n  }\n\n  const { data, error } = await supabase\n    .from(\"activity_logs\")\n    .select(\"*\")\n    .eq(\"user_id\", user.id)\n    .order(\"created_at\", { ascending: false })\n    .limit(limit)\n\n  if (error) {\n    return { activities: [], error: error.message }\n  }\n\n  return { activities: data || [], error: null }\n}\n\nexport async function getMonthlyStats() {\n  const supabase = await createClient()\n  const { data: { user } } = await supabase.auth.getUser()\n  \n  if (!user) {\n    return { data: [], error: \"Not authenticated\" }\n  }\n\n  // Get reviews from last 6 months\n  const sixMonthsAgo = new Date()\n  sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6)\n\n  const { data: reviews, error } = await supabase\n    .from(\"gmb_reviews\")\n    .select(\"rating, created_at\")\n    .eq(\"user_id\", user.id)\n    .gte(\"created_at\", sixMonthsAgo.toISOString())\n    .order(\"created_at\", { ascending: true })\n\n  if (error) {\n    console.error(\"Failed to fetch monthly stats:\", error)\n    return { data: [], error: error.message }\n  }\n\n  // Group reviews by month\n  const monthlyData: Record<string, { total: number; sum: number; count: number }> = {}\n  const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n  \n  reviews?.forEach((review) => {\n    const date = new Date(review.created_at)\n    const monthKey = `${months[date.getMonth()]} ${date.getFullYear()}`\n    \n    if (!monthlyData[monthKey]) {\n      monthlyData[monthKey] = { total: 0, sum: 0, count: 0 }\n    }\n    \n    monthlyData[monthKey].count += 1\n    monthlyData[monthKey].sum += review.rating || 0\n  })\n\n  // Convert to chart format\n  const chartData = Object.entries(monthlyData)\n    .map(([month, data]) => ({\n      month: month.split(' ')[0], // Get just the month name\n      rating: data.count > 0 ? Number((data.sum / data.count).toFixed(1)) : 0,\n      reviews: data.count\n    }))\n    .slice(-6) // Last 6 months only\n\n  // If no data, return empty array instead of mock data\n  if (chartData.length === 0) {\n    return { \n      data: [], \n      error: null,\n      message: \"No reviews found in the last 6 months\"\n    }\n  }\n\n  return { data: chartData, error: null }\n}\n","size_bytes":3950},"server/actions/accounts.ts":{"content":"\"use server\"\n\nimport { createClient } from \"@/lib/supabase/server\"\nimport { revalidatePath } from \"next/cache\"\n\nexport async function getAccounts() {\n  const supabase = await createClient()\n  const { data: { user } } = await supabase.auth.getUser()\n  \n  if (!user) {\n    return { accounts: [], error: \"Not authenticated\" }\n  }\n\n  const { data: accountsData, error } = await supabase\n    .from('gmb_accounts')\n    .select('*')\n    .eq('user_id', user.id)\n    .order('created_at', { ascending: false })\n\n  if (error) {\n    return { accounts: [], error: error.message }\n  }\n\n  // Fetch location counts for each account\n  const accountsWithLocations = await Promise.all(\n    (accountsData || []).map(async (account) => {\n      const { count } = await supabase\n        .from('gmb_locations')\n        .select('*', { count: 'exact', head: true })\n        .eq('gmb_account_id', account.id)\n\n      return {\n        ...account,\n        total_locations: count || 0\n      }\n    })\n  )\n\n  return { accounts: accountsWithLocations, error: null }\n}\n\nexport async function deleteAccount(accountId: string) {\n  const supabase = await createClient()\n  const { data: { user } } = await supabase.auth.getUser()\n  \n  if (!user) {\n    return { success: false, error: \"Not authenticated\" }\n  }\n\n  const { error } = await supabase\n    .from('gmb_accounts')\n    .delete()\n    .eq('id', accountId)\n    .eq('user_id', user.id)\n\n  if (error) {\n    return { success: false, error: error.message }\n  }\n\n  revalidatePath('/accounts')\n  return { success: true, error: null }\n}\n\nexport async function syncAccount(accountId: string) {\n  const supabase = await createClient()\n  const { data: { user } } = await supabase.auth.getUser()\n  \n  if (!user) {\n    return { success: false, error: \"Not authenticated\" }\n  }\n\n  // Update last_sync timestamp\n  const { error } = await supabase\n    .from('gmb_accounts')\n    .update({ last_sync: new Date().toISOString() })\n    .eq('id', accountId)\n    .eq('user_id', user.id)\n\n  if (error) {\n    return { success: false, error: error.message }\n  }\n\n  revalidatePath('/accounts')\n  return { success: true, error: null }\n}\n","size_bytes":2125},"DATABASE_MIGRATION_GUIDE.md":{"content":"# دليل تطبيق Database Migration\n\n## نظرة عامة\n\nهذا الدليل يشرح كيفية تطبيق التحديثات المطلوبة على قاعدة بيانات Supabase لإصلاح المشاكل التالية:\n- ❌ `column gmb_locations.user_id does not exist`\n- ❌ `column gmb_reviews.user_id does not exist`\n\n## الخطوات المطلوبة\n\n### الخطوة 1: الدخول إلى Supabase SQL Editor\n\n1. اذهب إلى [Supabase Dashboard](https://supabase.com/dashboard)\n2. اختر مشروعك (GMB Platform)\n3. من القائمة الجانبية، اختر **SQL Editor**\n4. اضغط على **New query** لإنشاء استعلام جديد\n\n### الخطوة 2: تطبيق Migration الأول - إضافة أعمدة user_id\n\nانسخ محتوى الملف التالي والصقه في SQL Editor:\n\n📁 **File:** `supabase/migrations/20251029_add_user_id_columns.sql`\n\n```sql\n-- Migration: Add user_id columns to gmb_locations and gmb_reviews tables\n-- Created: 2025-10-29\n-- Description: This migration adds user_id foreign key columns to enable multi-user support\n\n-- Step 1: Add user_id column to gmb_locations table\nALTER TABLE gmb_locations\nADD COLUMN IF NOT EXISTS user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE;\n\n-- Step 2: Add user_id column to gmb_reviews table\nALTER TABLE gmb_reviews\nADD COLUMN IF NOT EXISTS user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE;\n\n-- Step 3: Create indexes for better query performance\nCREATE INDEX IF NOT EXISTS idx_gmb_locations_user_id ON gmb_locations(user_id);\nCREATE INDEX IF NOT EXISTS idx_gmb_reviews_user_id ON gmb_reviews(user_id);\n\n-- Step 4: Update existing rows to set user_id (if you have existing data)\n-- Note: You'll need to manually update this query based on your actual user data\n-- Example: UPDATE gmb_locations SET user_id = 'your-user-uuid' WHERE user_id IS NULL;\n-- Example: UPDATE gmb_reviews SET user_id = 'your-user-uuid' WHERE user_id IS NULL;\n\nCOMMENT ON COLUMN gmb_locations.user_id IS 'Foreign key to auth.users table - owner of this location';\nCOMMENT ON COLUMN gmb_reviews.user_id IS 'Foreign key to auth.users table - owner of this review';\n```\n\n**ثم اضغط:** `RUN` أو `Ctrl + Enter`\n\n✅ **النتيجة المتوقعة:** `Success. No rows returned`\n\n---\n\n### الخطوة 3: تحديث البيانات الموجودة (إذا كان لديك بيانات)\n\nإذا كان لديك locations أو reviews موجودة في قاعدة البيانات، يجب ربطها بمستخدم معين:\n\n#### 3.1 - احصل على User UUID الخاص بك\n\n```sql\nSELECT id, email FROM auth.users;\n```\n\nانسخ الـ `id` (UUID) الخاص بحسابك.\n\n#### 3.2 - تحديث Locations\n\nاستبدل `'your-user-uuid'` بالـ UUID الذي حصلت عليه من الخطوة السابقة:\n\n```sql\nUPDATE gmb_locations \nSET user_id = 'your-user-uuid' \nWHERE user_id IS NULL;\n```\n\n#### 3.3 - تحديث Reviews\n\n```sql\nUPDATE gmb_reviews \nSET user_id = 'your-user-uuid' \nWHERE user_id IS NULL;\n```\n\n---\n\n### الخطوة 4: تطبيق Migration الثاني - تفعيل Row Level Security\n\nانسخ محتوى الملف التالي والصقه في SQL Editor (استعلام جديد):\n\n📁 **File:** `supabase/migrations/20251029_enable_rls_policies.sql`\n\n```sql\n-- Migration: Enable Row Level Security (RLS) and create policies\n-- Created: 2025-10-29\n-- Description: Enable RLS on gmb_locations and gmb_reviews tables with user-specific policies\n\n-- Step 1: Enable Row Level Security on gmb_locations\nALTER TABLE gmb_locations ENABLE ROW LEVEL SECURITY;\n\n-- Step 2: Enable Row Level Security on gmb_reviews\nALTER TABLE gmb_reviews ENABLE ROW LEVEL SECURITY;\n\n-- Step 3: Create RLS policy for gmb_locations - SELECT\nCREATE POLICY \"Users can view their own locations\"\nON gmb_locations\nFOR SELECT\nUSING (auth.uid() = user_id);\n\n-- Step 4: Create RLS policy for gmb_locations - INSERT\nCREATE POLICY \"Users can insert their own locations\"\nON gmb_locations\nFOR INSERT\nWITH CHECK (auth.uid() = user_id);\n\n-- Step 5: Create RLS policy for gmb_locations - UPDATE\nCREATE POLICY \"Users can update their own locations\"\nON gmb_locations\nFOR UPDATE\nUSING (auth.uid() = user_id)\nWITH CHECK (auth.uid() = user_id);\n\n-- Step 6: Create RLS policy for gmb_locations - DELETE\nCREATE POLICY \"Users can delete their own locations\"\nON gmb_locations\nFOR DELETE\nUSING (auth.uid() = user_id);\n\n-- Step 7: Create RLS policy for gmb_reviews - SELECT\nCREATE POLICY \"Users can view their own reviews\"\nON gmb_reviews\nFOR SELECT\nUSING (auth.uid() = user_id);\n\n-- Step 8: Create RLS policy for gmb_reviews - INSERT\nCREATE POLICY \"Users can insert their own reviews\"\nON gmb_reviews\nFOR INSERT\nWITH CHECK (auth.uid() = user_id);\n\n-- Step 9: Create RLS policy for gmb_reviews - UPDATE\nCREATE POLICY \"Users can update their own reviews\"\nON gmb_reviews\nFOR UPDATE\nUSING (auth.uid() = user_id)\nWITH CHECK (auth.uid() = user_id);\n\n-- Step 10: Create RLS policy for gmb_reviews - DELETE\nCREATE POLICY \"Users can delete their own reviews\"\nON gmb_reviews\nFOR DELETE\nUSING (auth.uid() = user_id);\n\nCOMMENT ON POLICY \"Users can view their own locations\" ON gmb_locations IS 'Allow users to view only their own locations';\nCOMMENT ON POLICY \"Users can view their own reviews\" ON gmb_reviews IS 'Allow users to view only their own reviews';\n```\n\n**ثم اضغط:** `RUN` أو `Ctrl + Enter`\n\n✅ **النتيجة المتوقعة:** `Success. No rows returned`\n\n---\n\n## التحقق من نجاح العملية\n\n### 1. تحقق من الأعمدة الجديدة\n\n```sql\n-- Check gmb_locations columns\nSELECT column_name, data_type, is_nullable \nFROM information_schema.columns \nWHERE table_name = 'gmb_locations' AND column_name = 'user_id';\n\n-- Check gmb_reviews columns\nSELECT column_name, data_type, is_nullable \nFROM information_schema.columns \nWHERE table_name = 'gmb_reviews' AND column_name = 'user_id';\n```\n\n✅ يجب أن ترى نتيجة تحتوي على `user_id` بنوع `uuid`\n\n### 2. تحقق من RLS Policies\n\n```sql\n-- Check policies for gmb_locations\nSELECT * FROM pg_policies WHERE tablename = 'gmb_locations';\n\n-- Check policies for gmb_reviews\nSELECT * FROM pg_policies WHERE tablename = 'gmb_reviews';\n```\n\n✅ يجب أن ترى 4 policies لكل جدول (SELECT, INSERT, UPDATE, DELETE)\n\n---\n\n## ما بعد التطبيق\n\n1. **أعد تشغيل التطبيق** على Replit\n2. **سجّل دخول** إلى التطبيق\n3. **تحقق من Dashboard** - يجب أن يعمل بدون أخطاء\n\n---\n\n## استكشاف الأخطاء\n\n### مشكلة: \"policy already exists\"\n\nإذا ظهرت رسالة أن الـ policy موجودة مسبقاً، احذفها أولاً:\n\n```sql\nDROP POLICY IF EXISTS \"Users can view their own locations\" ON gmb_locations;\n-- كرر لكل policy\n```\n\nثم أعد تطبيق migration الثاني.\n\n### مشكلة: \"cannot drop table because other objects depend on it\"\n\nلا تقلق، هذا طبيعي. فقط تابع الخطوات كما هي.\n\n### مشكلة: لا أرى أي بيانات بعد تطبيق RLS\n\nتأكد أنك ربطت البيانات الموجودة بـ user_id في الخطوة 3.\n\n---\n\n## ملاحظات مهمة\n\n- ⚠️ **نسخة احتياطية:** يُنصح بأخذ نسخة احتياطية قبل تطبيق أي migration\n- 🔒 **RLS:** بعد تفعيل RLS، كل مستخدم سيرى فقط بياناته الخاصة\n- 🔑 **user_id:** كل location/review جديد سيُربط تلقائياً بالمستخدم الذي أنشأه\n\n---\n\n## الدعم\n\nإذا واجهت أي مشكلة، تواصل معي وسأساعدك في الحل! 😊\n","size_bytes":7683},"app/api/gmb/create-auth-url/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { createClient, createAdminClient } from '@/lib/supabase/server';\n\nexport const dynamic = 'force-dynamic';\n\nconst GOOGLE_AUTH_URL = 'https://accounts.google.com/o/oauth2/v2/auth';\nconst SCOPES = [\n  'https://www.googleapis.com/auth/business.manage',\n  'https://www.googleapis.com/auth/userinfo.email',\n  'https://www.googleapis.com/auth/userinfo.profile',\n];\n\nexport async function POST(request: NextRequest) {\n  console.log('[Create Auth URL] Creating Google OAuth URL...');\n  \n  try {\n    const supabase = await createClient();\n    \n    // Get authenticated user\n    const { data: { user }, error: authError } = await supabase.auth.getUser();\n    if (authError || !user) {\n      console.error('[Create Auth URL] User not authenticated:', authError);\n      return NextResponse.json(\n        { error: 'Unauthorized' },\n        { status: 401 }\n      );\n    }\n    \n    console.log('[Create Auth URL] User authenticated:', user.id);\n    \n    // Get OAuth configuration\n    const clientId = process.env.GOOGLE_CLIENT_ID;\n    const redirectUri = process.env.GOOGLE_REDIRECT_URI || \n      `${process.env.NEXT_PUBLIC_BASE_URL}/api/gmb/oauth-callback`;\n    \n    if (!clientId) {\n      console.error('[Create Auth URL] Missing Google OAuth configuration');\n      return NextResponse.json(\n        { error: 'Server configuration error: Missing Google OAuth credentials' },\n        { status: 500 }\n      );\n    }\n    \n    // Generate random state for security\n    const state = crypto.randomUUID();\n    console.log('[Create Auth URL] Generated state:', state);\n    \n    // Calculate expiry time (30 minutes from now)\n    const expiresAt = new Date();\n    expiresAt.setMinutes(expiresAt.getMinutes() + 30);\n    \n    // Save state to database using admin client to bypass RLS\n    // (We've already authenticated the user above with getUser())\n    console.log('[Create Auth URL] Attempting to insert state:', {\n      state,\n      user_id: user.id,\n      expires_at: expiresAt.toISOString(),\n      used: false,\n    });\n    \n    const adminClient = createAdminClient();\n    const { data: insertData, error: stateError } = await adminClient\n      .from('oauth_states')\n      .insert({\n        state,\n        user_id: user.id,\n        expires_at: expiresAt.toISOString(),\n        used: false,\n      })\n      .select();\n      \n    if (stateError) {\n      console.error('[Create Auth URL] ===== ERROR SAVING STATE =====');\n      console.error('[Create Auth URL] Full error object:', JSON.stringify(stateError, null, 2));\n      console.error('[Create Auth URL] Error code:', stateError.code);\n      console.error('[Create Auth URL] Error message:', stateError.message);\n      console.error('[Create Auth URL] Error details:', stateError.details);\n      console.error('[Create Auth URL] Error hint:', stateError.hint);\n      console.error('[Create Auth URL] ================================');\n      \n      return NextResponse.json(\n        { \n          error: 'Failed to save OAuth state', \n          message: stateError.message,\n          code: stateError.code,\n          hint: stateError.hint\n        },\n        { status: 500 }\n      );\n    }\n    \n    console.log('[Create Auth URL] State saved successfully:', insertData);\n    \n    // Build OAuth URL\n    const authUrl = new URL(GOOGLE_AUTH_URL);\n    authUrl.searchParams.set('client_id', clientId);\n    authUrl.searchParams.set('redirect_uri', redirectUri);\n    authUrl.searchParams.set('response_type', 'code');\n    authUrl.searchParams.set('scope', SCOPES.join(' '));\n    authUrl.searchParams.set('access_type', 'offline');\n    authUrl.searchParams.set('prompt', 'consent');\n    authUrl.searchParams.set('include_granted_scopes', 'true');\n    authUrl.searchParams.set('state', state);\n    \n    const authUrlString = authUrl.toString();\n    console.log('[Create Auth URL] Auth URL created successfully');\n    console.log('[Create Auth URL] Redirect URI:', redirectUri);\n    \n    return NextResponse.json({\n      authUrl: authUrlString,\n      url: authUrlString, // For backward compatibility\n    });\n    \n  } catch (error: any) {\n    console.error('[Create Auth URL] Unexpected error:', error);\n    return NextResponse.json(\n      { error: error.message || 'Failed to create authorization URL' },\n      { status: 500 }\n    );\n  }\n}","size_bytes":4329},"app/api/gmb/sync/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@/lib/supabase/server';\n\nexport const dynamic = 'force-dynamic';\n\nconst GOOGLE_TOKEN_URL = 'https://oauth2.googleapis.com/token';\nconst GBP_LOC_BASE = 'https://mybusinessbusinessinformation.googleapis.com/v1';\nconst GBP_V4_BASE = 'https://mybusiness.googleapis.com/v4';\n\n// Helper function for chunking arrays\nconst chunks = <T>(array: T[], size = 100): T[][] => {\n  return Array.from({ length: Math.ceil(array.length / size) }, (_, i) =>\n    array.slice(i * size, i * size + size)\n  );\n};\n\n// Refresh Google access token\nasync function refreshAccessToken(refreshToken: string): Promise<{\n  access_token: string;\n  expires_in: number;\n  refresh_token?: string;\n}> {\n  console.log('[GMB Sync] Attempting to refresh access token...');\n  \n  const clientId = process.env.GOOGLE_CLIENT_ID;\n  const clientSecret = process.env.GOOGLE_CLIENT_SECRET;\n  \n  if (!clientId || !clientSecret) {\n    throw new Error('Missing Google OAuth configuration');\n  }\n\n  const response = await fetch(GOOGLE_TOKEN_URL, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    body: new URLSearchParams({\n      grant_type: 'refresh_token',\n      refresh_token: refreshToken,\n      client_id: clientId,\n      client_secret: clientSecret,\n    }),\n  });\n\n  const data = await response.json();\n  \n  if (!response.ok) {\n    console.error('[GMB Sync] Token refresh failed:', data);\n    if (data.error === 'invalid_grant') {\n      throw new Error('invalid_grant');\n    }\n    throw new Error(`Token refresh failed: ${data.error || 'Unknown error'}`);\n  }\n\n  console.log('[GMB Sync] Access token refreshed successfully');\n  return data;\n}\n\n// Get valid access token (refresh if needed)\nasync function getValidAccessToken(\n  supabase: any,\n  accountId: string\n): Promise<string> {\n  console.log('[GMB Sync] Getting valid access token for account:', accountId);\n  \n  const { data: account, error } = await supabase\n    .from('gmb_accounts')\n    .select('access_token, refresh_token, token_expires_at')\n    .eq('id', accountId)\n    .single();\n\n  if (error || !account) {\n    console.error('[GMB Sync] Failed to fetch account:', error);\n    throw new Error('Account not found');\n  }\n\n  const now = new Date();\n  const expiresAt = account.token_expires_at ? new Date(account.token_expires_at) : null;\n  \n  // Check if token is still valid (with 5 minute buffer)\n  if (account.access_token && expiresAt && expiresAt > new Date(now.getTime() + 5 * 60000)) {\n    console.log('[GMB Sync] Using existing valid access token');\n    return account.access_token;\n  }\n\n  // Token expired or missing, refresh it\n  if (!account.refresh_token) {\n    console.error('[GMB Sync] No refresh token available');\n    throw new Error('No refresh token available - reconnect required');\n  }\n\n  console.log('[GMB Sync] Token expired or missing, refreshing...');\n  const tokens = await refreshAccessToken(account.refresh_token);\n  \n  // Update tokens in database\n  const newExpiresAt = new Date();\n  newExpiresAt.setSeconds(newExpiresAt.getSeconds() + tokens.expires_in);\n  \n  const updateData: any = {\n    access_token: tokens.access_token,\n    token_expires_at: newExpiresAt.toISOString(),\n  };\n  \n  if (tokens.refresh_token) {\n    updateData.refresh_token = tokens.refresh_token;\n  }\n  \n  const { error: updateError } = await supabase\n    .from('gmb_accounts')\n    .update(updateData)\n    .eq('id', accountId);\n    \n  if (updateError) {\n    console.error('[GMB Sync] Failed to update tokens:', updateError);\n  }\n  \n  return tokens.access_token;\n}\n\n// Fetch locations from Google My Business\nasync function fetchLocations(\n  accessToken: string,\n  accountResource: string,\n  pageToken?: string\n): Promise<{ locations: any[]; nextPageToken?: string }> {\n  console.log('[GMB Sync] Fetching locations for account:', accountResource);\n  \n  const url = new URL(`${GBP_LOC_BASE}/${accountResource}/locations`);\n  url.searchParams.set('readMask', 'name,title,storefrontAddress,phoneNumbers,websiteUri,categories');\n  url.searchParams.set('pageSize', '100');\n  if (pageToken) {\n    url.searchParams.set('pageToken', pageToken);\n  }\n\n  const response = await fetch(url.toString(), {\n    headers: { Authorization: `Bearer ${accessToken}` },\n  });\n\n  const data = await response.json();\n  \n  if (!response.ok) {\n    console.error('[GMB Sync] Failed to fetch locations:', data);\n    throw new Error(`Failed to fetch locations: ${data.error?.message || 'Unknown error'}`);\n  }\n\n  console.log(`[GMB Sync] Fetched ${data.locations?.length || 0} locations`);\n  return {\n    locations: data.locations || [],\n    nextPageToken: data.nextPageToken,\n  };\n}\n\n// Fetch reviews for a location\nasync function fetchReviews(\n  accessToken: string,\n  locationResource: string,\n  pageToken?: string\n): Promise<{ reviews: any[]; nextPageToken?: string }> {\n  const url = new URL(`${GBP_V4_BASE}/${locationResource}/reviews`);\n  url.searchParams.set('pageSize', '50');\n  if (pageToken) {\n    url.searchParams.set('pageToken', pageToken);\n  }\n\n  const response = await fetch(url.toString(), {\n    headers: { Authorization: `Bearer ${accessToken}` },\n  });\n\n  const data = await response.json();\n  \n  if (!response.ok) {\n    console.error('[GMB Sync] Failed to fetch reviews for location:', locationResource, data);\n    // Don't throw error for reviews, just return empty array\n    return { reviews: [], nextPageToken: undefined };\n  }\n\n  return {\n    reviews: data.reviews || [],\n    nextPageToken: data.nextPageToken,\n  };\n}\n\n// Fetch media for a location\nasync function fetchMedia(\n  accessToken: string,\n  locationResource: string,\n  pageToken?: string\n): Promise<{ media: any[]; nextPageToken?: string }> {\n  const url = new URL(`${GBP_V4_BASE}/${locationResource}/media`);\n  url.searchParams.set('pageSize', '50');\n  if (pageToken) {\n    url.searchParams.set('pageToken', pageToken);\n  }\n\n  const response = await fetch(url.toString(), {\n    headers: { Authorization: `Bearer ${accessToken}` },\n  });\n\n  const data = await response.json();\n  \n  if (!response.ok) {\n    console.error('[GMB Sync] Failed to fetch media for location:', locationResource, data);\n    // Don't throw error for media, just return empty array\n    return { media: [], nextPageToken: undefined };\n  }\n\n  return {\n    media: data.mediaItems || [],\n    nextPageToken: data.nextPageToken,\n  };\n}\n\nexport async function POST(request: NextRequest) {\n  console.log('[GMB Sync API] Sync request received');\n  const started = Date.now();\n  \n  try {\n    const supabase = await createClient();\n    \n    // Get authenticated user\n    const { data: { user }, error: authError } = await supabase.auth.getUser();\n    if (authError || !user) {\n      console.error('[GMB Sync API] Authentication failed:', authError);\n      return NextResponse.json(\n        { error: 'Unauthorized' },\n        { status: 401 }\n      );\n    }\n    \n    console.log('[GMB Sync API] User authenticated:', user.id);\n    \n    // Parse request body\n    const body = await request.json();\n    const { accountId, syncType = 'full' } = body;\n    \n    if (!accountId) {\n      return NextResponse.json(\n        { error: 'Missing accountId' },\n        { status: 400 }\n      );\n    }\n    \n    console.log(`[GMB Sync API] Starting ${syncType} sync for account:`, accountId);\n    \n    // Get account details\n    const { data: account, error: accountError } = await supabase\n      .from('gmb_accounts')\n      .select('*')\n      .eq('id', accountId)\n      .eq('user_id', user.id)\n      .single();\n      \n    if (accountError || !account) {\n      console.error('[GMB Sync API] Account not found:', accountError);\n      return NextResponse.json(\n        { error: 'Account not found' },\n        { status: 404 }\n      );\n    }\n    \n    if (!account.is_active) {\n      console.error('[GMB Sync API] Account is inactive');\n      return NextResponse.json(\n        { error: 'Account is inactive' },\n        { status: 400 }\n      );\n    }\n    \n    // Get Google account resource name if not stored\n    let accountResource = account.account_id;\n    if (!accountResource) {\n      console.log('[GMB Sync API] Account resource name missing, fetching from Google...');\n      const accessToken = await getValidAccessToken(supabase, accountId);\n      \n      // Try to get account resource name from Google\n      const accountsResponse = await fetch(\n        'https://mybusinessaccountmanagement.googleapis.com/v1/accounts',\n        {\n          headers: { Authorization: `Bearer ${accessToken}` },\n        }\n      );\n      \n      if (accountsResponse.ok) {\n        const accountsData = await accountsResponse.json();\n        const accounts = accountsData.accounts || [];\n        if (accounts.length > 0) {\n          accountResource = accounts[0].name;\n          console.log('[GMB Sync API] Found account resource:', accountResource);\n          \n          // Update account with resource name\n          await supabase\n            .from('gmb_accounts')\n            .update({ account_id: accountResource })\n            .eq('id', accountId);\n        }\n      }\n      \n      if (!accountResource) {\n        console.error('[GMB Sync API] Could not find Google account resource');\n        return NextResponse.json(\n          { error: 'Could not find Google account' },\n          { status: 400 }\n        );\n      }\n    }\n    \n    // Get valid access token\n    const accessToken = await getValidAccessToken(supabase, accountId);\n    \n    const counts = { locations: 0, reviews: 0, media: 0 };\n    \n    // Fetch and upsert locations\n    console.log('[GMB Sync API] Starting location sync...');\n    let locationsNextPageToken: string | undefined = undefined;\n    \n    do {\n      const { locations, nextPageToken } = await fetchLocations(\n        accessToken,\n        accountResource,\n        locationsNextPageToken\n      );\n      \n      if (locations.length > 0) {\n        const locationRows = locations.map((location) => {\n          const address = location.storefrontAddress;\n          const addressStr = address\n            ? `${(address.addressLines || []).join(', ')}${\n                address.locality ? `, ${address.locality}` : ''\n              }${address.administrativeArea ? `, ${address.administrativeArea}` : ''}${\n                address.postalCode ? ` ${address.postalCode}` : ''\n              }`\n            : null;\n            \n          return {\n            gmb_account_id: accountId,\n            user_id: user.id,\n            location_id: location.name,\n            location_name: location.title || 'Unnamed Location',\n            address: addressStr,\n            phone: location.phoneNumbers?.primaryPhone || null,\n            category: location.categories?.primaryCategory?.displayName || null,\n            website: location.websiteUri || null,\n            is_active: true,\n            metadata: location,\n            updated_at: new Date().toISOString(),\n          };\n        });\n        \n        // Upsert locations in chunks\n        for (const chunk of chunks(locationRows)) {\n          const { error } = await supabase\n            .from('gmb_locations')\n            .upsert(chunk, { onConflict: 'gmb_account_id,location_id' });\n            \n          if (error) {\n            console.error('[GMB Sync API] Error upserting locations:', error);\n          }\n        }\n        \n        counts.locations += locations.length;\n      }\n      \n      locationsNextPageToken = nextPageToken;\n      \n      // For incremental sync, only fetch first page\n      if (syncType === 'incremental') break;\n    } while (locationsNextPageToken);\n    \n    console.log(`[GMB Sync API] Synced ${counts.locations} locations`);\n    \n    // Fetch reviews and media for each location\n    console.log('[GMB Sync API] Starting reviews and media sync...');\n    const { data: dbLocations } = await supabase\n      .from('gmb_locations')\n      .select('location_id')\n      .eq('gmb_account_id', accountId);\n      \n    if (dbLocations && Array.isArray(dbLocations)) {\n      for (const location of dbLocations) {\n        // Fetch reviews\n        let reviewsNextPageToken: string | undefined = undefined;\n        do {\n          const { reviews, nextPageToken } = await fetchReviews(\n            accessToken,\n            location.location_id,\n            reviewsNextPageToken\n          );\n          \n          if (reviews.length > 0) {\n            const reviewRows = reviews.map((review) => ({\n              gmb_account_id: accountId,\n              user_id: user.id,\n              location_id: location.location_id,\n              external_review_id: review.name,\n              reviewer_name: review.reviewer?.displayName || null,\n              rating: review.starRating || null,\n              review_text: review.comment || null,\n              review_date: review.createTime || null,\n              reply_text: review.reviewReply?.comment || null,\n              reply_date: review.reviewReply?.updateTime || null,\n              has_reply: !!review.reviewReply?.comment,\n              updated_at: new Date().toISOString(),\n            }));\n            \n            // Upsert reviews in chunks\n            for (const chunk of chunks(reviewRows)) {\n              const { error } = await supabase\n                .from('gmb_reviews')\n                .upsert(chunk, { onConflict: 'external_review_id' });\n                \n              if (error) {\n                console.error('[GMB Sync API] Error upserting reviews:', error);\n              }\n            }\n            \n            counts.reviews += reviews.length;\n          }\n          \n          reviewsNextPageToken = nextPageToken;\n        } while (reviewsNextPageToken && syncType === 'full');\n        \n        // Fetch media\n        let mediaNextPageToken: string | undefined = undefined;\n        do {\n          const { media, nextPageToken } = await fetchMedia(\n            accessToken,\n            location.location_id,\n            mediaNextPageToken\n          );\n          \n          if (media.length > 0) {\n            const mediaRows = media.map((item) => ({\n              gmb_account_id: accountId,\n              location_id: location.location_id,\n              external_media_id: item.name,\n              type: item.mediaFormat || null,\n              url: item.googleUrl || null,\n              created_at: item.createTime || null,\n              updated_at: item.updateTime || null,\n            }));\n            \n            // Upsert media in chunks\n            for (const chunk of chunks(mediaRows)) {\n              const { error } = await supabase\n                .from('gmb_media')\n                .upsert(chunk, { onConflict: 'external_media_id' });\n                \n              if (error) {\n                console.error('[GMB Sync API] Error upserting media:', error);\n              }\n            }\n            \n            counts.media += media.length;\n          }\n          \n          mediaNextPageToken = nextPageToken;\n        } while (mediaNextPageToken && syncType === 'full');\n      }\n    }\n    \n    console.log(`[GMB Sync API] Synced ${counts.reviews} reviews and ${counts.media} media items`);\n    \n    // Update last sync timestamp\n    await supabase\n      .from('gmb_accounts')\n      .update({ last_sync: new Date().toISOString() })\n      .eq('id', accountId);\n      \n    const took = Date.now() - started;\n    console.log(`[GMB Sync API] Sync completed in ${took}ms`, counts);\n    \n    return NextResponse.json({\n      ok: true,\n      accountId,\n      syncType,\n      counts,\n      took_ms: took,\n    });\n    \n  } catch (error: any) {\n    const took = Date.now() - started;\n    console.error('[GMB Sync API] Sync failed:', error);\n    \n    // Handle specific error cases\n    if (error.message === 'invalid_grant') {\n      return NextResponse.json(\n        {\n          ok: false,\n          error: 'invalid_grant',\n          message: 'Google authorization expired. Please reconnect your account.',\n          took_ms: took,\n        },\n        { status: 401 }\n      );\n    }\n    \n    return NextResponse.json(\n      {\n        ok: false,\n        error: error.message || 'Sync failed',\n        took_ms: took,\n      },\n      { status: 500 }\n    );\n  }\n}","size_bytes":16142},"app/api/gmb/oauth-callback/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@/lib/supabase/server';\n\nexport const dynamic = 'force-dynamic';\n\nconst GOOGLE_TOKEN_URL = 'https://oauth2.googleapis.com/token';\nconst GOOGLE_USERINFO_URL = 'https://www.googleapis.com/oauth2/v2/userinfo';\nconst GMB_ACCOUNTS_URL = 'https://mybusinessaccountmanagement.googleapis.com/v1/accounts';\nconst GMB_LOCATIONS_URL = 'https://mybusinessbusinessinformation.googleapis.com/v1';\n\nexport async function GET(request: NextRequest) {\n  console.log('[OAuth Callback] Processing OAuth callback...');\n  \n  try {\n    const searchParams = request.nextUrl.searchParams;\n    const code = searchParams.get('code');\n    const state = searchParams.get('state');\n    const error = searchParams.get('error');\n    \n    // Handle OAuth errors\n    if (error) {\n      console.error('[OAuth Callback] OAuth error:', error);\n      const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';\n      return NextResponse.redirect(\n        `${baseUrl}/accounts#error=${encodeURIComponent(`OAuth error: ${error}`)}`\n      );\n    }\n    \n    // Validate parameters\n    if (!code || !state) {\n      console.error('[OAuth Callback] Missing code or state');\n      const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';\n      return NextResponse.redirect(\n        `${baseUrl}/accounts#error=${encodeURIComponent('Missing authorization code or state')}`\n      );\n    }\n    \n    console.log('[OAuth Callback] State:', state);\n    \n    const supabase = await createClient();\n    \n    // Verify state and get user ID\n    const { data: stateRecord, error: stateError } = await supabase\n      .from('oauth_states')\n      .select('*')\n      .eq('state', state)\n      .eq('used', false)\n      .single();\n      \n    if (stateError || !stateRecord) {\n      console.error('[OAuth Callback] Invalid state:', stateError);\n      const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';\n      return NextResponse.redirect(\n        `${baseUrl}/accounts#error=${encodeURIComponent('Invalid or expired authorization state')}`\n      );\n    }\n    \n    // Check if state has expired (30 minute expiry)\n    const expiresAt = new Date(stateRecord.expires_at);\n    if (expiresAt < new Date()) {\n      console.error('[OAuth Callback] State has expired');\n      const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';\n      return NextResponse.redirect(\n        `${baseUrl}/accounts#error=${encodeURIComponent('Authorization state has expired')}`\n      );\n    }\n    \n    // Mark state as used\n    await supabase\n      .from('oauth_states')\n      .update({ used: true })\n      .eq('state', state);\n      \n    const userId = stateRecord.user_id;\n    console.log('[OAuth Callback] User ID from state:', userId);\n    \n    // Exchange code for tokens\n    const clientId = process.env.GOOGLE_CLIENT_ID;\n    const clientSecret = process.env.GOOGLE_CLIENT_SECRET;\n    const redirectUri = process.env.GOOGLE_REDIRECT_URI || \n      `${process.env.NEXT_PUBLIC_BASE_URL}/api/gmb/oauth-callback`;\n    \n    if (!clientId || !clientSecret) {\n      console.error('[OAuth Callback] Missing Google OAuth configuration');\n      const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';\n      return NextResponse.redirect(\n        `${baseUrl}/accounts#error=${encodeURIComponent('Server configuration error')}`\n      );\n    }\n    \n    console.log('[OAuth Callback] Exchanging code for tokens...');\n    const tokenResponse = await fetch(GOOGLE_TOKEN_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: new URLSearchParams({\n        code,\n        client_id: clientId,\n        client_secret: clientSecret,\n        redirect_uri: redirectUri,\n        grant_type: 'authorization_code',\n      }),\n    });\n    \n    const tokenData = await tokenResponse.json();\n    \n    if (!tokenResponse.ok) {\n      console.error('[OAuth Callback] Token exchange failed:', tokenData);\n      const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';\n      return NextResponse.redirect(\n        `${baseUrl}/accounts#error=${encodeURIComponent(\n          `Token exchange failed: ${tokenData.error_description || tokenData.error}`\n        )}`\n      );\n    }\n    \n    console.log('[OAuth Callback] Tokens received successfully');\n    \n    // Get user info from Google\n    console.log('[OAuth Callback] Fetching user info...');\n    const userInfoResponse = await fetch(GOOGLE_USERINFO_URL, {\n      headers: {\n        Authorization: `Bearer ${tokenData.access_token}`,\n      },\n    });\n    \n    if (!userInfoResponse.ok) {\n      console.error('[OAuth Callback] Failed to fetch user info');\n      const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';\n      return NextResponse.redirect(\n        `${baseUrl}/accounts#error=${encodeURIComponent('Failed to fetch user information')}`\n      );\n    }\n    \n    const userInfo = await userInfoResponse.json();\n    console.log('[OAuth Callback] User info:', { email: userInfo.email, id: userInfo.id });\n    \n    // Calculate token expiry\n    const tokenExpiresAt = new Date();\n    tokenExpiresAt.setSeconds(tokenExpiresAt.getSeconds() + (tokenData.expires_in || 3600));\n    \n    // Fetch GMB accounts\n    console.log('[OAuth Callback] Fetching GMB accounts...');\n    const gmbAccountsResponse = await fetch(GMB_ACCOUNTS_URL, {\n      headers: {\n        Authorization: `Bearer ${tokenData.access_token}`,\n      },\n    });\n    \n    if (!gmbAccountsResponse.ok) {\n      console.error('[OAuth Callback] Failed to fetch GMB accounts:', await gmbAccountsResponse.text());\n      const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';\n      return NextResponse.redirect(\n        `${baseUrl}/accounts#error=${encodeURIComponent('Failed to fetch Google My Business accounts')}`\n      );\n    }\n    \n    const gmbAccountsData = await gmbAccountsResponse.json();\n    const gmbAccounts = gmbAccountsData.accounts || [];\n    \n    console.log(`[OAuth Callback] Found ${gmbAccounts.length} GMB accounts`);\n    \n    if (gmbAccounts.length === 0) {\n      console.warn('[OAuth Callback] No GMB accounts found for user');\n      const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';\n      return NextResponse.redirect(\n        `${baseUrl}/accounts#error=${encodeURIComponent('No Google My Business accounts found')}`\n      );\n    }\n    \n    // Process each GMB account\n    let savedAccountId: string | null = null;\n    \n    for (const gmbAccount of gmbAccounts) {\n      const accountName = gmbAccount.accountName || gmbAccount.name;\n      const accountId = gmbAccount.name; // e.g., \"accounts/12345\"\n      \n      console.log(`[OAuth Callback] Processing GMB account: ${accountName} (${accountId})`);\n      \n      // Check if account already exists\n      const { data: existingAccount } = await supabase\n        .from('gmb_accounts')\n        .select('id, refresh_token')\n        .eq('user_id', userId)\n        .eq('account_id', accountId)\n        .maybeSingle();\n        \n      if (existingAccount) {\n        console.log(`[OAuth Callback] Updating existing account ${existingAccount.id}`);\n        \n        const updateData = {\n          user_id: userId,\n          account_name: accountName,\n          account_id: accountId,\n          email: userInfo.email,\n          access_token: tokenData.access_token,\n          refresh_token: tokenData.refresh_token || existingAccount.refresh_token,\n          token_expires_at: tokenExpiresAt.toISOString(),\n          is_active: true,\n          last_sync: new Date().toISOString(),\n        };\n        \n        const { error: updateError } = await supabase\n          .from('gmb_accounts')\n          .update(updateData)\n          .eq('id', existingAccount.id);\n          \n        if (updateError) {\n          console.error('[OAuth Callback] Error updating account:', updateError);\n          continue;\n        }\n        \n        savedAccountId = existingAccount.id;\n        console.log(`[OAuth Callback] Successfully updated account ${existingAccount.id}`);\n      } else {\n        console.log(`[OAuth Callback] Creating new account for user ${userId}`);\n        \n        const insertData = {\n          user_id: userId,\n          account_name: accountName,\n          account_id: accountId,\n          email: userInfo.email,\n          google_account_id: userInfo.id,\n          access_token: tokenData.access_token,\n          refresh_token: tokenData.refresh_token,\n          token_expires_at: tokenExpiresAt.toISOString(),\n          is_active: true,\n          last_sync: null,\n          created_at: new Date().toISOString(),\n        };\n        \n        const { data: insertedAccount, error: insertError } = await supabase\n          .from('gmb_accounts')\n          .insert(insertData)\n          .select('id')\n          .single();\n          \n        if (insertError || !insertedAccount) {\n          console.error('[OAuth Callback] Error inserting account:', insertError);\n          continue;\n        }\n        \n        savedAccountId = insertedAccount.id;\n        console.log(`[OAuth Callback] Successfully created account ${insertedAccount.id}`);\n      }\n      \n      // Fetch initial locations for this account\n      console.log(`[OAuth Callback] Fetching initial locations for account ${accountId}`);\n      const locationsUrl = `${GMB_LOCATIONS_URL}/${accountId}/locations`;\n      const locationsResponse = await fetch(\n        `${locationsUrl}?readMask=name,title,storefrontAddress,phoneNumbers,websiteUri,categories`,\n        {\n          headers: {\n            Authorization: `Bearer ${tokenData.access_token}`,\n          },\n        }\n      );\n      \n      if (locationsResponse.ok) {\n        const locationsData = await locationsResponse.json();\n        const locations = locationsData.locations || [];\n        \n        console.log(`[OAuth Callback] Found ${locations.length} locations`);\n        \n        for (const location of locations) {\n          const { data: existingLocation } = await supabase\n            .from('gmb_locations')\n            .select('id')\n            .eq('gmb_account_id', savedAccountId)\n            .eq('location_id', location.name)\n            .maybeSingle();\n            \n          const locationData = {\n            gmb_account_id: savedAccountId,\n            user_id: userId,\n            location_name: location.title || 'Unnamed Location',\n            location_id: location.name,\n            address: location.storefrontAddress\n              ? `${location.storefrontAddress.addressLines?.join(', ') || ''}, ${\n                  location.storefrontAddress.locality || ''\n                }, ${location.storefrontAddress.administrativeArea || ''} ${\n                  location.storefrontAddress.postalCode || ''\n                }`\n              : null,\n            phone: location.phoneNumbers?.primaryPhone || null,\n            category: location.categories?.primaryCategory?.displayName || null,\n            website: location.websiteUri || null,\n            is_active: true,\n            metadata: location,\n            updated_at: new Date().toISOString(),\n          };\n          \n          if (existingLocation) {\n            await supabase\n              .from('gmb_locations')\n              .update(locationData)\n              .eq('id', existingLocation.id);\n          } else {\n            await supabase\n              .from('gmb_locations')\n              .insert(locationData);\n          }\n        }\n      } else {\n        console.error(`[OAuth Callback] Failed to fetch locations:`, await locationsResponse.text());\n      }\n    }\n    \n    // Redirect to accounts page with success\n    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';\n    const redirectUrl = savedAccountId\n      ? `${baseUrl}/accounts#success=true&autosync=${savedAccountId}`\n      : `${baseUrl}/accounts#success=true`;\n      \n    console.log('[OAuth Callback] Redirecting to:', redirectUrl);\n    return NextResponse.redirect(redirectUrl);\n    \n  } catch (error: any) {\n    console.error('[OAuth Callback] Unexpected error:', error);\n    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';\n    return NextResponse.redirect(\n      `${baseUrl}/accounts#error=${encodeURIComponent(\n        error.message || 'An unexpected error occurred'\n      )}`\n    );\n  }\n}","size_bytes":12408},"components/accounts/NoAccountsPlaceholder.tsx":{"content":"// components/accounts/NoAccountsPlaceholder.tsx\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Building2, Plus, Loader2 } from \"lucide-react\";\n\ninterface NoAccountsPlaceholderProps {\n  onConnect: () => void;\n  isConnecting: boolean;\n}\n\nexport function NoAccountsPlaceholder({ onConnect, isConnecting }: NoAccountsPlaceholderProps) {\n  return (\n    <Card className=\"border-primary/20 bg-card shadow-sm mt-6\"> {/* Added margin top */}\n      <CardContent className=\"flex flex-col items-center justify-center py-16 sm:py-20 px-6 text-center\"> {/* Adjusted padding */}\n        <div className=\"w-16 h-16 rounded-full bg-gradient-to-br from-primary/10 to-accent/10 flex items-center justify-center mb-5 border border-primary/20\">\n             <Building2 className=\"w-8 h-8 text-primary/70\" />\n        </div>\n        <h3 className=\"text-xl font-semibold mb-2 text-foreground\">No Accounts Connected Yet</h3>\n        <p className=\"text-muted-foreground text-sm mb-6 max-w-sm mx-auto\">\n          Link your Google My Business account to begin managing your locations, responding to reviews with AI, and tracking performance.\n        </p>\n        <Button onClick={onConnect} disabled={isConnecting} size=\"lg\">\n          {isConnecting ? (\n            <>\n              <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n              Redirecting to Google...\n            </>\n          ) : (\n            <>\n              <Plus className=\"w-5 h-5 mr-2\" />\n              Connect Your First Account\n            </>\n          )}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":1635},"lib/hooks/useOAuthCallbackHandler.ts":{"content":"// lib/hooks/useOAuthCallbackHandler.ts\nimport { useEffect, useState, useCallback } from 'react';\nimport { useToast } from '@/hooks/use-toast';\nimport type { GmbAccount } from '@/lib/types/database'; // تأكد من صحة المسار\n\ninterface OAuthCallbackHandlerProps {\n  // Specify Promise<GmbAccount[]> as return type\n  fetchAccounts: () => Promise<GmbAccount[]>;\n  handleSync: (accountId: string, isAutoSync?: boolean) => Promise<void>;\n}\n\nexport function useOAuthCallbackHandler({ fetchAccounts, handleSync }: OAuthCallbackHandlerProps) {\n  const [autoSyncTriggered, setAutoSyncTriggered] = useState(false);\n  const { toast } = useToast();\n\n  const handleAutoSync = useCallback(async (accountsToSync: GmbAccount[]) => {\n    if (!accountsToSync || accountsToSync.length === 0) {\n      console.log('[useOAuthCallback] No accounts available for auto-sync check.');\n      return;\n    }\n    // Filter for active accounts again, just in case fetch included inactive ones somehow\n    const activeAccounts = accountsToSync.filter(a => a.is_active === true);\n    if (activeAccounts.length === 0) {\n      console.log('[useOAuthCallback] No active accounts found for auto-sync.');\n      return;\n    }\n\n    // accountsToSync should be sorted by created_at desc from fetchAccounts\n    const mostRecentAccount = activeAccounts[0];\n     if (!mostRecentAccount || !mostRecentAccount.id) {\n        console.error('[useOAuthCallback] Could not determine the most recent active account for auto-sync.');\n        return;\n     }\n\n    console.log('[useOAuthCallback] Auto-triggering sync for:', mostRecentAccount.id);\n\n    toast({\n      title: 'Account Connected!',\n      description: 'Starting initial data sync...',\n    });\n\n    try {\n        await handleSync(mostRecentAccount.id, true);\n    } catch (syncError) {\n        console.error('[useOAuthCallback] Auto-sync failed:', syncError);\n        // Toast for sync failure is handled within handleSync\n    }\n\n  }, [handleSync, toast]);\n\n  useEffect(() => {\n    let isMounted = true; // Flag to prevent state updates on unmounted component\n\n    const checkHashAndSync = async () => {\n      // Ensure running only in the browser\n       if (typeof window === 'undefined') return;\n\n      const hash = window.location.hash;\n      console.log('[useOAuthCallback] Checking hash on mount:', hash);\n\n      // Avoid processing if already triggered or component unmounted\n      if (autoSyncTriggered || !isMounted) return;\n\n      let needsInitialFetch = true; // Flag to track if initial fetch is needed\n\n      if (hash.includes('#success=true')) {\n        needsInitialFetch = false; // Fetch will happen within this block\n        console.log('[useOAuthCallback] OAuth success detected.');\n        setAutoSyncTriggered(true); // Prevent re-triggering immediately\n\n        // Clean the URL hash robustly\n        window.history.replaceState(null, '', window.location.pathname + window.location.search);\n\n        // Check for specific account ID to sync from hash\n        const autoSyncMatch = hash.match(/autosync=([^&]+)/);\n        const accountIdToSync = autoSyncMatch ? decodeURIComponent(autoSyncMatch[1]) : null;\n\n        if (accountIdToSync) {\n            console.log(`[useOAuthCallback] Specific account ID found in hash: ${accountIdToSync}. Syncing...`);\n             // Fetch accounts first to ensure the list is up-to-date before syncing\n            await fetchAccounts();\n             if (isMounted) { // Check mount status before async operation\n                 await handleSync(accountIdToSync, true);\n             }\n        } else {\n            console.log('[useOAuthCallback] No specific account ID. Fetching accounts and syncing latest active...');\n            // Fetch accounts *after* cleaning hash, then sync latest\n            const latestAccounts = await fetchAccounts();\n            if (isMounted) { // Check mount status before timeout/async op\n                // Optional delay can remain if DB propagation is slow, but check mount status\n                setTimeout(() => {\n                  if (isMounted) handleAutoSync(latestAccounts);\n                }, 500);\n            }\n        }\n\n      } else if (hash.includes('#error=')) {\n          needsInitialFetch = false; // Fetch happens here too\n          console.log('[useOAuthCallback] OAuth error detected in hash.');\n          const errorMatch = hash.match(/error=([^&]+)/);\n          if (errorMatch) {\n            const errorMessage = decodeURIComponent(errorMatch[1].replace(/\\+/g, ' '));\n            toast({\n              title: 'Connection Failed',\n              description: errorMessage || 'Failed to connect Google account.',\n              variant: 'destructive',\n            });\n          }\n          // Clean hash and fetch accounts\n          window.history.replaceState(null, '', window.location.pathname + window.location.search);\n          if(isMounted) await fetchAccounts();\n\n      }\n\n       // Perform initial fetch if no relevant hash was processed\n       if (needsInitialFetch && isMounted) {\n            console.log('[useOAuthCallback] No relevant hash processed, performing initial fetch.');\n            await fetchAccounts();\n       }\n    };\n\n    checkHashAndSync();\n\n    // Cleanup function to set isMounted to false when component unmounts\n    return () => {\n      isMounted = false;\n      console.log('[useOAuthCallback] Component unmounted.');\n    };\n    // Dependencies: fetchAccounts and handleAutoSync callbacks ensure stability.\n    // autoSyncTriggered prevents re-running logic after initial processing.\n  }, [fetchAccounts, handleAutoSync, autoSyncTriggered, toast]); // Added toast as dependency\n\n  // No return value needed as this hook manages effects\n}","size_bytes":5693},"lib/hooks/useAccountsManagement.ts":{"content":"// lib/hooks/useAccountsManagement.ts\nimport { useState, useCallback } from 'react';\nimport { createClient } from '@/lib/supabase/client';\nimport { useToast } from '@/hooks/use-toast';\nimport type { GmbAccount } from '@/lib/types/database'; // تأكد من صحة المسار\n\nexport function useAccountsManagement() {\n  const [accounts, setAccounts] = useState<GmbAccount[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [syncing, setSyncing] = useState<string | null>(null);\n  const [deleting, setDeleting] = useState<string | null>(null);\n  const { toast } = useToast();\n  const supabase = createClient();\n\n  const fetchAccounts = useCallback(async (): Promise<GmbAccount[]> => { // تحديد نوع الإرجاع\n    setLoading(true);\n    console.log('[useAccountsManagement] Fetching accounts...');\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) {\n        console.log('[useAccountsManagement] No authenticated user found.');\n        setAccounts([]);\n        return [];\n      }\n       console.log('[useAccountsManagement] Authenticated user ID:', user.id);\n\n      const { data: accountsData, error } = await supabase\n        .from('gmb_accounts')\n        .select('*')\n        .eq('user_id', user.id)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n\n      console.log(`[useAccountsManagement] Found ${accountsData?.length ?? 0} accounts in DB.`);\n\n      if (!accountsData || accountsData.length === 0) {\n        setAccounts([]);\n        return [];\n      }\n\n      console.log('[useAccountsManagement] Fetching location counts...');\n      const accountsWithLocations = await Promise.all(\n        accountsData.map(async (account) => {\n          // Add a check for account.id existence\n          if (!account.id) {\n             console.warn('[useAccountsManagement] Account found without ID:', account);\n             // Return a partial object or skip, ensure GmbAccount type compatibility\n             return { ...account, id: `unknown-${Math.random()}`, total_locations: 0 } as GmbAccount;\n          }\n          const { count, error: countError } = await supabase\n            .from('gmb_locations')\n            .select('*', { count: 'exact', head: true })\n            .eq('gmb_account_id', account.id);\n\n          if (countError) {\n             console.error(`[useAccountsManagement] Error fetching location count for account ${account.id}:`, countError);\n             // Return account data even if count fails\n             return { ...account, total_locations: 0 };\n          }\n\n          return {\n            ...account,\n            total_locations: count || 0,\n          };\n        })\n      );\n\n      // Filter out potential error objects if needed, ensuring type safety\n      const validAccounts = accountsWithLocations.filter(acc => acc.id) as GmbAccount[];\n\n      console.log('[useAccountsManagement] Accounts processed:', validAccounts);\n      setAccounts(validAccounts);\n      return validAccounts; // Return the valid accounts\n    } catch (error: any) {\n      console.error('[useAccountsManagement] Error fetching accounts:', error);\n      toast({\n        title: 'Error Loading Accounts',\n        description: error.message || 'Failed to fetch accounts',\n        variant: 'destructive',\n      });\n      setAccounts([]);\n      return []; // Return empty array on error\n    } finally {\n      setLoading(false);\n      console.log('[useAccountsManagement] fetchAccounts finished.');\n    }\n  }, [supabase, toast]); // Removed fetchAccounts from dependencies\n\n  const handleSync = useCallback(async (accountId: string, isAutoSync = false) => {\n    setSyncing(accountId);\n    console.log(`[useAccountsManagement] ${isAutoSync ? 'Auto-syncing' : 'Syncing'} account ${accountId}`);\n    try {\n      const response = await fetch('/api/gmb/sync', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ accountId, syncType: 'full' }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        console.error('[useAccountsManagement] Sync API error:', errorData);\n        if (errorData.error === 'invalid_grant') {\n          toast({\n            title: 'Authorization Expired',\n            description: 'Please reconnect your account.',\n            variant: 'destructive',\n          });\n          // Attempt to refetch accounts to update status UI\n           await fetchAccounts();\n          return;\n        }\n        throw new Error(errorData.error || errorData.message || 'Sync failed');\n      }\n\n      const data = await response.json();\n      console.log('[useAccountsManagement] Sync successful:', data);\n      toast({\n        title: isAutoSync ? 'Auto-Sync Complete!' : 'Sync Successful!',\n        description: `Synced ${data.counts?.locations || 0} locations, ${data.counts?.reviews || 0} reviews, ${data.counts?.media || 0} media items.`,\n      });\n      await fetchAccounts(); // Refresh list after sync\n    } catch (error: any) {\n      console.error('[useAccountsManagement] Sync error:', error);\n      toast({\n        title: 'Sync Failed',\n        description: error.message || 'Failed to sync account',\n        variant: 'destructive',\n      });\n    } finally {\n      setSyncing(null);\n    }\n  }, [supabase, toast, fetchAccounts]); // Added supabase\n\n  const handleDisconnect = useCallback(async (accountId: string) => {\n    // Added confirmation message in Arabic\n    if (!confirm('هل أنت متأكد أنك تريد فصل هذا الحساب؟ ستتوقف المزامنة ولكن لن يتم حذف البيانات الحالية.')) return;\n\n    setDeleting(accountId);\n    console.log(`[useAccountsManagement] Disconnecting account ${accountId}`);\n    try {\n      // It's better practice to check the user ID here if RLS isn't fully guaranteed or for defense in depth\n      const { data: { user } } = await supabase.auth.getUser();\n       if (!user) throw new Error(\"User not authenticated for disconnect\");\n\n      const { error } = await supabase\n        .from('gmb_accounts')\n        .update({ is_active: false })\n        .eq('id', accountId)\n        .eq('user_id', user.id); // Ensure only the owner can disconnect\n\n      if (error) throw error;\n\n      toast({\n        title: 'Account Disconnected', // Kept English for consistency with other toasts\n        description: 'Syncing has been stopped for this account.',\n      });\n      await fetchAccounts(); // Refresh the list\n    } catch (error: any) {\n      console.error('[useAccountsManagement] Disconnect error:', error);\n      toast({\n        title: 'Error Disconnecting',\n        description: error.message || 'Failed to disconnect account',\n        variant: 'destructive',\n      });\n    } finally {\n      setDeleting(null);\n    }\n  }, [supabase, toast, fetchAccounts]); // Added supabase\n\n  return {\n    accounts,\n    loading,\n    syncing,\n    deleting,\n    fetchAccounts,\n    handleSync,\n    handleDisconnect,\n  };\n}","size_bytes":7007},"components/accounts/AccountCard.tsx":{"content":"// components/accounts/AccountCard.tsx\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Building2, MapPin, Clock, RefreshCw, Trash2 } from \"lucide-react\";\n// Import GmbAccount interface - ensure path is correct\nimport type { GmbAccount } from '@/lib/types/database';\n\ninterface AccountCardProps {\n  account: GmbAccount;\n  syncingAccountId: string | null;\n  deletingAccountId: string | null;\n  onSync: (accountId: string) => void;\n  onDisconnect: (accountId: string) => void;\n  formatDate: (dateString?: string | null) => string; // Allow null for dateString\n}\n\nexport function AccountCard({\n  account,\n  syncingAccountId,\n  deletingAccountId,\n  onSync,\n  onDisconnect,\n  formatDate,\n}: AccountCardProps) {\n  // Defensive check in case account object is malformed\n  if (!account || !account.id) {\n    console.error(\"AccountCard received invalid account data\", account);\n    return null; // Don't render if essential data is missing\n  }\n\n  const isSyncing = syncingAccountId === account.id;\n  const isDeleting = deletingAccountId === account.id;\n  // Determine status based on is_active field\n  const isActive = account.is_active ?? false;\n  const currentStatus = isActive ? 'active' : 'disconnected';\n\n  return (\n    // Added data-testid for easier testing\n    <Card data-testid={`account-card-${account.id}`} className=\"bg-card border border-primary/30 shadow-sm transition-shadow hover:shadow-md hover:border-primary/50 flex flex-col\">\n      <CardHeader className=\"pb-4\"> {/* Reduced padding bottom */}\n        <div className=\"flex items-start justify-between gap-2\">\n          {/* Account Info */}\n          <div className=\"flex items-center gap-3 min-w-0 flex-1\"> {/* Allow shrinking */}\n            <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center flex-shrink-0\">\n              <Building2 className=\"w-5 h-5 text-primary\" />\n            </div>\n            <div className=\"min-w-0\"> {/* Ensure text truncation works */}\n              <CardTitle className=\"text-base font-semibold text-foreground truncate\">{account.account_name || 'Unnamed Account'}</CardTitle>\n              <CardDescription className=\"text-xs text-muted-foreground truncate\">{account.email || 'No email'}</CardDescription>\n            </div>\n          </div>\n          {/* Status Badge */}\n          <Badge\n            variant={isActive ? 'default' : 'secondary'}\n            // Improved styling for statuses\n            className={`capitalize text-xs px-2 py-0.5 rounded-full ${\n              isActive\n                ? 'bg-green-100 text-green-800 border border-green-200 dark:bg-green-900/40 dark:text-green-300 dark:border-green-700/50'\n                : 'bg-red-100 text-red-800 border border-red-200 dark:bg-red-900/30 dark:text-red-300 dark:border-red-700/50'\n            }`}\n          >\n            {currentStatus}\n          </Badge>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-3 pt-0 flex-grow flex flex-col justify-between\"> {/* Adjusted padding and flex */}\n        {/* Stats */}\n        <div className=\"grid grid-cols-2 gap-3\">\n          <div className=\"bg-secondary/40 rounded-md p-2 border border-primary/10 text-center\">\n            <div className=\"flex items-center justify-center gap-1 mb-0.5 text-muted-foreground\">\n              <MapPin className=\"w-3 h-3\" />\n              <p className=\"text-xs font-medium\">Locations</p>\n            </div>\n            <p className=\"text-lg font-bold text-foreground\">{account.total_locations ?? 0}</p>\n          </div>\n          <div className=\"bg-secondary/40 rounded-md p-2 border border-primary/10 text-center\">\n            <div className=\"flex items-center justify-center gap-1 mb-0.5 text-muted-foreground\">\n              <Clock className=\"w-3 h-3\" />\n              <p className=\"text-xs font-medium\">Last Sync</p>\n            </div>\n            <p className=\"text-xs font-medium text-foreground h-5 flex items-center justify-center\"> {/* Fixed height */}\n              {formatDate(account.last_sync)}\n            </p>\n          </div>\n        </div>\n\n        {/* Actions */}\n        <div className=\"mt-auto space-y-2\"> {/* Push actions to bottom */}\n           {!isActive && (\n               <p className=\"text-xs text-center text-orange-500/90 dark:text-orange-400/80 mb-2 px-2\">\n                 Account disconnected. Reconnect to enable syncing and updates.\n               </p>\n           )}\n          <div className=\"flex gap-2\">\n            <Button\n              onClick={() => onSync(account.id)}\n              disabled={isSyncing || !isActive || isDeleting} // Disable if not active or deleting\n              className=\"flex-1\"\n              variant=\"outline\"\n              size=\"sm\"\n            >\n              <RefreshCw className={`w-3.5 h-3.5 mr-1.5 ${isSyncing ? 'animate-spin' : ''}`} />\n              {isSyncing ? 'Syncing...' : 'Sync Now'}\n            </Button>\n            <Button\n              onClick={() => onDisconnect(account.id)}\n              disabled={isDeleting || !isActive} // Can only disconnect active accounts\n              variant=\"destructive\"\n              size=\"sm\"\n              className=\"flex-shrink-0\" // Prevent shrinking too much\n            >\n              <Trash2 className=\"w-3.5 h-3.5 mr-1.5\" />\n              {isDeleting ? '...' : 'Disconnect'} {/* Shorten text */}\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":5555}},"version":2}